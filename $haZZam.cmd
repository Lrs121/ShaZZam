::$haZZam! A native Windows image deployment tool. (C) Joshua Cline - All rights reserved
::Build, administrate and backup your Windows in a native WinPE recovery environment.
@ECHO OFF&&SETLOCAL ENABLEDELAYEDEXPANSION&&CHCP 437>NUL&&SET $VER_CUR=1122&&SET "ORIG_CD=%CD%"&&CD /D "%~DP0"&&Reg.exe query "HKU\S-1-5-19\Environment">NUL
IF NOT "%ERRORLEVEL%" EQU "0" ECHO Right-Click ^& Run As Administrator&&PAUSE&&GOTO:CLEAN_EXIT
SET "ARGUE=%*"&&SET "DELIMS= "&&CALL:ARGUE&&FOR %%a in (1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20) DO (IF DEFINED A%%a CALL SET "ARG%%a=%%A%%a%%")
FOR /F "TOKENS=*" %%a in ('ECHO %CD%') DO (SET "PROG_FOLDER=%%a")
FOR %%G in (A B C D E F G H I J K L M N O P Q R S T U V W X Y Z) DO (CALL SET "PROG_FOLDER=%%PROG_FOLDER:%%G=%%G%%")
FOR /F "DELIMS=" %%G in ('CMD.EXE /D /U /C ECHO %PROG_FOLDER%^| FIND /V ""') do (IF "%%G"==" " ECHO Remove the space from the folder's name, then launch again&&PAUSE&&GOTO:CLEAN_EXIT)
IF DEFINED ARG1 FOR %%G in (A B C D E F G H I J K L M N O P Q R S T U V W X Y Z) DO (FOR %%1 in (1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20) DO (IF DEFINED ARG%%1 CALL SET "ARG%%1=%%ARG%%1:%%G=%%G%%"))
CALL:MOUNT_INT
IF DEFINED ARG1 SET "PROG_MODE=COMMAND"&&GOTO:COMMAND_MODE
FOR /F "TOKENS=1 DELIMS=: " %%a IN ('DISM') DO (IF "%%a"=="Examples" SET "LANG_PASS=1")
IF NOT DEFINED LANG_PASS ECHO Non-english host language/locale. -Untested- proceed with extreme caution.&&PAUSE
IF NOT "%PROG_FOLDER%"=="X:\$" SET "PROG_MODE=PORTABLE"&&COLOR 0A&&CALL:TITLECARD&&GOTO:PROG_MAIN
IF "%PROG_FOLDER%"=="X:\$" IF "%SystemDrive%"=="X:" SET "PROG_MODE=RAMDISK"&&COLOR 0B&&CALL:TITLECARD
CALL:HOME_AUTO&&CALL:SETS_HANDLER&&REG.EXE DELETE "HKEY_LOCAL_MACHINE\SYSTEM\ControlSet001\Control\MiniNT" /f>NUL 2>&1
IF "%AUTOPILOT%"=="ENABLED" SET "BOOT_TARGET=VHDX"&&CALL:BOOT_TARGET_TOGGLE&&CALL:AUTOPILOT_COUNT&&GOTO:CLEAN_EXIT
REM PROG_MAIN_PROG_MAIN_PROG_MAIN_PROG_MAIN_PROG_MAIN_PROG_MAIN_PROG_MAIN_
:PROG_MAIN
REM PROG_MAIN_PROG_MAIN_PROG_MAIN_PROG_MAIN_PROG_MAIN_PROG_MAIN_PROG_MAIN_
SET "MOUNT="&&IF "%PROG_MODE%"=="RAMDISK" IF "%PROG_SOURCE%"=="X:\$" CALL:HOME_AUTO
@ECHO OFF&&CLS&&CALL:SETS_HANDLER&&CALL:TITLE_GNC&&CALL:COLOR_CHK&&CALL:CLEAN&&CALL:PAD_LINE
IF NOT "%PROG_MODE%"=="RAMDISK" ECHO                          $haZZam^^! Image-Deploy&&CALL:PAD_LINE
IF "%PROG_MODE%"=="RAMDISK" ECHO                 $haZZam^^! Image-Deploy Boot-Environment&&CALL:PAD_LINE
ECHO  {1} Image Management&&ECHO  {2} Image Processor&&ECHO  {3} Package Creator&&ECHO  {4} File Management&&ECHO  {5} Disk Management&&ECHO  {6} Tasks&&ECHO  {.} Settings&&CALL:PAD_LINE
IF EXIST "%PROG_SOURCE%\DISK_TARGET" IF "%PROG_SOURCE%"=="%PROG_FOLDER%" ECHO  [Disk[Error {@@} Attempt Home-ReAssign [ID[%DISK_TARGET%]&&CALL:PAD_LINE
IF DEFINED DISK_TARGET IF "%HOME_MOUNT%"=="YES" IF "%PROG_SOURCE%"=="S:\$" ECHO  [Disk[%DISK_NUMBER%] [ID[%DISK_TARGET%]&&CALL:PAD_LINE
IF "%SHORTCUTS%"=="ENABLED" ECHO  {Q}uit {%HOTKEY_1%} {%HOTKEY_2%} {%HOTKEY_3%} {%HOTKEY_4%} {%HOTKEY_5%}&&CALL:PAD_LINE
IF NOT "%SHORTCUTS%"=="ENABLED" ECHO  {Q}uit {?}Info                                       [%PROG_MODE% MODE]&&CALL:PAD_LINE
IF NOT "%PROG_MODE%"=="RAMDISK" IF "%PAD_TYPE%"=="8" CALL:PAD_LINE>NUL
CALL:MENU_SELECT
IF "%SELECT%"=="1" GOTO:IMAGEMGR_START
IF "%SELECT%"=="2" GOTO:IMAGEPROC_START
IF "%SELECT%"=="3" GOTO:MAKER_START
IF "%SELECT%"=="4" GOTO:FILEMGR_START
IF "%SELECT%"=="5" IF NOT DEFINED DISCLAIMER CALL:DISCLAIMER
IF "%SELECT%"=="5" IF DEFINED DISCLAIMER GOTO:DISKMGR_START
IF "%SELECT%"=="6" SET "EXAMPLE_MODE=INSTANT"&&CALL:PACKEX_MENU_START
IF "%SELECT%"=="@@" IF "%PROG_MODE%"=="RAMDISK" CALL:HOME_MANUAL
IF "%SELECT%"=="Q" GOTO:QUIT
IF "%SELECT%"=="~" SET&&CALL:PAUSED
IF "%SELECT%"=="." GOTO:$ETTINGS_START
IF "%SELECT%"=="?" CALL:PROG_MAIN_HELP
IF "%SELECT%"=="RESTART" GOTO:RESTART
IF "%SHORTCUTS%"=="ENABLED" CALL:SHORT_RUN
GOTO:PROG_MAIN
:PAD_LINE
IF NOT DEFINED CHCP_OLD FOR /F "TOKENS=2 DELIMS=:" %%a IN ('CHCP') DO SET "CHCP_OLD=%%a"
IF NOT DEFINED PAD_TYPE SET "PAD_TYPE=1"
IF NOT DEFINED PAD_SIZE SET "PAD_SIZE=7"
FOR %%a in (1 2 3) DO (IF "%PAD_TYPE%"=="%%a" CHCP 65001 >NUL)
IF "%PAD_TYPE%"=="1" SET "PAD_BLK=■■■■■■■■■■"
IF "%PAD_TYPE%"=="2" SET "PAD_BLK=▒▒▒▒▒▒▒▒▒▒"
IF "%PAD_TYPE%"=="3" SET "PAD_BLK=□□□□□□□□□□"
IF "%PAD_TYPE%"=="4" SET "PAD_BLK=~~~~~~~~~~"
IF "%PAD_TYPE%"=="5" SET "PAD_BLK==========="
IF "%PAD_TYPE%"=="6" SET "PAD_BLK=::::::::::"
IF "%PAD_TYPE%"=="7" SET "PAD_BLK=##########"
IF "%PAD_TYPE%"=="8" IF DEFINED TRIPPY SET "TRIPPY="&&SET "PAD_BLK=\\\\\\\\\\"&&GOTO:PAD_JUMP
IF "%PAD_TYPE%"=="8" IF NOT DEFINED TRIPPY SET "TRIPPY=1"&&SET "PAD_BLK=//////////"
:PAD_JUMP
IF "%PAD_SIZE%"=="10" ECHO;%PAD_BLK%%PAD_BLK%%PAD_BLK%%PAD_BLK%%PAD_BLK%%PAD_BLK%%PAD_BLK%%PAD_BLK%%PAD_BLK%%PAD_BLK%
IF "%PAD_SIZE%"=="7" ECHO;%PAD_BLK%%PAD_BLK%%PAD_BLK%%PAD_BLK%%PAD_BLK%%PAD_BLK%%PAD_BLK%
IF "%PAD_SIZE%"=="4" ECHO;%PAD_BLK%%PAD_BLK%%PAD_BLK%%PAD_BLK%
IF "%PAD_SIZE%"=="2" ECHO;%PAD_BLK%%PAD_BLK%
FOR %%a in (1 2 3) DO (IF "%PAD_TYPE%"=="%%a" CHCP %CHCP_OLD% >NUL)
SET "PAD_SIZE="
EXIT /B
:ARG_VIEW
IF "%TEST%"=="-ARG" FOR %%a in (1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20) DO (IF DEFINED ARG%%a CALL ECHO [ARG%%a]=[%%ARG%%a%%])
EXIT /B
:ARGUE
IF NOT DEFINED ARGUE EXIT /B
IF NOT DEFINED DELIMS SET "DELIMS= "
IF DEFINED FOR_REF FOR /F "TOKENS=1-9 DELIMS=<>()" %%A IN ("%ARGUE%") DO (CALL SET "ARGUE=%%A%%B%%C%%D%%E%%F%%G"&&CALL ECHO *REF* [%%A])
FOR %%1 in (1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20) DO (CALL SET "C%%1="&&CALL SET "A%%1=")
SET "C="&&IF NOT "%DELIMS%"==" " FOR /F "DELIMS=" %%G IN ('CMD.EXE /D /U /C ECHO %DELIMS%^| FIND /V ""') do (CALL SET /A "C+=1"&&SET "V=%%G"&&CALL:DELIMS)
SET "X="&&SET "A=1"&&FOR /F "DELIMS=" %%1 in ('CMD.EXE /D /U /C ECHO %ARGUE%^| FIND /V ""') DO (CALL SET "V=%%1"&&CALL:ARGUEX)
CALL SET /A "ROW+=1"&&IF DEFINED ARG_ONE CALL:ARG_SHIFT
IF DEFINED GET_ROW IF DEFINED ROW_EXT IF "%ROW%"=="%ROW_TGT%" CALL SET "ROW_DSP={1A{%A1%}-{2B{%A2%}-{3C{%A3%}-{4D{%A4%}-{5E{%A5%}-{6F{%A6%}-{7G{%A7%}-{8H{%A8%}-{9I{%A9%}-{10J{%A10%}-{11K{%A11%}-{12L{%A12%}-{13M{%A13%}-{14N{%A14%}-{15O{%A15%}-{16P{%A16%}-{17Q{%A17%}-{18R{%A18%}-{19S{%A19%}-{20T{%A20%}"
IF DEFINED GET_ROW IF DEFINED ROW_EXT IF DEFINED ROW CALL ECHO  {%ROW%} {1A{%A1%}-{2B{%A2%}-{3C{%A3%}-{4D{%A4%}-{5E{%A5%}-{6F{%A6%}-{7G{%A7%}-{8H{%A8%}-{9I{%A9%}-{10J{%A10%}-{11K{%A11%}-{12L{%A12%}-{13M{%A13%}-{14N{%A14%}-{15O{%A15%}-{16P{%A16%}-{17Q{%A17%}-{18R{%A18%}-{19S{%A19%}-{20T{%A20%}&&CALL:PAD_LINE
IF DEFINED GET_ROW IF NOT DEFINED ROW_EXT IF "%ROW%"=="%ROW_TGT%" CALL SET "ROW_DSP={1A{%A1%}-{2B{%A2%}-{3C{%A3%}-{4D{%A4%}-{5E{%A5%}-{6F{%A6%}-{7G{%A7%}-{8H{%A8%}-{9I{%A9%}"
IF DEFINED GET_ROW IF NOT DEFINED ROW_EXT IF DEFINED ROW CALL ECHO  {%ROW%} {1A{%A1%}-{2B{%A2%}-{3C{%A3%}-{4D{%A4%}-{5E{%A5%}-{6F{%A6%}-{7G{%A7%}-{8H{%A8%}-{9I{%A9%}&&CALL:PAD_LINE
IF DEFINED MARK IF "%ROW%"=="%ROW_TGT%" IF "%FOR_SAV%"=="FRESH" IF EXIST FOR.CMD DEL /F FOR.CMD>NUL
IF DEFINED MARK IF "%ROW%"=="%ROW_TGT%" CALL SET CLM_DAT=%%A%CLM_TGT%%%&&IF NOT EXIST FOR.CMD ECHO @ECHO OFF>FOR.CMD
IF DEFINED MARK IF "%ROW%"=="%ROW_TGT%" CALL SET FS_LAST=[SKIP[%SKIPPER%] [DELIM[%DELIMS%] [IN[CMD] [IF[%%%%%CLM_TGT%]==[%CLM_DAT%]
IF DEFINED MARK IF "%ROW%"=="%ROW_TGT%" ECHO FOR /F "TOKENS=1-9 %SKIPPER% DELIMS=<>()%DELIMS%" %%%%1 IN ('%CUR_CMD%') DO (IF "%%%%%CLM_TGT%"=="%CLM_DAT%" ECHO [%CLM_DAT%] FOUND^&PAUSE)>>FOR.CMD
SET "ARGUE="&&SET "ARG_ONE="&&EXIT /B
:DELIMS
CALL SET "C%C%=%V%"&&EXIT /B
:ARGUEX
IF "%DELIMS%"==" " SET "C1= "
IF "%V%"=="%C1%" IF DEFINED X IF DEFINED C1 CALL SET "A%A%=%X%"&&CALL SET /A "A+=1"&&CALL SET "X="
IF "%V%"=="%C2%" IF DEFINED X IF DEFINED C2 CALL SET "A%A%=%X%"&&CALL SET /A "A+=1"&&CALL SET "X="
IF "%V%"=="%C3%" IF DEFINED X IF DEFINED C3 CALL SET "A%A%=%X%"&&CALL SET /A "A+=1"&&CALL SET "X="
IF "%V%"=="%C4%" IF DEFINED X IF DEFINED C4 CALL SET "A%A%=%X%"&&CALL SET /A "A+=1"&&CALL SET "X="
IF "%V%"=="%C5%" IF DEFINED X IF DEFINED C5 CALL SET "A%A%=%X%"&&CALL SET /A "A+=1"&&CALL SET "X="
IF NOT "%V%"=="%C1%" IF NOT "%V%"=="%C2%" IF NOT "%V%"=="%C3%" IF NOT "%V%"=="%C4%" IF NOT "%V%"=="%C5%" CALL SET "X=%X%%V%"
IF DEFINED X SET "A%A%=%X%"
EXIT /B
:ARG_SHIFT
IF NOT DEFINED ARG_ONE EXIT /B
SET "A#="&&FOR %%a in (%ARG_ONE%) DO (CALL SET /A "A#+=1")
SET "SHIFT="&&FOR /F "TOKENS=1-9 DELIMS= " %%a IN ("%ARG_ONE%") DO (
IF "%A#%"=="1" IF "%%a"=="%A1%" SET A1=%A1%&&SET A2=%A2%&&SET A3=%A3%&&SET A4=%A4%&&SET A5=%A5%&&SET A6=%A6%&&SET A7=%A7%&&SET A8=%A8%&&SET A9=%A9%&&SET "SHIFT=0"
IF "%A#%"=="1" IF "%%a"=="%A2%" SET A1=%A2%&&SET A2=%A3%&&SET A3=%A4%&&SET A4=%A5%&&SET A5=%A6%&&SET A6=%A7%&&SET A7=%A8%&&SET A8=%A9%&&SET A9=%A10%&&SET "SHIFT=1"
IF "%A#%"=="1" IF "%%a"=="%A3%" SET A1=%A3%&&SET A2=%A4%&&SET A3=%A5%&&SET A4=%A6%&&SET A5=%A7%&&SET A6=%A8%&&SET A7=%A9%&&SET A8=%A10%&&SET A9=%A11%&&SET "SHIFT=2"
IF "%A#%"=="1" IF "%%a"=="%A4%" SET A1=%A4%&&SET A2=%A5%&&SET A3=%A6%&&SET A4=%A7%&&SET A5=%A8%&&SET A6=%A9%&&SET A7=%A10%&&SET A8=%A11%&&SET A9=%A12%&&SET "SHIFT=3"
IF "%A#%"=="1" IF "%%a"=="%A5%" SET A1=%A5%&&SET A2=%A6%&&SET A3=%A7%&&SET A4=%A8%&&SET A5=%A9%&&SET A6=%A10%&&SET A7=%A11%&&SET A8=%A12%&&SET A9=%A13%&&SET "SHIFT=4"
IF "%A#%"=="1" IF "%%a"=="%A6%" SET A1=%A6%&&SET A2=%A7%&&SET A3=%A8%&&SET A4=%A9%&&SET A5=%A10%&&SET A6=%A11%&&SET A7=%A12%&&SET A8=%A13%&&SET A9=%A14%&&SET "SHIFT=5"
IF "%A#%"=="1" IF "%%a"=="%A7%" SET A1=%A7%&&SET A2=%A8%&&SET A3=%A9%&&SET A4=%A10%&&SET A5=%A11%&&SET A6=%A12%&&SET A7=%A13%&&SET A8=%A14%&&SET A9=%A15%&&SET "SHIFT=6"
IF "%A#%"=="1" IF "%%a"=="%A8%" SET A1=%A8%&&SET A2=%A9%&&SET A3=%A10%&&SET A4=%A11%&&SET A5=%A12%&&SET A6=%A13%&&SET A7=%A14%&&SET A8=%A15%&&SET A9=%A16%&&SET "SHIFT=7"
IF "%A#%"=="1" IF "%%a"=="%A9%" SET A1=%A9%&&SET A2=%A10%&&SET A3=%A11%&&SET A4=%A12%&&SET A5=%A13%&&SET A6=%A14%&&SET A7=%A15%&&SET A8=%A16%&&SET A9=%A17%&&SET "SHIFT=8")
FOR %%1 in (A10 A11 A12 A13 A14 A15 A16 A17) DO (CALL SET %%1=)
EXIT /B
REM COMMAND_MODE_COMMAND_MODE_COMMAND_MODE_COMMAND_MODE_COMMAND_MODE
:COMMAND_MODE
REM FOR %%a in (1 2 3 4 5 6 7 8 9) DO (CALL SET "ARG%%a=%%%%a")
SET "CAME_FROM=COMMAND"&&SET "PROG_SOURCE=%PROG_FOLDER%"&&SET "PROG_TARGET=%PROG_FOLDER%"&&CALL:FOLDER_LOCATE&&SET "EXIT_FLAG="&&CALL:COMMAND_ERROR
IF "%EXIT_FLAG%"=="1" GOTO:CLEAN_EXIT
IF "%ARG1%"=="-HELP" CALL:COMMAND_HELP
IF "%ARG1%"=="-BOOTMAKER" IF DEFINED ARG2 IF "%ARG3%"=="-DISKID" IF DEFINED ARG4 SET "DISK_TARGET=%ARG4%"&&CALL:DISK_QUERY>NUL
IF "%ARG1%"=="-BOOTMAKER" IF DEFINED ARG2 IF "%ARG3%"=="-DISKID" IF DEFINED ARG4 SET "ARG3=-DISK"&&SET "ARG4=%DISK_NUMBER%"
IF "%ARG1%"=="-DISKMGR" IF DEFINED ARG2 IF "%ARG3%"=="-DISKID" IF DEFINED ARG4 SET "DISK_TARGET=%ARG4%"&&CALL:DISK_QUERY>NUL
IF "%ARG1%"=="-DISKMGR" IF DEFINED ARG2 IF "%ARG3%"=="-DISKID" IF DEFINED ARG4 SET "ARG3=-DISK"&&SET "ARG4=%DISK_NUMBER%"
IF "%ARG1%"=="-IMAGEPROC" IF "%ARG2%"=="-WIM" IF DEFINED ARG3 IF EXIST "%IMAGE_FOLDER%\%ARG3%" IF "%ARG4%"=="-INDEX" IF DEFINED ARG5 IF "%ARG6%"=="-VHDX" IF DEFINED ARG7 IF "%ARG8%"=="-SIZE" IF DEFINED ARG9 SET "SOURCE_TYPE=WIM"&&SET "TARGET_TYPE=VHDX"&&SET "WIM_SOURCE=%ARG3%"&&SET "WIM_INDEX=%ARG5%"&&SET "VHDX_TARGET=%ARG7%"&&SET "VHDX_SIZE=%ARG9%"&&CALL:IMAGEPROC
IF "%ARG1%"=="-IMAGEPROC" IF "%ARG2%"=="-WIM" IF DEFINED ARG3 IF EXIST "%IMAGE_FOLDER%\%ARG3%" IF "%ARG4%"=="-INDEX" IF DEFINED ARG5 IF "%ARG6%"=="-WIM" IF DEFINED ARG7 IF "%ARG8%"=="-XLVL" IF DEFINED ARG9 SET "SOURCE_TYPE=WIM"&&SET "TARGET_TYPE=WIM"&&SET "WIM_SOURCE=%ARG3%"&&SET "WIM_INDEX=%ARG5%"&&SET "WIM_TARGET=%ARG7%"&&SET "WIM_XLVL=%ARG9%"&&CALL:IMAGEPROC
IF "%ARG1%"=="-IMAGEPROC" IF "%ARG2%"=="-VHDX" IF DEFINED ARG3 IF EXIST "%IMAGE_FOLDER%\%ARG3%" IF "%ARG4%"=="-INDEX" IF DEFINED ARG5 IF "%ARG6%"=="-WIM" IF DEFINED ARG7 IF "%ARG8%"=="-XLVL" IF DEFINED ARG9 SET "SOURCE_TYPE=VHDX"&&SET "TARGET_TYPE=WIM"&&SET "VHDX_SOURCE=%ARG3%"&&SET "WIM_INDEX=%ARG5%"&&SET "WIM_TARGET=%ARG7%"&&SET "WIM_XLVL=%ARG9%"&&CALL:IMAGEPROC
IF "%ARG1%"=="-IMAGEMGR" IF "%ARG2%"=="-INSTALL" IF "%ARG3%"=="-LIST" FOR /F "TOKENS=1-9 SKIP=1 DELIMS={}" %%1 in (%CACHE_FOLDER%\%ARG4%) DO (CALL SET LIVE_APPLY=1&&CALL SET "IMAGE_PACK=%PACK_FOLDER%\%%2"&&CALL:PACK_INSTALL)
IF "%ARG1%"=="-BOOTMAKER" IF "%ARG2%"=="-CREATE" IF "%ARG3%"=="-DISK" IF DEFINED ARG4 IF "%ARG5%"=="-SRC" IF DEFINED ARG6 IF EXIST "%PROG_SOURCE%\%ARG6%" SET "DISK_NUMBER=%ARG4%"&&CALL:DISK_QUERY>NUL 2>&1
IF "%ARG1%"=="-BOOTMAKER" IF "%ARG2%"=="-CREATE" IF "%ARG3%"=="-DISK" IF DEFINED ARG4 IF "%ARG5%"=="-SRC" IF DEFINED ARG6 IF EXIST "%PROG_SOURCE%\%ARG6%" SET "DISK_NUMBER=%ARG4%"&&FOR %%a in (0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15) DO (IF "%ARG4%"=="%%a" CALL SET "DISK_TARGET=%%DISKID_%%a%%"&&CALL ECHO.%%DISKID_%%a%%>"%TEMP%\DISK_TARGET")
IF "%ARG1%"=="-BOOTMAKER" IF "%ARG2%"=="-CREATE" IF "%ARG3%"=="-DISK" IF DEFINED ARG4 IF "%ARG5%"=="-SRC" IF DEFINED ARG6 IF EXIST "%PROG_SOURCE%\%ARG6%" SET "BOOT_IMAGE=%PROG_SOURCE%\%ARG6%"&&SET "VHDX_$ETUP=%ARG8%"&&CALL:BOOT_MAKER
IF "%ARG1%"=="-DISKMGR" IF "%ARG2%"=="-LIST" CALL:DISK_QUERY
IF "%ARG1%"=="-DISKMGR" IF "%ARG2%"=="-INSPECT" IF "%ARG3%"=="-DISK" IF DEFINED ARG4 SET "DISK_NUMBER=%ARG4%"&&CALL:DISKMGR_INSPECT
IF "%ARG1%"=="-DISKMGR" IF "%ARG2%"=="-GETDISK" IF "%ARG3%"=="-DISK" IF DEFINED ARG4 SET "DISK_NUMBER=%ARG4%"&&CALL:DISK_QUERY>NUL
IF "%ARG1%"=="-DISKMGR" IF "%ARG2%"=="-GETDISK" IF "%ARG3%"=="-DISK" IF DEFINED DISKID_%DISK_NUMBER% CALL ECHO [DISK [%DISK_NUMBER%] [DISK ID[%%DISKID_%DISK_NUMBER%%%]
IF "%ARG1%"=="-DISKMGR" IF "%ARG2%"=="-GETDISK" IF "%ARG3%"=="-DISK" IF NOT DEFINED DISKID_%DISK_NUMBER% CALL ECHO DISK #/ID DOES NOT EXIST
IF "%ARG1%"=="-DISKMGR" IF "%ARG2%"=="-ERASE" IF "%ARG3%"=="-DISK" IF DEFINED ARG4 CALL:DISK_QUERY>NUL
IF "%ARG1%"=="-DISKMGR" IF "%ARG2%"=="-ERASE" IF "%ARG3%"=="-DISK" IF DEFINED ARG4 SET "DISK_NUMBER=%ARG4%"&&FOR %%a in (0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15) DO (IF "%ARG4%"=="%%a" CALL SET "DISK_TARGET=%%DISKID_%%a%%"&&CALL:DISKMGR_ERASE)
IF "%ARG1%"=="-DISKMGR" IF "%ARG2%"=="-CHANGEID" IF "%ARG3%"=="-DISK" IF DEFINED ARG4 SET "DISK_NUMBER=%ARG4%"&&SET "GET_DISK_ID=%ARG5%"&&CALL:DISKMGR_CHANGEID
IF "%ARG1%"=="-DISKMGR" IF "%ARG2%"=="-CREATE" IF "%ARG3%"=="-DISK" IF DEFINED ARG4 SET "DISK_NUMBER=%ARG4%"&&IF "%ARG5%"=="-SIZE"  SET "PART_SIZE=%ARG6%"&&CALL:DISKMGR_CREATE
IF "%ARG1%"=="-DISKMGR" IF "%ARG2%"=="-FORMAT" IF "%ARG3%"=="-DISK" IF DEFINED ARG4 SET "DISK_NUMBER=%ARG4%"&&IF "%ARG5%"=="-PART" SET "PART_NUMBER=%ARG6%"&&CALL:DISKMGR_FORMAT
IF "%ARG1%"=="-DISKMGR" IF "%ARG2%"=="-DELETE" IF "%ARG3%"=="-DISK" IF DEFINED ARG4 SET "DISK_NUMBER=%ARG4%"&&IF "%ARG5%"=="-PART" SET "PART_NUMBER=%ARG6%"&&CALL:DISKMGR_DELETE
IF "%ARG1%"=="-DISKMGR" IF "%ARG2%"=="-LOCK" IF "%ARG3%"=="-DISK" IF DEFINED ARG4 SET "DISK_NUMBER=%ARG4%"&&IF "%ARG5%"=="-PART" SET "PART_NUMBER=%ARG6%"&&CALL:DISKMGR_LOCK
IF "%ARG1%"=="-DISKMGR" IF "%ARG2%"=="-MOUNT" IF "%ARG3%"=="-DISK" IF DEFINED ARG4 SET "DISK_NUMBER=%ARG4%"&&IF "%ARG5%"=="-PART" SET "PART_NUMBER=%ARG6%"&&IF "%ARG7%"=="-LETTER" SET "DISK_LETTER=%ARG8%"&&CALL:DISKMGR_MOUNT
IF "%ARG1%"=="-DISKMGR" IF "%ARG2%"=="-UNMOUNT" IF "%ARG3%"=="-LETTER" IF DEFINED ARG4 SET "DISK_LETTER=%ARG4%"&&CALL:DISKMGR_UNMOUNT
IF EXIST "%PROG_SOURCE%\ScratchPack" RD /S /Q "\\?\%PROG_SOURCE%\ScratchPack">NUL 2>&1
IF EXIST "%PROG_SOURCE%\SCRATCH" RD /S /Q "\\?\%PROG_SOURCE%\SCRATCH">NUL 2>&1
IF EXIST "%TEMP%\DISK_TARGET" DEL /Q /F "%TEMP%\DISK_TARGET">NUL 2>&1
GOTO:CLEAN_EXIT
:COMMAND_ERROR
SET "TEST="&&FOR %%a in (1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20) DO (CALL SET "TEST=%%ARG%%a%%"&&CALL:ARG_VIEW)
ECHO.&&IF DEFINED ARG1 IF NOT "%ARG1%"=="-HELP" IF NOT "%ARG1%"=="-BOOTMAKER" IF NOT "%ARG1%"=="-DISKMGR" IF NOT "%ARG1%"=="-FILEMGR" IF NOT "%ARG1%"=="-IMAGEPROC" IF NOT "%ARG1%"=="-IMAGEMGR" CALL:PAD_LINE&&ECHO                          TYPE $HAZZAM.CMD -HELP&&CALL:PAD_LINE&&SET "EXIT_FLAG=1"
IF "%ARG1%"=="-BOOTMAKER" IF "%ARG2%"=="-CREATE" IF DEFINED ARG6 IF NOT EXIST "%PROG_SOURCE%\%ARG6%" ECHO BOOT-MEDIA %PROG_SOURCE%\%ARG6% is missing&&SET "EXIT_FLAG=1"
IF "%ARG1%"=="-BOOTMAKER" IF "%ARG2%"=="-CREATE" IF DEFINED ARG8 IF NOT EXIST "%IMAGE_FOLDER%\%ARG8%" ECHO VHDX %IMAGE_FOLDER%\%ARG8% is missing&&SET "EXIT_FLAG=1"
IF "%ARG1%"=="-IMAGEPROC" IF "%ARG2%"=="-WIM" IF DEFINED ARG3 IF NOT EXIST "%IMAGE_FOLDER%\%ARG3%" ECHO WIM %IMAGE_FOLDER%\%ARG3% is missing&&SET "EXIT_FLAG=1"
IF "%ARG1%"=="-IMAGEPROC" IF "%ARG2%"=="-VHDX" IF DEFINED ARG3 IF NOT EXIST "%IMAGE_FOLDER%\%ARG3%" ECHO VHDX %IMAGE_FOLDER%\%ARG3% is missing&&SET "EXIT_FLAG=1"
IF "%ARG1%"=="-IMAGEMGR" IF "%ARG2%"=="-INSTALL" IF "%ARG3%"=="-PACK" IF DEFINED ARG4 IF NOT EXIST "%PACK_FOLDER%\%ARG4%" ECHO PACKAGE %PACK_FOLDER%\%ARG4% is missing&&SET "EXIT_FLAG=1"
IF "%ARG1%"=="-IMAGEMGR" IF "%ARG2%"=="-MOUNT" IF "%ARG3%"=="-ISO" IF DEFINED ARG4 IF NOT EXIST "%IMAGE_FOLDER%\%ARG4%" ECHO PACKAGE %IMAGE_FOLDER%\%ARG4% is missing&&SET "EXIT_FLAG=1"
EXIT /B
:COMMAND_HELP
SET "PAD_SIZE=10"&&CALL:PAD_LINE&&ECHO                $HAZZAM COMMAND-LINE PARAMETERS:&&SET "PAD_SIZE=10"&&CALL:PAD_LINE
SET "PAD_SIZE=10"&&CALL:PAD_LINE&&ECHO        NOTE: You can address disks by disk-id or disk #.&&SET "PAD_SIZE=10"&&CALL:PAD_LINE
ECHO    -help                                                    (This Menu)
ECHO    -arg                                                     (1st arg=arguement test. Last arg=exec+test)
ECHO    -imagemgr -install -list {name.LST}                      (Install Package-List)
SET "PAD_SIZE=10"&&CALL:PAD_LINE
ECHO     The specified boot-media and vhdx must be in their respective folders or the operation will fail.
ECHO    -bootmaker -create -disk {#} / -diskid {id} -src {boot.wim}   (Erase + Create Boot-Media on Specified Disk)
ECHO  Examples:
ECHO    -bootmaker -create -disk 0 -src boot.wim -vhdx z.vhdx
ECHO    -bootmaker -create -diskid 12345678-1234-1234-1234-123456781234 -src BootMedia.sav -vhdx z.vhdx
SET "PAD_SIZE=10"&&CALL:PAD_LINE
ECHO    -diskmgr -list                                           (Condensed list of disks)
ECHO    -diskmgr -getdisk -disk {#} /or/ -diskid {id}            (Query disk # / disk id)
ECHO    -diskmgr -inspect -disk {#} /or/ -diskid {id}            (DiskPart inquiry on specified disk)
ECHO    -diskmgr -erase -disk {#} /or/ -diskid {id}              (Delete All partitions on specified disk)
ECHO    -diskmgr -changeid -disk {#} /or/ -diskid {id} {new id}  (Change disk id of specified disk)
ECHO    -diskmgr -create -disk {#} /or/ -diskid {id} -size {MB}  (Create NTFS partition on specified disk)
ECHO    -diskmgr -format -disk {#} /or/ -diskid {id} -part {#}   (Format partition w/NTFS on specified disk)
ECHO    -diskmgr -delete -disk {#} /or/ -diskid {id} -part {#}   (Delete partition on specified disk)
ECHO    -diskmgr -lock -disk {#} /or/ -diskid {id} -part {#}     (Mark partition GUID as "Do Not Mount")
ECHO    -diskmgr -unmount -letter {ltr}                          (Remove drive letter)
ECHO    -diskmgr -mount -disk {#} /or/ -diskid {id} -part {#} -letter {ltr} (Assign drive letter + unlock)
ECHO  Examples:
ECHO    -diskmgr -create -disk 0 -size 25600
ECHO    -diskmgr -mount -disk 0 -part 1 -letter e
ECHO    -diskmgr -mount -diskid 12345678-1234-1234-1234-123456781234 -part 1 -letter e
SET "PAD_SIZE=10"&&CALL:PAD_LINE
ECHO     Source images must be placed in their respective folders or the operation will fail.
ECHO    -imageproc -wim {x.wim} -index {index#} -vhdx {z.vhdx} -size {MB}
ECHO    -imageproc -wim  {x.wim} -index {index#} -wim {x.wim} -xlvl {fast/max}
ECHO    -imageproc -vhdx {z.vhdx} -index {index#} -wim {x.wim} -xlvl {fast/max}
ECHO  Examples:
ECHO    -imageproc -wim x.wim -index 1 -vhdx z.vhdx -size 25600
ECHO    -imageproc -wim x.wim -index 1 -wim x.wim -xlvl fast
ECHO    -imageproc -vhdx z.vhdx -index 1 -wim x.wim -xlvl fast
SET "PAD_SIZE=10"&&CALL:PAD_LINE&&ECHO                                            end of cmd help&&SET "PAD_SIZE=10"&&CALL:PAD_LINE
EXIT /B
:TITLECARD
SET "RND_SET=TITLE"&&CALL:RANDOM
IF "%TITLE%"=="1" TITLE  $haZZam^^! A native Windows image deployment tool.
IF "%TITLE%"=="2" TITLE  Export/import all current drivers, combine into a driver-pack.
IF "%TITLE%"=="3" TITLE  Boot-media can be imported in Image Management.
IF "%TITLE%"=="4" TITLE  Build, administrate and backup your Windows in a native WinPE recovery environment.
IF "%TITLE%"=="5" TITLE  In Slot-Mode VHDX's named between 0.VHDX and 9.VHDX are detected at boot.
IF "%TITLE%"=="6" TITLE  Export/import all current drivers, combine into a driver-pack.
IF "%TITLE%"=="7" TITLE  Build, administrate and backup your Windows in a native WinPE recovery environment.
IF "%TITLE%"=="8" TITLE  Boot-media can be imported in Image Management.
IF "%TITLE%"=="9" TITLE  DISM can thrash disks pretty hard, some USB drives can freeze up.
IF "%TITLE%"=="0" TITLE  Boot-media can be imported in Image Management.
IF "%TITLE%"=="" GOTO:TITLECARD
EXIT /B
:PROG_MAIN_HELP
CLS&&COLOR 0B&&CALL:PAD_LINE&&ECHO                           ~ Main Menu Help ~&&CALL:PAD_LINE
ECHO   {1}Image Management     [Perform image related tasks]            
ECHO   {2}Image Processor      [Convert/isolate WIM/VHDX images]        
ECHO   {3}Package Creator      [Create driver/scripted $PK packages]    
ECHO   {4}File Management      [Simple file manager, file-picker]       
ECHO   {5}Disk Management      [Basic disk partitioning]                
ECHO    *{B}oot^^!               [Create bootable-deployment environment]
ECHO   {6}Tasks                [Admin tasks, instant-packs, etc]        
ECHO   {.}Settings             [Settings-backup, misc]                  
ECHO      *Appears once boot-media is imported via Image Management&&CALL:PAD_LINE&&CALL:PAUSED
EXIT /B
:DISCLAIMER
CLS&&COLOR 0C&&CALL:PAD_LINE&&ECHO 
ECHO      ----------------------- DISCLAIMER -------------------------
ECHO         THIS PROGRAM CAN BE DANGEROUS FOR INEXPERIENCED USERS
ECHO             DO NOT PROCEED UNLESS YOUR DATA IS BACKED UP.
ECHO         DO NOT PROCEED UNLESS YOU HAVE AN ALTERNATIVE METHOD
ECHO        TO RESTORE YOUR DATA IN THE EVENT SOMETHING GOES WRONG.
ECHO           By using this tool, you accept full liability for 
ECHO       any loss that occurs resulting from or relating to the use
ECHO      of this tool. So no guarantees, anything can happen, anytime.
ECHO.&&CALL:PAD_LINE&&ECHO                             Kapeesh? (Y/N)
CALL:PAD_LINE&&CALL:MENU_SELECT&&CALL:PAD_LINE
IF "%SELECT%"=="Y" SET "DISCLAIMER=ACCEPTED"
ECHO      The [ @ ]\Current-Environment] option ^& disk management area
ECHO          are the "caution zones" and can be avoided if unsure. 
CALL:COLOR_CHK&&CALL:PAD_LINE&&CALL:PAUSED
EXIT /B
:PROMPT_SET_UPPER
SET "PROMPT_VAR="&&SET /P "PROMPT_VAR=$>>"&&FOR %%G in (A B C D E F G H I J K L M N O P Q R S T U V W X Y Z) DO (CALL SET "PROMPT_VAR=%%PROMPT_VAR:%%G=%%G%%")
CALL SET "%PROMPT_SET%=%PROMPT_VAR%"&&SET "PROMPT_SET="&&SET "PROMPT_VAR="
EXIT /B
:PROMPT_SET_LOWER
SET "PROMPT_VAR="&&SET /P "PROMPT_VAR=$>>"&&FOR %%G in (a b c d e f g h i j k l m n o p q r s t u v w x y z) DO (CALL SET "PROMPT_VAR=%%PROMPT_VAR:%%G=%%G%%")
CALL SET "%PROMPT_SET%=%PROMPT_VAR%"&&SET "PROMPT_SET="&&SET "PROMPT_VAR="
EXIT /B
:PROMPT_SET_ANY
SET "PROMPT_VAR="&&SET /P "PROMPT_VAR=$>>"
CALL SET "%PROMPT_SET%=%PROMPT_VAR%"&&SET "PROMPT_SET="&&SET "PROMPT_VAR="
EXIT /B
:PROMPT_SET
SET "PROMPT_VAR="&&SET /P "PROMPT_VAR=$>>"&&FOR %%G in (A B C D E F G H I J K L M N O P Q R S T U V W X Y Z) DO (CALL SET "PROMPT_VAR=%%PROMPT_VAR:%%G=%%G%%")
CALL SET "%PROMPT_SET%=%PROMPT_VAR%"&&SET "PROMPT_SET="&&SET "PROMPT_VAR="
EXIT /B
:MENU_SELECT
SET "SELECT="&&SET /P "SELECT=$>>"&&FOR %%G in (A B C D E F G H I J K L M N O P Q R S T U V W X Y Z) DO (CALL SET "SELECT=%%SELECT:%%G=%%G%%")
CALL SET "$ELECTMP=%%$ITEM%SELECT%%%"&&IF DEFINED SELECT CALL SET "$ELECT=%SELECT%"
IF DEFINED SELECT IF DEFINED $ELECTMP CALL SET "$ELECT$=%$ELECTMP%"
EXIT /B
:MENU_SELECT_ANY
SET "SELECT="&&SET /P "SELECT=$>>"
EXIT /B
:VAR_SET
IF NOT DEFINED VAR_SET SET "VAR_SET=NULL"
FOR %%1 in (%VAR_SET%) DO (SET "%%1=")
SET "VAR_SET="
EXIT /B
:CHAR_CHK
FOR %%a in (CHAR_STR CHAR_CHK) DO (IF NOT DEFINED %%a EXIT /B)
SET "CHAR_FLG="&&FOR /F "DELIMS=" %%$ in ('CMD.EXE /D /U /C ECHO %CHAR_STR%^| FIND /V ""') do (IF "%%$"=="%CHAR_CHK%" SET "CHAR_FLG=1")
EXIT /B
:PAD_PREV
ECHO                Press (Enter) to return to previous menu
EXIT /B
:PAUSED
SET /P PAUSED=.                      Press (Enter) to continue...
EXIT /B
:TITLE_GNC
TITLE $haZZam^^! A native Windows image deployment tool. v%$VER_CUR%
EXIT /B
:RANDOM
SET RND1=%RANDOM%%RANDOM%&&SET "RND1=!RND1:~5,5!"&&SET "RND1=!RND1:~1,1!"
CALL SET "%RND_SET%=%RND1%"&&SET "RND_SET="&&SET "RND1="
EXIT /B
:MENU_GNC
CALL:PAD_LINE&&ECHO                                $haZZam^^!&&CALL:PAD_LINE
EXIT /B
:CLEAN
IF EXIST "$HZ*" DEL /F "$HZ*">NUL
IF EXIST "$REG*" DEL /F "$REG*">NUL
IF EXIST "$TMP*" DEL /F "$TMP*">NUL
IF EXIST "$LST*" DEL /F "$LST*">NUL
IF EXIST "$DSK*" DEL /F "$DSK*">NUL
IF EXIST "$DRVR*" DEL /F "$DRVR*">NUL
IF EXIST "$DISM*" DEL /F "$DISM*">NUL
SET "PRJ_TMP=%PROG_SOURCE%\PROJECT_TMP"
IF EXIST "%PRJ_TMP%" DEL /F "%PRJ_TMP%">NUL
EXIT /B
:COLOR_CHK
IF "%COLOR_SLOT%"=="8" COLOR 0B&&EXIT /B
IF "%COLOR_SLOT%"=="9" COLOR 0E&&EXIT /B
IF DEFINED COLOR_SLOT COLOR %COLOR_SLOT%&&EXIT /B
SET "RND_SET=CLRTMP"&&CALL:RANDOM
IF "%CLRTMP%"=="8" COLOR 0B&&EXIT /B
IF "%CLRTMP%"=="9" COLOR 0E&&EXIT /B
IF "%CLRTMP%"=="0" GOTO:COLOR_CHK
IF "%CLRTMP%"=="00" GOTO:COLOR_CHK
IF "%CLRTMP%"==" " GOTO:COLOR_CHK
IF "%CLRTMP%"=="" GOTO:COLOR_CHK
COLOR %CLRTMP%
:COLOR_EXIT
EXIT /B
:CHECK
SET "ERROR="
IF "%SELECT%"=="" SET "ERROR=1"
IF "%SELECT%"==" " SET "ERROR=1"
IF "%SELECT%"=="  " SET "ERROR=1"
IF "%CHECK%"=="NUM" IF "%SELECT%" LSS "0" SET "ERROR=1"
IF "%CHECK%"=="NUM" IF "%SELECT%" GTR "9999999" SET "ERROR=1"
SET "CHECK="
EXIT /B
:SETS_CREATE
(ECHO.$haZZam Configuration File&&ECHO.PAD_TYPE=&&ECHO.COLOR_SLOT=&&ECHO.ACTIVE_BAY=&&ECHO.BOOT_BAYS=&&ECHO.VHDX_$ETUP=&&ECHO.SOURCE_TYPE=&&ECHO.WIM_SOURCE=&&ECHO.VHDX_SOURCE=&&ECHO.TARGET_TYPE=&&ECHO.WIM_TARGET=&&ECHO.VHDX_TARGET=&&ECHO.WIM_XLVL=&&ECHO.VHDX_XLVL=&&ECHO.VHDX_SIZE=&&ECHO.WIM_INDEX=&&ECHO.PACK_XLVL=&&ECHO.APPLY_COPY=&&ECHO.AUTOPILOT=&&ECHO.BRUTE_FORCE=&&ECHO.SAFE_EXCLUDE=&&ECHO.SVC_SKIP=&&ECHO.COMP_SKIP=&&ECHO.SHORTCUTS=&&ECHO.HOTKEY_1=CMD&&ECHO.SHORT_1=START CMD.EXE&&ECHO.HOTKEY_2=NOTE&&ECHO.SHORT_2=START NOTEPAD.EXE&&ECHO.HOTKEY_3=REG&&ECHO.SHORT_3=START REGEDIT.EXE&&ECHO.HOTKEY_4=&&ECHO.SHORT_4=&&ECHO.HOTKEY_5=&&ECHO.SHORT_5=&&ECHO.DISCLAIMER=&&ECHO.$VER_SET=%$VER_CUR%&&ECHO.$ETTINGS=LOADED)>"%PROG_SOURCE%\$ETTINGS.PRO"&&CALL:SETS_LOAD>NUL 2>&1
EXIT /B
:SETS_LOAD
FOR /F "eol=- TOKENS=1-2 DELIMS==" %%a in (%PROG_SOURCE%\$ETTINGS.PRO) DO (IF NOT "%%a"=="   " SET "%%a=%%b")
EXIT /B
:SETS_HANDLER
IF NOT EXIST "%PROG_SOURCE%" SET "PROG_SOURCE=%PROG_FOLDER%"
IF NOT EXIST "%PROG_TARGET%" SET "PROG_TARGET=%PROG_FOLDER%"
IF EXIST "%PROG_SOURCE%\$ETTINGS.PRO" IF DEFINED $VER_SET IF "%$VER_SET%" LSS "%$VER_CUR%" DEL /Q /F "%PROG_SOURCE%\$ETTINGS.PRO"
IF NOT EXIST "%PROG_SOURCE%\$ETTINGS.PRO" IF EXIST "%PROG_SOURCE%\$haZZam.CMD" CALL:SETS_CREATE
MOVE /Y "%PROG_SOURCE%\$ETTINGS.PRO" "0001">NUL&&IF NOT "%$ETTINGS%"=="LOADED" FOR /F "eol=- TOKENS=1-2 DELIMS==" %%a in (0001) DO (IF NOT "%%a"=="   " SET "%%a=%%b")
FOR /F "eol=- TOKENS=1-2 DELIMS==" %%a in (0001) DO (CALL ECHO %%a=%%%%a%%>>"%PROG_SOURCE%\$ETTINGS.PRO")
IF EXIST "0001" DEL /Q /F "0001">NUL 2>&1
FOR %%a in (PACK_XLVL WIM_XLVL) DO (IF NOT DEFINED %%a SET "%%a=FAST")
FOR %%a in (ACTIVE_BAY BOOT_BAYS MAKER_SLOT SHORT_SLOT WIM_XXX PAK_XXX IMAGEPROC_SLOT) DO (IF NOT DEFINED %%a SET "%%a=1")
FOR %%a in (SAFE_EXCLUDE) DO (IF NOT DEFINED %%a SET "%%a=ENABLED")
FOR %%a in (AUTOPILOT BRUTE_FORCE SHORTCUTS VHDX_XLVL FMGR_DUAL) DO (IF NOT DEFINED %%a SET "%%a=DISABLED")
IF NOT DEFINED SVC_SKIP SET "SVC_SKIP=EDGEUPDATE EDGEUPDATEM WDNISSVC WINDEFEND WMPNETWORKSVC"
IF NOT DEFINED SOURCE_TYPE SET "SOURCE_TYPE=WIM"&&SET "TARGET_TYPE=VHDX"
IF NOT DEFINED BOOT_PRIORITY SET "BOOT_PRIORITY=NULL"
IF NOT DEFINED BCD_SYSTEM SET "BCD_SYSTEM=NAME"
IF NOT DEFINED VHDX_SIZE SET "VHDX_SIZE=25600"
IF NOT DEFINED APPLY_COPY SET "APPLY_COPY=ORIG"
:FOLDER_LOCATE
SET "MAKER_FOLDER=%PROG_SOURCE%\Project%MAKER_SLOT%"
IF "%FOLDER_MODE%"=="ISOLATED" IF NOT EXIST "%PROG_SOURCE%\PACK" MD "%PROG_SOURCE%\PACK">NUL 2>&1
IF "%FOLDER_MODE%"=="ISOLATED" IF NOT EXIST "%PROG_SOURCE%\IMAGE" MD "%PROG_SOURCE%\IMAGE">NUL 2>&1
IF "%FOLDER_MODE%"=="ISOLATED" IF NOT EXIST "%PROG_SOURCE%\CACHE" MD "%PROG_SOURCE%\CACHE">NUL 2>&1
IF "%FOLDER_MODE%"=="UNIFIED" SET "PACK_FOLDER=%PROG_SOURCE%"&&SET "IMAGE_FOLDER=%PROG_SOURCE%"&&SET "CACHE_FOLDER=%PROG_SOURCE%"
SET "FOLDER_MODE=UNIFIED"&&IF EXIST "%PROG_SOURCE%\IMAGE" IF EXIST "%PROG_SOURCE%\PACK" IF EXIST "%PROG_SOURCE%\CACHE" SET "FOLDER_MODE=ISOLATED"
IF "%FOLDER_MODE%"=="UNIFIED" SET "PACK_FOLDER=%PROG_SOURCE%"&&SET "IMAGE_FOLDER=%PROG_SOURCE%"&&SET "CACHE_FOLDER=%PROG_SOURCE%"
IF "%FOLDER_MODE%"=="ISOLATED" SET "PACK_FOLDER=%PROG_SOURCE%\PACK"&&SET "IMAGE_FOLDER=%PROG_SOURCE%\IMAGE"&&SET "CACHE_FOLDER=%PROG_SOURCE%\CACHE"
IF "%PROG_MODE%"=="COMMAND" EXIT /B
FOR %%a in (VHDX_$ETUP VHDX_SOURCE WIM_SOURCE) DO (SET "OBJ_FLD=%IMAGE_FOLDER%"&&CALL SET "OBJ_CHK=%%a"&&CALL:OBJ_CLEAR)
FOR %%a in (VHDX_$ETUP VHDX_SOURCE WIM_SOURCE WIM_TARGET VHDX_TARGET) DO (IF NOT DEFINED %%a SET "%%a=SELECT")
IF "%WIM_SOURCE%"=="SELECT" SET "WIM_DESC=NULL"&&SET "WIM_INDEX=1"
SET "SOURCE_LOCATION="&&FOR %%a in (A B C D E F G H I J K L N O P Q R S T U W Y Z) DO (IF EXIST "%%a:\sources" SET "SOURCE_LOCATION=%%a:\sources")
IF NOT "%PROG_MODE%"=="RAMDISK" IF NOT EXIST "%PROG_SOURCE%\BootMedia.sav" SET "BOOT_IMAGE=NONE"
IF NOT "%PROG_MODE%"=="RAMDISK" IF EXIST "%PROG_SOURCE%\BootMedia.sav" SET "BOOT_IMAGE=%PROG_SOURCE%\BootMedia.sav"
IF EXIST "%TEMP%\$WIM.TMP" DEL /Q /F "\\?\%TEMP%\$WIM.TMP">NUL 2>&1
IF "%PROG_MODE%"=="RAMDISK" SET "BOOT_IMAGE=U:\$.WIM"
EXIT /B
:OBJ_CLEAR
CALL SET ABC_CHK=%%%OBJ_CHK%%%
IF NOT EXIST "%OBJ_FLD%\%ABC_CHK%" CALL SET %OBJ_CHK%=SELECT
EXIT /B
:FOLDER_MODE
CALL:PAD_LINE
ECHO.       The folder structure will be regenerated. If a file is 
ECHO.     open/mounted and cannot be moved it's possible to lose data.&&CALL:PAD_LINE
ECHO.                         Press {X} to proceed&&CALL:PAD_LINE&&CALL:PAD_PREV&&CALL:MENU_SELECT
IF NOT "%SELECT%"=="X" EXIT /B
IF "%FOLDER_MODE%"=="UNIFIED" SET "FOLDER_MODE=ISOLATED"&&GOTO:FOLDER_ISOLATED
IF "%FOLDER_MODE%"=="ISOLATED" SET "FOLDER_MODE=UNIFIED"&&GOTO:FOLDER_UNIFIED
:FOLDER_UNIFIED
IF EXIST "%PROG_SOURCE%\IMAGE" MOVE /Y "%PROG_SOURCE%\IMAGE\*.*" "%PROG_SOURCE%">NUL 2>&1
IF EXIST "%PROG_SOURCE%\PACK" MOVE /Y "%PROG_SOURCE%\PACK\*.*" "%PROG_SOURCE%">NUL 2>&1
IF EXIST "%PROG_SOURCE%\CACHE" MOVE /Y "%PROG_SOURCE%\CACHE\*.*" "%PROG_SOURCE%">NUL 2>&1
IF EXIST "%PROG_SOURCE%\IMAGE" XCOPY /S /C /Y "%PROG_SOURCE%\IMAGE" "%PROG_SOURCE%">NUL 2>&1
IF EXIST "%PROG_SOURCE%\PACK" XCOPY /S /C /Y "%PROG_SOURCE%\PACK" "%PROG_SOURCE%">NUL 2>&1
IF EXIST "%PROG_SOURCE%\CACHE" XCOPY /S /C /Y "%PROG_SOURCE%\CACHE" "%PROG_SOURCE%">NUL 2>&1
IF EXIST "%PROG_SOURCE%\IMAGE" RD /Q /S "\\?\%PROG_SOURCE%\IMAGE">NUL 2>&1
IF EXIST "%PROG_SOURCE%\PACK" RD /Q /S "\\?\%PROG_SOURCE%\PACK">NUL 2>&1
IF EXIST "%PROG_SOURCE%\CACHE" RD /Q /S "\\?\%PROG_SOURCE%\CACHE">NUL 2>&1
EXIT /B
:FOLDER_ISOLATED
IF NOT EXIST "%PROG_SOURCE%\IMAGE" MD "%PROG_SOURCE%\IMAGE">NUL 2>&1
IF NOT EXIST "%PROG_SOURCE%\PACK" MD "%PROG_SOURCE%\PACK">NUL 2>&1
IF NOT EXIST "%PROG_SOURCE%\CACHE" MD "%PROG_SOURCE%\CACHE">NUL 2>&1
IF EXIST "%PROG_SOURCE%\*.$PK" MOVE /Y "%PROG_SOURCE%\*.$PK" "%PROG_SOURCE%\PACK">NUL 2>&1
IF EXIST "%PROG_SOURCE%\*.CAB" MOVE /Y "%PROG_SOURCE%\*.CAB" "%PROG_SOURCE%\PACK">NUL 2>&1
IF EXIST "%PROG_SOURCE%\*.MSU" MOVE /Y "%PROG_SOURCE%\*.MSU" "%PROG_SOURCE%\PACK">NUL 2>&1
IF EXIST "%PROG_SOURCE%\*.ISO" MOVE /Y "%PROG_SOURCE%\*.ISO" "%PROG_SOURCE%\IMAGE">NUL 2>&1
IF EXIST "%PROG_SOURCE%\*.VHDX" MOVE /Y "%PROG_SOURCE%\*.VHDX" "%PROG_SOURCE%\IMAGE">NUL 2>&1
IF EXIST "%PROG_SOURCE%\*.WIM" MOVE /Y "%PROG_SOURCE%\*.WIM" "%PROG_SOURCE%\IMAGE">NUL 2>&1
IF EXIST "%PROG_SOURCE%\*.LST" MOVE /Y "%PROG_SOURCE%\*.LST" "%PROG_SOURCE%\CACHE">NUL 2>&1
IF EXIST "%PROG_SOURCE%\*.MST" MOVE /Y "%PROG_SOURCE%\*.MST" "%PROG_SOURCE%\CACHE">NUL 2>&1
IF EXIST "%PROG_SOURCE%\*.$BK" MOVE /Y "%PROG_SOURCE%\*.$BK" "%PROG_SOURCE%\CACHE">NUL 2>&1
EXIT /B
:FILE_PICK
IF NOT DEFINED PICK GOTO:PICK_ERROR
CLS&&CALL:PAD_LINE&&ECHO                              File Picker&&CALL:PAD_LINE&&ECHO   AVAILABLE %PICK%'S:&&IF "%PICK%"=="LST" SET "NOECHO1=1"&&ECHO.&&ECHO  [ 0 ]\[Create New List]
SET "NLIST=%PICK%"&&CALL:FILE_LIST&&CALL:PAD_LINE&&ECHO                              Select a {#}&&CALL:PAD_LINE&&CALL:PAD_PREV
FOR %%a in (ERROR SELECT LIST_NAME $MAKE $PICK $ELECT $ELECT$) DO (SET "%%a=")
SET /P "SELECT=$>>"&&FOR %%G in (A B C D E F G H I J K L M N O P Q R S T U V W X Y Z) DO (CALL SET "SELECT=%%SELECT:%%G=%%G%%")
IF "%SELECT%"=="@" IF "%PICK%"=="VHDX" SET "LIVE_APPLY=1"&&GOTO:PICK_ERROR
IF "%SELECT%"=="0" IF NOT "%PICK%"=="LST" SET "ERROR=1"
IF "%SELECT%" GTR "9999999" SET "ERROR=1"
IF "%SELECT%" LSS "0" SET "ERROR=1"
IF DEFINED ERROR GOTO:PICK_ERROR
IF "%SELECT%"=="0" IF "%PICK%"=="LST" SET "$MAKE=1"
CALL SET "$ELECT=%SELECT%"&&CALL SET "$ELECT$=%%$ITEM%SELECT%%%"
IF NOT "%SELECT%"=="0" IF NOT DEFINED $ELECT$ SET "ERROR=1"&&GOTO:PICK_ERROR
SET "$FOLD="&&FOR %%a in (ISO VHDX WIM) DO (IF "%PICK%"=="%%a" SET "$FOLD=%IMAGE_FOLDER%")
FOR %%a in ($PK CAB MSU) DO (IF "%PICK%"=="%%a" SET "$FOLD=%PACK_FOLDER%")
FOR %%a in ($BK LST MST) DO (IF "%PICK%"=="%%a" SET "$FOLD=%CACHE_FOLDER%")
IF "%PICK%"=="BOOT" SET "$FOLD=%PROG_SOURCE%"
IF "%PICK%"=="FMGS" SET "$FOLD=%FMGR_SOURCE%"
IF NOT DEFINED $FOLD SET "ERROR=1"&&GOTO:PICK_ERROR
IF NOT EXIST "%$FOLD%\%$ELECT$%" SET "ERROR=1"&&GOTO:PICK_ERROR
IF DEFINED $MAKE CALL:PAD_LINE&&ECHO                           Name of the List?&&CALL:PAD_LINE
IF DEFINED $MAKE SET /P "LIST_NAME=$>>"&&FOR %%G in (A B C D E F G H I J K L M N O P Q R S T U V W X Y Z) DO (CALL SET "LIST_NAME=%%LIST_NAME:%%G=%%G%%")
IF DEFINED $MAKE IF NOT DEFINED LIST_NAME SET "ERROR=1"&&GOTO:PICK_ERROR
IF DEFINED $MAKE SET "$ELECT$=%LIST_NAME%.LST"&&ECHO EXEC-LIST>"%$FOLD%\%LIST_NAME%.LST"
IF EXIST "%$FOLD%\%$ELECT$%" SET "$PICK=%$FOLD%\%$ELECT$%"
SET "$HEAD="&&FOR %%a in (LST MST) DO (IF "%PICK%"=="%%a" SET /P $HEAD=<"%$PICK%")
IF "%PICK%"=="LST" IF NOT "%$HEAD%"=="EXEC-LIST" SET "ERROR=1"
IF "%PICK%"=="MST" IF NOT "%$HEAD%"=="BASE-LIST" SET "ERROR=1"
IF DEFINED ERROR CALL:PAD_LINE&&ECHO                       Bad file-header, check file&&CALL:PAD_LINE&&CALL:PAUSED
:PICK_ERROR
SET "PICK="&&IF DEFINED ERROR SET "$PICK="
EXIT /B
:FILE_LIST
FOR %%a in (1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30) DO (IF DEFINED $ITEM%%a SET "$ITEM%%a=")
IF NOT DEFINED BLIST IF NOT DEFINED NLIST GOTO:FILE_ERROR
IF DEFINED BLIST SET "$MENU=BAS"&&SET "EXT=%BLIST%"
IF DEFINED NLIST SET "$MENU=NUM"&&SET "EXT=%NLIST%"
SET "$FOLD="&&FOR %%a in (ISO VHDX WIM) DO (IF "%EXT%"=="%%a" SET "$FOLD=%IMAGE_FOLDER%\*.%EXT%")
FOR %%a in ($PK CAB MSU) DO (IF "%EXT%"=="%%a" SET "$FOLD=%PACK_FOLDER%\*.%EXT%")
FOR %%a in ($BK LST MST) DO (IF "%EXT%"=="%%a" SET "$FOLD=%CACHE_FOLDER%\*.%EXT%")
IF "%EXT%"=="BOOT" SET "$FOLD=%PROG_SOURCE%\*.VHDX"
IF "%EXT%"=="FMGS" SET "$FOLD=%FMGR_SOURCE%\*.*"
IF "%EXT%"=="FMGT" SET "$FOLD=%FMGR_TARGET%\*.*"
IF "%EXT%"=="MAK" SET "$FOLD=%MAKER_FOLDER%\*.*"
IF "%EXT%"=="SRC" SET "$FOLD=%PROG_SOURCE%\*.*"
IF NOT DEFINED $FOLD GOTO:FILE_ERROR
IF NOT DEFINED NOECHO1 IF NOT DEFINED MENU_INSERTA ECHO.
IF DEFINED MENU_INSERTA ECHO.&&ECHO.%MENU_INSERTA%
IF NOT EXIST "%$FOLD%" ECHO  [CRICKETS..]
IF EXIST "%$FOLD%" SET "$CNT="&&DIR "%$FOLD%" /A: /B /O:GN>$HZ&&FOR /F "TOKENS=*" %%a in ($HZ) DO (IF NOT "%%a"=="$HZ" CALL SET /A "$CNT+=1"&&CALL SET "$CLM$=%%a"&&CALL:FILE_LISTX)
IF NOT DEFINED NOECHO2 ECHO.
IF EXIST "$HZ" DEL /F "$HZ">NUL 2>&1
:FILE_ERROR
FOR %%a in (EXT BLIST NLIST NOECHO1 NOECHO2 MENU_INSERTA $MENU $FOLD) DO (SET "%%a=")
EXIT /B
:FILE_LISTX
CALL SET "$ITEM%$CNT%=%$CLM$%"
IF "%$MENU%"=="NUM" ECHO  [ %$CNT% ]\[%$CLM$%]
IF "%$MENU%"=="BAS" ECHO  [SRC]\[%$CLM$%]
EXIT /B
:LIST_FILE
SET "ERROR="&&FOR %%a in (1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30) DO (IF DEFINED $ITEM%%a SET "$ITEM%%a=")
IF NOT DEFINED BLIST IF NOT DEFINED NLIST GOTO:LIST_ERROR
IF NOT EXIST "%$LIST%" GOTO:LIST_ERROR
IF DEFINED BLIST SET "$MENU=BAS"&&SET "EXT=%BLIST%"
IF DEFINED NLIST SET "$MENU=NUM"&&SET "EXT=%NLIST%"
SET "$HEAD="&&FOR %%a in (LST MST) DO (IF "%EXT%"=="%%a" SET /P $HEAD=<"%$LIST%")
IF "%EXT%"=="LST" IF NOT "%$HEAD%"=="EXEC-LIST" SET "ERROR=1"
IF "%EXT%"=="MST" IF NOT "%$HEAD%"=="BASE-LIST" SET "ERROR=1"
IF DEFINED ERROR CALL:PAD_LINE&&ECHO                       Bad file-header, check file&&CALL:PAD_LINE&&CALL:PAUSED&&GOTO:LIST_ERROR
COPY /Y "%$LIST%" "$HZ">NUL
IF NOT DEFINED NOECHO1 ECHO.
IF "%EXT%"=="MST" SET "$CNT="&&FOR /F "TOKENS=1-9 SKIP=1 DELIMS={}" %%1 in ($HZ) DO (IF NOT "%%1"=="" CALL SET "$CLM1=%%1"&&CALL SET "$CLM2=%%2"&&CALL SET "$CLM3=%%3"&&CALL:LIST_FILEX)
IF NOT DEFINED NOECHO2 ECHO.
IF EXIST "$HZ" DEL /F "$HZ">NUL 2>&1
:LIST_ERROR
FOR %%a in (EXT BLIST NLIST ONLY1 ONLY3 $MENU $LIST $HEAD) DO (SET "%%a=")
EXIT /B
:LIST_FILEX
IF DEFINED ONLY1 IF NOT "%$CLM1%"=="%ONLY1%" EXIT /B
IF DEFINED ONLY3 IF NOT "%$CLM3%"=="%ONLY3%" EXIT /B
CALL SET /A "$CNT+=1"
CALL SET "$ITEM%$CNT%={%$CLM1%}{%$CLM2%}{%$CLM3%}"
IF "%$MENU%"=="NUM" ECHO  [ %$CNT% ]\{%$CLM1%}{%$CLM2%}
IF "%$MENU%"=="BAS" ECHO  {%$CLM1%}{%$CLM2%}
EXIT /B
REM $ETTINGS_$ETTINGS_$ETTINGS_$ETTINGS_$ETTINGS_$ETTINGS_$ETTINGS_$ETTINGS
:$ETTINGS_START
REM $ETTINGS_$ETTINGS_$ETTINGS_$ETTINGS_$ETTINGS_$ETTINGS_$ETTINGS_$ETTINGS 
CLS&&CALL:SETS_HANDLER&&CALL:COLOR_CHK&&CALL:PAD_LINE
ECHO                         Settings Configuration&&CALL:PAD_LINE&&ECHO.
ECHO  {P}adding Style   [%PAD_TYPE%]
IF NOT DEFINED COLOR_SLOT ECHO  {T}ext Color      [SHUFFLE]
IF DEFINED COLOR_SLOT ECHO  {T}ext Color      [%COLOR_SLOT%]
ECHO  {S}afe Exclude    [%SAFE_EXCLUDE%]&&ECHO  {F}older Layout   [%FOLDER_MODE%]&&ECHO  {B}rute TSK/SVC   [%BRUTE_FORCE%]
IF "%SHORTCUTS%"=="DISABLED" ECHO  {M}enu Shortcuts  [%SHORTCUTS%]&&ECHO.&&CALL:PAD_LINE
IF "%SHORTCUTS%"=="ENABLED" ECHO.&&CALL:PAD_LINE&&CALL ECHO  {M}enu Shortcuts[%SHORTCUTS%] {X}Slot[%SHORT_SLOT%] {A}ssign [%%SHORT_%SHORT_SLOT%%%] {H}otKey [%%HOTKEY_%SHORT_SLOT%%%]&&CALL:PAD_LINE
ECHO  [Settings]  {C}reate {R}estore  {#}Clear Settings {@}Clear Shortcuts&&CALL:PAD_LINE
ECHO  [AutoPilot-%AUTOPILOT%]   {E}nable   {D}isable   {V}iew AutoPilot.cmd&&CALL:PAD_LINE
CALL:PAD_PREV&&CALL:MENU_SELECT
IF NOT DEFINED SELECT GOTO:PROG_MAIN
IF "%SELECT%"=="#" CALL:SETS_CREATE&&SET "SELECT="
IF "%SELECT%"=="F" CALL:FOLDER_MODE&&SET "SELECT="
IF "%SELECT%"=="C" CALL:CREATE_PRO&&SET "SELECT="
IF "%SELECT%"=="E" CALL:AUTOPILOT_ENABLE&&SET "SELECT="
IF "%SELECT%"=="V" CALL:AUTOPILOT_VIEW&&SET "SELECT="
IF "%SELECT%"=="R" SET "PICK=$BK"&&CALL:FILE_PICK&&CALL:RESTORE_PRO&&SET "SELECT="
IF "%SELECT%"=="B" IF "%BRUTE_FORCE%"=="ENABLED" SET "BRUTE_FORCE=DISABLED"&&SET "SELECT="
IF "%SELECT%"=="B" IF "%BRUTE_FORCE%"=="DISABLED" SET "BRUTE_FORCE=ENABLED"&&SET "SELECT="
IF "%SELECT%"=="M" IF "%SHORTCUTS%"=="DISABLED" SET "SHORTCUTS=ENABLED"&&SET "SELECT="
IF "%SELECT%"=="M" IF "%SHORTCUTS%"=="ENABLED" SET "SHORTCUTS=DISABLED"&&SET "SELECT="
IF "%SELECT%"=="S" IF "%SAFE_EXCLUDE%"=="DISABLED" SET "SAFE_EXCLUDE=ENABLED"&&SET "SELECT="
IF "%SELECT%"=="S" IF "%SAFE_EXCLUDE%"=="ENABLED" SET "SAFE_EXCLUDE=DISABLED"&&SET "SELECT="
IF "%SELECT%"=="P" SET /A "PAD_TYPE+=1"&&IF "%PAD_TYPE%"=="8" SET "PAD_TYPE=1"&&SET "SELECT="
IF "%SELECT%"=="T" SET /A "COLOR_SLOT+=1"&&IF "%COLOR_SLOT%"=="9" SET "COLOR_SLOT="&&SET "SELECT="
IF "%SELECT%"=="X" SET /A "SHORT_SLOT+=1"&&IF "%SHORT_SLOT%"=="5" SET "SHORT_SLOT=1"&&SET "SELECT="
IF "%SELECT%"=="@" SET "SHORTCUTS=DISABLED"&&FOR %%a in (1 2 3 4 5 6 7 8 9) DO (SET "HOTKEY_%%a="&&SET "SHORT_%%a=")
IF "%SELECT%"=="D" SET "BOOT_TARGET=VHDX"&&SET "AUTOPILOT_TOGGLE=1"&&CALL:BOOT_TARGET_TOGGLE&&SET "SELECT="
IF "%SELECT%"=="A" IF "%SHORTCUTS%"=="ENABLED" SET "PROMPT_SET=SHORT_%SHORT_SLOT%"&&CALL:PAD_LINE&&ECHO                              Type Command&&CALL:PAD_LINE&&CALL:PROMPT_SET
IF "%SELECT%"=="H" IF "%SHORTCUTS%"=="ENABLED" CALL:PAD_LINE&&ECHO                          Type 2+ Digit Hotkey&&CALL:PAD_LINE&&SET "PROMPT_SET=HOTKEY_%SHORT_SLOT%"&&CALL:PROMPT_SET
GOTO:$ETTINGS_START
:AUTOPILOT_VIEW
IF NOT EXIST "%PROG_SOURCE%\AutoPilot.cmd" CALL:AUTOPILOT_EXAMPLE
START NOTEPAD.EXE "%PROG_SOURCE%\AutoPilot.cmd"
EXIT /B
:AUTOPILOT_ENABLE
IF NOT EXIST "%PROG_SOURCE%\AutoPilot.cmd" CALL:PAD_LINE&&ECHO No AutoPilot.cmd exists in the program folder. From the menu, press {V} to generate&&CALL:PAD_LINE&&CALL:PAUSED
IF EXIST "%PROG_SOURCE%\AutoPilot.cmd" SET "BOOT_TARGET=RECOVERY"&&SET "AUTOPILOT_TOGGLE=1"&&CALL:BOOT_TARGET_TOGGLE
EXIT /B
:RESTORE_PRO
IF NOT DEFINED $PICK EXIT /B
DISM /ENGLISH /APPLY-IMAGE /IMAGEFILE:"%$PICK%" /INDEX:1 /APPLYDIR:"%PROG_SOURCE%">NUL 2>&1
CALL:SETS_LOAD>NUL 2>&1
EXIT /B
:CREATE_PRO
CALL:PAD_LINE&&ECHO                            New Profile-Name?&&CALL:PAD_LINE&&SET "PROMPT_SET=NEW_NAME"&&CALL:PROMPT_SET
IF NOT DEFINED NEW_NAME EXIT /B
CALL:SETS_HANDLER>NUL 2>&1
RD /Q /S "\\?\%PROG_SOURCE%\SETTINGS_SAVE">NUL 2>&1
MD "%PROG_SOURCE%\SETTINGS_SAVE\CACHE">NUL 2>&1
IF EXIST "%PROG_SOURCE%\$ETTINGS.PRO" COPY /Y "%PROG_SOURCE%\$ETTINGS.PRO" "%PROG_SOURCE%\SETTINGS_SAVE">NUL 2>&1
IF EXIST "%PROG_SOURCE%\AutoPilot.cmd" COPY /Y "%PROG_SOURCE%\AutoPilot.cmd" "%PROG_SOURCE%\SETTINGS_SAVE">NUL 2>&1
IF EXIST "%CACHE_FOLDER%\*.MST" COPY /Y "%CACHE_FOLDER%\*.MST" "%PROG_SOURCE%\SETTINGS_SAVE\CACHE">NUL 2>&1
IF EXIST "%CACHE_FOLDER%\*.LST" COPY /Y "%CACHE_FOLDER%\*.LST" "%PROG_SOURCE%\SETTINGS_SAVE\CACHE">NUL 2>&1
DISM /ENGLISH /CAPTURE-IMAGE /CAPTUREDIR:"%PROG_SOURCE%\SETTINGS_SAVE" /IMAGEFILE:"%CACHE_FOLDER%\%NEW_NAME%.$BK" /COMPRESS:FAST /NAME:"%NEW_NAME%" /CheckIntegrity /Verify>NUL 2>&1
RD /Q /S "\\?\%PROG_SOURCE%\SETTINGS_SAVE">NUL 2>&1
EXIT /B
:AUTOPILOT_EXAMPLE
(ECHO;:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
ECHO;:::::::::::::::::::::::::::START:OF:AUTO-PILOT:::::::::::::::::::::::::::
ECHO;:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
ECHO;::    VHDX BACKUP EXAMPLE                        HOME-FOLDER = S:\$    ::
ECHO;::                 SCRIPT MUST BE OPEN-ENDED -NO EXIT-                 ::
ECHO;::AUTO-PILOT MUST BE ENABLED WITHIN THE HOST OS FOR REBOOT-TO-RECOVERY ::
ECHO;:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
ECHO.ECHO - AUTOPILOT - EXAMPLE - YOUR SCRIPT - GOES HERE -
ECHO.PAUSE
ECHO;:::::::::::::::::::AUTO-PILOT:ROUTINE:BACKUP:EXAMPLE:::::::::::::::::::::       
ECHO.REM $haZZam.cmd -diskmgr -mount -diskid 12345678-1234-1234-1234-123456781234 -part 1 -letter T
ECHO.REM COPY /Y S:\$\ACTIVE.VHDX T:\BACKUPS\LAST_CRASH.VHDX
ECHO.REM $haZZam.cmd -diskmgr -unmount -letter T
ECHO.REM $haZZam.cmd -imageproc -wim 22H2_AUTO.WIM -index 1 -vhdx ACTIVE.VHDX -size 25600
ECHO.REM DEL S:\$\ACTIVE.VHDX
ECHO.REM MOVE /Y S:\$\IMAGE\ACTIVE.VHDX S:\$
ECHO;:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
ECHO;::::::::::::::::::::::::::::END:OF:AUTO-PILOT::::::::::::::::::::::::::::
ECHO;:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
)>"%PROG_SOURCE%\AutoPilot.cmd"
EXIT /B
:AUTOPILOT_COUNT
IF EXIST "S:\$\ERR.TXT" DEL "S:\$\ERR.TXT"&&SET "AUTOPILOT=DISABLED"&&CALL:SETS_HANDLER&&EXIT /B
IF NOT EXIST "S:\$\AutoPilot.cmd" SET "AUTOPILOT=DISABLED"&&CALL:SETS_HANDLER&&EXIT /B
ECHO;@ECHO OFF>X:\COUNT.CMD
ECHO;FOR %%%%a in (20 19 18 17 16 15 14 13 13 12 11 10 9 8 7 6 5 4 3 2 1 0) DO (CLS^&^&ECHO AutoPilot starts in %%%%a seconds...^&^&PING -n 2 127.0.0.1^>NUL)>>X:\COUNT.CMD
ECHO;CD /D S:\$>>X:\COUNT.CMD
ECHO;CALL S:\$\AutoPilot.cmd>>X:\COUNT.CMD
ECHO;ECHO AutoPilot Finished. Restarting in 5 Seconds>>X:\COUNT.CMD
ECHO;PING -n 6 127.0.0.1^>NUL >>X:\COUNT.CMD
ECHO;DEL /Q /F S:\$\ERR.TXT>>X:\COUNT.CMD
ECHO;EXIT^&^&EXIT>>X:\COUNT.CMD	
CALL:PAD_LINE&&ECHO    To cancel AutoPilot close countdown window, then press {N}&&CALL:PAD_LINE
ECHO AUTOPILOT>S:\$\ERR.TXT
START /WAIT X:\COUNT.CMD
IF EXIST "S:\$\ERR.TXT" DEL "S:\$\ERR.TXT"&&SET "AUTOPILOT=DISABLED"&&CALL:SETS_HANDLER
EXIT /B
:BOOT_TARGET_TOGGLE
SET "GUID_TMP="&&SET "GUID_CUR="&&FOR /f "TOKENS=1-5 DELIMS= " %%a in ('BCDEDIT.EXE /V') do (
IF "%%a"=="displayorder" SET "GUID_CUR=%%b"
IF "%%a"=="identifier" CALL SET "GUID_TMP=%%b"
IF "%%a"=="description" IF "%%b"=="$haZZam!" IF "%BOOT_TARGET%"=="GET" CALL:BOOT_TARGET>NUL 2>&1
IF "%%a"=="description" IF "%%b"=="$haZZam!" IF "%BOOT_TARGET%"=="RECOVERY" CALL:BOOT_TARGET>NUL 2>&1
IF "%%a"=="description" IF "%%b"=="$haZZam!" IF "%BOOT_TARGET%"=="VHDX" CALL:BOOT_TARGET>NUL 2>&1)
EXIT /B
:BOOT_TARGET
IF DEFINED AUTOPILOT_TOGGLE IF "%BOOT_TARGET%"=="RECOVERY" SET "AUTOPILOT_TOGGLE="&&SET "AUTOPILOT=ENABLED"
IF DEFINED AUTOPILOT_TOGGLE IF "%BOOT_TARGET%"=="VHDX" SET "AUTOPILOT_TOGGLE="&&SET "AUTOPILOT=DISABLED"
IF "%BOOT_TARGET%"=="GET" IF "%GUID_TMP%"=="%GUID_CUR%" SET "BOOT_PRIORITY=RECOVERY"
IF "%BOOT_TARGET%"=="GET" IF NOT "%GUID_TMP%"=="%GUID_CUR%" SET "BOOT_PRIORITY=VHDX"
IF "%BOOT_TARGET%"=="RECOVERY" SET "BOOT_PRIORITY=RECOVERY"&&BCDEDIT.EXE /displayorder %GUID_TMP% /addfirst&&IF NOT "%PROG_MODE%"=="RAMDISK" SC CREATE AutoPilotStrap binpath="%WinDir%\SYSTEM32\CMD.EXE /C BCDEDIT.EXE /displayorder %GUID_TMP% /addfirst" start=auto
IF "%BOOT_TARGET%"=="VHDX" SET "BOOT_PRIORITY=VHDX"&&BCDEDIT.EXE /displayorder %GUID_TMP% /addlast&&IF NOT "%PROG_MODE%"=="RAMDISK" SC DELETE AutoPilotStrap
SET "BOOT_TARGET="
EXIT /B
:SHORT_RUN
SET "SHORT_RUN="&&CALL:CHECK
IF DEFINED ERROR EXIT /B
IF "%SELECT%"=="%HOTKEY_1%" SET "SHORT_RUN=%SHORT_1%"
IF "%SELECT%"=="%HOTKEY_2%" SET "SHORT_RUN=%SHORT_2%"
IF "%SELECT%"=="%HOTKEY_3%" SET "SHORT_RUN=%SHORT_3%"
IF "%SELECT%"=="%HOTKEY_4%" SET "SHORT_RUN=%SHORT_4%"
IF "%SELECT%"=="%HOTKEY_5%" SET "SHORT_RUN=%SHORT_5%"
IF NOT DEFINED SHORT_RUN EXIT /B
ECHO;@ECHO OFF >OUTER.BAT
ECHO;SET CRASHED=>>OUTER.BAT
ECHO;CMD /C INNER.BAT >>OUTER.BAT
ECHO;IF EXIST INNER.BAT SET CRASHED=1 >>OUTER.BAT
ECHO;IF EXIST INNER.BAT $HAZZAM.CMD >>OUTER.BAT
ECHO;@ECHO OFF >INNER.BAT
ECHO;%SHORT_RUN% >>INNER.BAT
ECHO;DEL /Q /F %%0 >>INNER.BAT
CMD /C OUTER.BAT>NUL 2>&1
DEL /Q /F OUTER.BAT>NUL 2>&1
EXIT /B
REM IMAGEMGR_IMAGEMGR_IMAGEMGR_IMAGEMGR_IMAGEMGR_IMAGEMGR_IMAGEMGR_
:IMAGEMGR_START
REM IMAGEMGR_IMAGEMGR_IMAGEMGR_IMAGEMGR_IMAGEMGR_IMAGEMGR_IMAGEMGR_
@ECHO OFF&&CLS&&CALL:SETS_HANDLER&&CALL:COLOR_CHK&&CALL:TITLE_GNC&&CALL:CLEAN&&SET "LIVE_APPLY="&&CALL:PAD_LINE&&ECHO                            Image Management&&CALL:PAD_LINE
IF DEFINED SOURCE_LOCATION ECHO                 {WINDOWS INSTALLATION-MEDIA DETECTED}&&CALL:PAD_LINE&&ECHO     {+}Import Windows-Installation-Media      {-}Import Boot-Media&&CALL:PAD_LINE
IF NOT DEFINED SOURCE_LOCATION IF NOT "%PROG_MODE%"=="RAMDISK" IF NOT EXIST "%PROG_SOURCE%\*.SAV" IF NOT EXIST "%IMAGE_FOLDER%\*.WIM" ECHO    Insert a Windows Disc/ISO/USB to Import Installation/Boot-Media&&CALL:PAD_LINE
ECHO   AVAILABLE VHDX'S:&&SET "BLIST=VHDX"&&CALL:FILE_LIST&&CALL:PAD_LINE
ECHO  [VHDX]  {I}nspect   {D}ISM   {M}ount/Unmount   {N}ew(empty)  {X}ISO&&CALL:PAD_LINE
ECHO   AVAILABLE LST'S:&&SET "BLIST=LST"&&CALL:FILE_LIST&&CALL:PAD_LINE
ECHO  [LIST]    {C}reate    {V}iew    {G}o^^!          {A}pply to[%APPLY_COPY%-VHDX] &&CALL:PAD_LINE
CALL:PAD_PREV&&CALL:MENU_SELECT
IF NOT DEFINED SELECT GOTO:PROG_MAIN
IF "%SELECT%"=="N" CALL:VHDX_NEW&&SET "SELECT="
IF "%SELECT%"=="I" CALL:IMAGEMGR_INSPECT&&SET "SELECT="
IF "%SELECT%"=="D" CALL:IMAGEMGR_DISM_MENU&&SET "SELECT="
IF "%SELECT%"=="C" CALL:IMAGEMGR_LIST_MAIN&&SET "SELECT="
IF "%SELECT%"=="+" IF DEFINED SOURCE_LOCATION CALL:SOURCE_IMPORT&&SET "SELECT="
IF "%SELECT%"=="-" IF DEFINED SOURCE_LOCATION CALL:BOOT_IMPORT&&SET "SELECT="
IF "%SELECT%"=="A" IF "%APPLY_COPY%"=="COPY" SET "APPLY_COPY=ORIG"&&SET "SELECT="
IF "%SELECT%"=="A" IF "%APPLY_COPY%"=="ORIG" SET "APPLY_COPY=COPY"&&SET "SELECT="
IF "%SELECT%"=="V" SET "PICK=LST"&&CALL:FILE_PICK&&CALL:LIST_VIEW&&SET "SELECT="
IF "%SELECT%"=="X" SET "PICK=ISO"&&CALL:FILE_PICK&&CALL:ISO_MOUNT&&SET "SELECT="
IF "%SELECT%"=="G" SET "PICK=LST"&&CALL:FILE_PICK&&CALL:IMAGEMGR_RUN_LIST&&SET "SELECT="
IF "%SELECT%"=="M" IF NOT EXIST "V:\" SET "PICK=VHDX"&&CALL:FILE_PICK&&CALL:VHDX_MOUNT&&SET "SELECT="
IF "%SELECT%"=="M" IF EXIST "V:\" CALL:VDISK_BRUTE&&SET "SELECT="
GOTO:IMAGEMGR_START
:LIST_VIEW
IF NOT DEFINED $PICK EXIT /B
START NOTEPAD "%$PICK%"
EXIT /B
:ISO_MOUNT
IF NOT DEFINED $PICK EXIT /B
"%$PICK%"&&CALL:SETS_HANDLER
EXIT /B
:ISO_UNMOUNT
CALL:PAD_LINE&&ECHO                    Remove which ISO Drive Letter?&&CALL:PAD_LINE&&CALL:PAD_PREV&&CALL SET "PROMPT_SET=ISO_LETTER"&&CALL:PROMPT_SET
IF NOT DEFINED ISO_LETTER EXIT /B
(ECHO.select VOLUME %ISO_LETTER%&&ECHO.Remove letter=%ISO_LETTER% noerr&&ECHO.Exit)>"$DSK"&&CALL:PAD_LINE&&DISKPART /s "$DSK"&&ECHO Drive letter %ISO_LETTER% removed&&CALL:PAD_LINE&&CALL:PAUSED
EXIT /B
:VHDX_NEW
SET "PROMPT_SET=NEW_NAME"&&CALL:PAD_LINE&&ECHO                             New VHDX name?&&CALL:PAD_LINE&&CALL:PAD_PREV&&CALL:PROMPT_SET_ANY
IF NOT DEFINED NEW_NAME EXIT /B
SET "PROMPT_SET=VHDX_MB"&&CALL:PAD_LINE&&ECHO                               VHDX size?&&CALL:PAD_LINE&&CALL:PAD_PREV&&CALL:PROMPT_SET
IF NOT DEFINED VHDX_MB EXIT /B
SET "VDISK=%IMAGE_FOLDER%\%NEW_NAME%.VHDX"&&SET VHDX_LABEL=%NEW_NAME%
CALL:PAD_LINE&&ECHO  CREATING [%VDISK%]&&CALL:PAD_LINE&&CALL:VDISK_CREATE
CALL:VDISK_DETACH&&ECHO 
EXIT /B
:VHDX_MOUNT
IF NOT DEFINED $PICK EXIT /B
SET "VDISK=%$PICK%"&&CALL:PAD_LINE&&ECHO  Attaching [%$PICK%]&&CALL:PAD_LINE&&CALL:VDISK_ATTACH
IF NOT EXIST "V:\" ECHO  Error mounting [%$PICK%]&&CALL:PAD_LINE&&CALL:VDISK_DETACH
EXIT /B
:IMAGEMGR_LIST_MAIN
CLS&&SET "ERROR="&&CALL:PAD_LINE&&ECHO                              List Creator&&CALL:PAD_LINE&&ECHO.
ECHO  [ C ]\[Package-ImageApply[CAB]&&ECHO  [ M ]\[Package-ImageApply[MSU]&&ECHO  [ I ]\[Package-ImageApply[$PK]&&ECHO  [ S ]\[Package-SetupComplete[$PK]&&ECHO  [ R ]\[Package-RunOnce[$PK]&&ECHO  [ D ]\[DISM-List]&&ECHO.&&CALL:PAD_LINE
ECHO  [ + ]\[Combine-Lists]&&ECHO  [ - ]\[Difference-List]&&ECHO  [ * ]\[Create Base-List]&&CALL:PAD_LINE&&ECHO   AVAILABLE BASE-LIST'S:
SET "NLIST=MST"&&CALL:FILE_LIST&&CALL:PAD_LINE&&ECHO                    Select a {#} To Start a New List&&CALL:PAD_LINE&&CALL:PAD_PREV&&SET "$ELECT$="&&CALL:MENU_SELECT
SET "LIST_CREATE="&&SET "LIST_EXEC="&&SET "LIST_ITEM="&&SET "NLIST="&&SET "$HEAD="&&SET "EXXT="
IF "%SELECT%"=="*" SET "LIST_CREATE=BASE-LIST"&&CALL:LIST_BASE_CREATE
IF "%SELECT%"=="+" SET "LIST_CREATE=SANDWICH"&&CALL:LIST_COMBINATOR
IF "%SELECT%"=="-" SET "LIST_CREATE=DIFF-LIST"&&SET "LIST_PASS=1"&&CALL:LIST_DIFFERENCER
IF "%SELECT%"=="C" SET "LIST_CREATE=IMAGE-APPLY"&&SET "LIST_ITEM=PACKAGE"&&SET "LIST_EXEC=IMAGE-APPLY"&&SET "NLIST=CAB"&&SET "EXXT=CAB"&&CALL:LIST_PACK_CREATE
IF "%SELECT%"=="M" SET "LIST_CREATE=IMAGE-APPLY"&&SET "LIST_ITEM=PACKAGE"&&SET "LIST_EXEC=IMAGE-APPLY"&&SET "NLIST=MSU"&&SET "EXXT=MSU"&&CALL:LIST_PACK_CREATE
IF "%SELECT%"=="I" SET "LIST_CREATE=IMAGE-APPLY"&&SET "LIST_ITEM=PACKAGE"&&SET "LIST_EXEC=IMAGE-APPLY"&&SET "NLIST=$PK"&&SET "EXXT=$PK"&&CALL:LIST_PACK_CREATE
IF "%SELECT%"=="S" SET "LIST_CREATE=SETUP-COMPLETE"&&SET "LIST_ITEM=PACKAGE"&&SET "LIST_EXEC=SETUP-COMPLETE"&&SET "NLIST=$PK"&&SET "EXXT=$PK"&&CALL:LIST_PACK_CREATE
IF "%SELECT%"=="R" SET "LIST_CREATE=RUN-ONCE"&&SET "LIST_ITEM=PACKAGE"&&SET "LIST_EXEC=RUN-ONCE"&&SET "NLIST=$PK"&&SET "EXXT=$PK"&&CALL:LIST_PACK_CREATE
IF "%SELECT%"=="D" SET "LIST_CREATE=DISM"&&SET "LIST_ITEM=DISM"&&SET "LIST_EXEC=IMAGE-APPLY"&&CALL:LIST_DISM_CREATE
IF DEFINED LIST_CREATE EXIT /B
IF NOT DEFINED $ELECT$ EXIT /B
IF "%SELECT%" GEQ "99" EXIT /B
IF NOT "%SELECT%" GEQ "1" EXIT /B
SET /P $HEAD=<"%CACHE_FOLDER%\%$ELECT$%"
IF NOT "%$HEAD%"=="BASE-LIST" CALL:PAD_LINE&&ECHO                       Bad file-header, check file&&CALL:PAD_LINE&&CALL:PAUSED
IF "%$HEAD%"=="BASE-LIST" CALL:LIST_UNIFIED_CREATE
:LIST_END
EXIT /B
:LIST_UNIFIED_CREATE
CLS&&SET "LIST_EXEC="&&SET "LIST_ITEM="&&CALL:PAD_LINE&&ECHO                              Type of List?&&CALL:PAD_LINE
ECHO.&&ECHO  {1}AppX&&ECHO  {2}Component&&ECHO  {3}Feature&&ECHO  {4}Service&&ECHO  {5}Task&&ECHO.&&CALL:PAD_LINE&&CALL:PAD_PREV&&SET "PROMPT_SET=SELECTX"&&CALL:PROMPT_SET
IF NOT "%SELECTX%"=="1" IF NOT "%SELECTX%"=="2" IF NOT "%SELECTX%"=="3" IF NOT "%SELECTX%"=="4" IF NOT "%SELECTX%"=="5" EXIT /B
CLS&&CALL:PAD_LINE&&ECHO                             Type of Action?&&CALL:PAD_LINE&&ECHO.
IF "%SELECTX%"=="1" SET "LIST_ITEM=APPX"&&ECHO  {1}Delete&&ECHO.&&CALL:PAD_LINE&&CALL:PAD_PREV&&SET "PROMPT_SET=SELECTY"&&CALL:PROMPT_SET
IF "%SELECTX%"=="2" SET "LIST_ITEM=COMPONENT"&&ECHO  {1}Delete&&ECHO.&&CALL:PAD_LINE&&CALL:PAD_PREV&&SET "PROMPT_SET=SELECTY"&&CALL:PROMPT_SET
IF "%SELECTX%"=="3" SET "LIST_ITEM=FEATURE"&&ECHO  {1}Disable&&ECHO  {2}Enable&&ECHO.&&CALL:PAD_LINE&&CALL:PAD_PREV&&SET "PROMPT_SET=SELECTY"&&CALL:PROMPT_SET
IF "%SELECTX%"=="4" SET "LIST_ITEM=SERVICE"&&ECHO  {1}Delete&&ECHO  {2}Automatic&&ECHO  {3}Manual&&ECHO  {4}Disable&&ECHO.&&CALL:PAD_LINE&&CALL:PAD_PREV&&SET "PROMPT_SET=SELECTY"&&CALL:PROMPT_SET
IF "%SELECTX%"=="5" SET "LIST_ITEM=TASK"&&ECHO  {1}Delete&&ECHO.&&CALL:PAD_LINE&&CALL:PAD_PREV&&SET "PROMPT_SET=SELECTY"&&CALL:PROMPT_SET
IF "%LIST_ITEM%"=="APPX" IF "%SELECTY%"=="1" SET "LIST_EXEC=DELETE"
IF "%LIST_ITEM%"=="COMPONENT" IF "%SELECTY%"=="1" SET "LIST_EXEC=DELETE"
IF "%LIST_ITEM%"=="FEATURE" IF "%SELECTY%"=="1" SET "LIST_EXEC=DISABLE"
IF "%LIST_ITEM%"=="FEATURE" IF "%SELECTY%"=="2" SET "LIST_EXEC=ENABLE"
IF "%LIST_ITEM%"=="SERVICE" IF "%SELECTY%"=="1" SET "LIST_EXEC=DELETE"
IF "%LIST_ITEM%"=="SERVICE" IF "%SELECTY%"=="2" SET "LIST_EXEC=AUTO"
IF "%LIST_ITEM%"=="SERVICE" IF "%SELECTY%"=="3" SET "LIST_EXEC=MANUAL"
IF "%LIST_ITEM%"=="SERVICE" IF "%SELECTY%"=="4" SET "LIST_EXEC=DISABLE"
IF "%LIST_ITEM%"=="TASK" IF "%SELECTY%"=="1" SET "LIST_EXEC=DELETE"
IF NOT DEFINED LIST_EXEC EXIT /B
CALL:PAD_LINE&&ECHO   GETTING LISTING...
IF "%LIST_ITEM%"=="APPX" SET "$LIST=%CACHE_FOLDER%\%$ELECT$%"&&SET "ONLY1=%LIST_ITEM%"&&SET "ONLY3=STANDARD"&&SET "NLIST=MST"&&CALL:LIST_FILE
IF NOT "%LIST_ITEM%"=="APPX" SET "$LIST=%CACHE_FOLDER%\%$ELECT$%"&&SET "ONLY1=%LIST_ITEM%"&&SET "NLIST=MST"&&CALL:LIST_FILE
IF DEFINED ERROR EXIT /B
CALL:PAD_MULT&&CALL:PAD_PREV&&CALL:MENU_SELECT&&CALL:LIST_WRITE
IF NOT DEFINED SELECT EXIT /B
SET "PICK=LST"&&CALL:FILE_PICK
IF NOT DEFINED $PICK EXIT /B
CALL:PAD_ADD&&SET "$LST1=%$PICK%"&&CALL:LIST_COMBINE&&CALL:PAD_END&&CALL:TITLECARD&&CALL:PAUSED
EXIT /B
:LIST_PACK_CREATE
CLS&&CALL:PAD_LINE&&ECHO                               File Picker&&CALL:PAD_LINE&&SET "NLIST=%EXXT%"&&CALL:FILE_LIST
CALL:PAD_MULT&&CALL:PAD_PREV&&CALL:MENU_SELECT&&CALL:LIST_WRITE
IF NOT DEFINED SELECT EXIT /B
SET "PICK=LST"&&CALL:FILE_PICK
IF NOT DEFINED $PICK EXIT /B
CALL:PAD_ADD&&SET "$LST1=%$PICK%"&&CALL:LIST_COMBINE&&CALL:PAD_END&&CALL:TITLECARD&&CALL:PAUSED
EXIT /B
:LIST_DISM_CREATE
CLS&&SET "DISM_OPER="&&CALL:PAD_LINE&&ECHO                        DISM Image Maintainence&&CALL:PAD_LINE
ECHO.&&ECHO  {1}RestoreHealth&&ECHO  {2}Cleanup&&ECHO  {3}ResetBase&&ECHO  {4}SPSuperseded&&ECHO  {5}CheckHealth&&ECHO  {6}AnalyzeComponentStore&&ECHO.&&SET "PROMPT_SET=DISM_MENU"&&CALL:PAD_LINE&&CALL:PAD_PREV&&CALL:PROMPT_SET
IF "%DISM_MENU%"=="1" SET "DISM_OPER=RESTOREHEALTH"
IF "%DISM_MENU%"=="2" SET "DISM_OPER=CLEANUP"
IF "%DISM_MENU%"=="3" SET "DISM_OPER=RESETBASE"
IF "%DISM_MENU%"=="4" SET "DISM_OPER=SPSUPERSEDED"
IF "%DISM_MENU%"=="5" SET "DISM_OPER=CHECKHEALTH"
IF "%DISM_MENU%"=="6" SET "DISM_OPER=ANALYZE"
IF NOT DEFINED DISM_OPER EXIT /B
SET "PICK=LST"&&CALL:FILE_PICK
IF NOT DEFINED $PICK EXIT /B
CALL:PAD_ADD&&ECHO.&&ECHO  {DISM}{%DISM_OPER%}{IMAGE-APPLY}&&ECHO {DISM}{%DISM_OPER%}{IMAGE-APPLY}>>"%$PICK%"
ECHO.&&CALL:PAD_END&&CALL:TITLECARD&&CALL:PAUSED
EXIT /B
:LIST_COMBINATOR
SET "PICK=LST"&&CALL:FILE_PICK
IF NOT DEFINED $PICK EXIT /B
SET "$LST1=%$PICK%"&&SET "PICK=LST"&&CALL:FILE_PICK
IF NOT DEFINED $PICK EXIT /B
SET "$LST2=%$PICK%"&&CALL:PAD_SAME
IF "%$LST1%"=="%$LST2%" EXIT /B
CALL:PAD_ADD&&CALL:LIST_COMBINE&&CALL:PAD_LINE
CALL:PAUSED
EXIT /B
:LIST_DIFFERENCER
SET "PICK=MST"&&CALL:FILE_PICK
IF NOT DEFINED $PICK EXIT /B
SET "$LST1=%$PICK%"&&SET "PICK=MST"&&CALL:FILE_PICK
IF NOT DEFINED $PICK EXIT /B
SET "$LST2=%$PICK%"&&CALL:PAD_SAME
IF "%$LST1%"=="%$LST2%" EXIT /B
CALL:PAD_LINE&&ECHO                            Name of the list?&&CALL:PAD_LINE&&ECHO.&&SET "PROMPT_SET=NEW_NAME"&&CALL:PROMPT_SET_ANY
IF NOT DEFINED NEW_NAME EXIT /B
CALL:PAD_LINE&&ECHO Differencing [%$LST1%] and [%$LST2%]...&&CALL:PAD_LINE
COPY /Y "%$LST1%" $LST2>NUL
COPY /Y "%$LST2%" $LST1>NUL
ECHO EXEC-LIST>"%CACHE_FOLDER%\%NEW_NAME%.LST"
FOR /F "TOKENS=1-9 SKIP=1 DELIMS={}" %%a in ($LST1) DO (SET "$X0$="&&FOR /F "TOKENS=1-9 SKIP=1 DELIMS={}" %%1 in ($LST2) DO (IF "[%%1:%%2]"=="[%%a:%%b]" SET "$X0$=1")
IF "%%a"=="APPX" IF NOT DEFINED $X0$ CALL ECHO.{%%a}{%%b}{DELETE}>>"%CACHE_FOLDER%\%NEW_NAME%.LST"
IF "%%a"=="COMPONENT" IF NOT DEFINED $X0$ CALL ECHO.{%%a}{%%b}{DELETE}>>"%CACHE_FOLDER%\%NEW_NAME%.LST"
IF "%%a"=="FEATURE" IF DEFINED $X0$ CALL ECHO.{%%a}{%%b}{DISABLE}>>"%CACHE_FOLDER%\%NEW_NAME%.LST"
IF "%%a"=="FEATURE" IF NOT DEFINED $X0$ CALL ECHO.{%%a}{%%b}{ABSENT}>>"%CACHE_FOLDER%\%NEW_NAME%.LST"
IF "%%a"=="SERVICE" IF DEFINED $X0$ CALL ECHO.{%%a}{%%b}{%%c}>>"%CACHE_FOLDER%\%NEW_NAME%.LST"
IF "%%a"=="SERVICE" IF NOT DEFINED $X0$ CALL ECHO.{%%a}{%%b}{DELETE}>>"%CACHE_FOLDER%\%NEW_NAME%.LST"
IF "%%a"=="TASK" IF NOT DEFINED $X0$ CALL ECHO.{%%a}{%%b}{DELETE}>>"%CACHE_FOLDER%\%NEW_NAME%.LST")
IF EXIST "$LST*" DEL /F $LST*>NUL
CALL:PAUSED
EXIT /B
:LIST_BASE_CREATE
SET "ERR_MSG="&&SET "MENU_INSERTA= [ @ ]\[Current-Environment]"&&SET "PICK=VHDX"&&CALL:FILE_PICK
IF "%LIVE_APPLY%"=="1" IF NOT DEFINED DISCLAIMER CALL:DISCLAIMER&EXIT /B
IF NOT "%LIVE_APPLY%"=="1" IF NOT DEFINED $PICK EXIT /B
CALL:PAD_LINE&&ECHO                         Name of the Base-List?&&CALL:PAD_LINE&&ECHO.&&SET "PROMPT_SET=NEW_NAME"&&CALL:PROMPT_SET_ANY
IF NOT DEFINED NEW_NAME EXIT /B
IF "%LIVE_APPLY%"=="1" GOTO:LIVE_APPLY_BASE_SKIP
IF EXIST "V:\" SET "ERR_MSG=Drive letter V:\ can NOT be in use. Unmount the Vdisk in use."&&GOTO:LIST_BASE_CLEANUP
SET "VDISK=%$PICK%"&&CALL:VDISK_ATTACH
IF NOT EXIST "V:\Windows" SET "ERR_MSG=             Vdisk error or Windows not installed on Vdisk."&&CALL:VDISK_DETACH&&GOTO:LIST_BASE_CLEANUP
:LIVE_APPLY_BASE_SKIP
CLS&&CALL:PAD_LINE&&ECHO                          Base List Creation&&CALL:PAD_LINE
IF EXIST "%CACHE_FOLDER%\%NEW_NAME%.MST" DEL /F "%CACHE_FOLDER%\%NEW_NAME%.MST">NUL
CALL:IF_LIVE2
ECHO BASE-LIST>"%CACHE_FOLDER%\%NEW_NAME%.MST"
DISM /ENGLISH /%APPLY_TARGET% /GET-CURRENTEDITION>"$DISM"
SET "INFO_E="&&SET "INFO_V="&&FOR /F "TOKENS=1-9 DELIMS=: " %%a in ($DISM) DO (
IF "%%a %%b"=="Image Version" CALL SET "INFO_V=%%c"
IF "%%a %%b"=="Current Edition" IF NOT "%%c"=="is" CALL SET "INFO_E=%%c")
ECHO Version[%INFO_V%] Edition[%INFO_E%]&&ECHO {%INFO_E%}{%INFO_V%}>>"%CACHE_FOLDER%\%NEW_NAME%.MST"
CALL:PAD_LINE&&ECHO Getting appx listing..&&CALL:PAD_LINE&&IF EXIST "$DISM" DEL /F "$DISM">NUL 2>&1
SET "LIST_ITEM=APPX"&&SET "LIST_EXEC=INSTALLED"&&CALL:IF_LIVE1
REG QUERY "%HIVE_SOFTWARE%\Microsoft\Windows\CurrentVersion\Appx\AppxAllUserStore\Applications">"$REG1"
REG QUERY "%HIVE_SOFTWARE%\Microsoft\Windows\CurrentVersion\Appx\AppxAllUserStore\InboxApplications">"$REG2"
SET "LIST_EXEC=STANDARD"&&FOR /F "TOKENS=9* DELIMS=\" %%a in ($REG1) DO (FOR /F "TOKENS=1-1* DELIMS=_" %%1 in ("%%a") DO (CALL SET "BASECAP=%%1"&&CALL:BASECAP))
SET "LIST_EXEC=INBOXED"&&FOR /F "TOKENS=9* DELIMS=\" %%a in ($REG2) DO (FOR /F "TOKENS=1-1* DELIMS=_" %%1 in ("%%a") DO (CALL SET "BASECAP=%%1"&&CALL:BASECAP))
CALL:IF_LIVE2
CALL:PAD_LINE&&ECHO Getting feature listing..&&CALL:PAD_LINE&&SET "LIST_ITEM=FEATURE"&&DISM /ENGLISH /%APPLY_TARGET% /GET-FEATURES>"$LST"
SET "LIST_EXEC="&&SET "LIST_EXEC=INSTALLED"&&FOR /F "TOKENS=1-9 DELIMS=: " %%a in ($LST) DO (IF "%%a %%b"=="Feature Name" CALL SET "BASECAP=%%c%%d%%e%%f%%g%%h%%i"&&CALL:BASECAP)
CALL:IF_LIVE1
CALL:PAD_LINE&&ECHO Getting service listing..&&CALL:PAD_LINE&&SET "LIST_ITEM=SERVICE"&&REG QUERY "%HIVE_SYSTEM%\ControlSet001\Services">"$LST"
FOR /F "TOKENS=1-4* DELIMS=\" %%a in ($LST) DO (FOR /F "TOKENS=1-9 DELIMS= " %%1 in ('REG QUERY "%HIVE_SYSTEM%\ControlSet001\Services\%%e"') DO (CALL SET "BASECAP=%%e"
IF "%%1"=="Start" IF "%%3"=="0x2" CALL SET "LIST_EXEC=AUTO"
IF "%%1"=="Start" IF "%%3"=="0x3" CALL SET "LIST_EXEC=MANUAL"
IF "%%1"=="Start" IF "%%3"=="0x4" CALL SET "LIST_EXEC=DISABLED"
IF "%%1"=="Type" IF "%%3"=="0x10" CALL:BASECAP
IF "%%1"=="Type" IF "%%3"=="0x20" CALL:BASECAP
IF "%%1"=="Type" IF "%%3"=="0x60" CALL:BASECAP))
CALL:PAD_LINE&&ECHO Getting task listing..&&CALL:PAD_LINE&&REG QUERY "%HIVE_SOFTWARE%\Microsoft\Windows NT\CurrentVersion\Schedule\TaskCache\Tasks" /f Path /c /e /s>"$LST"
SET "LIST_ITEM=TASK"&&SET "LIST_EXEC=INSTALLED"&&FOR /F "TOKENS=1* DELIMS=\" %%a in ($LST) DO (IF "%%a"=="    Path    REG_SZ    " CALL SET "BASECAP=%%b"&&CALL:BASECAP)
CALL:PAD_LINE&&ECHO Getting component listing....&&CALL:PAD_LINE&&REG QUERY "%HIVE_SOFTWARE%\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages">"$LST"
SET "LIST_ITEM=COMPONENT"&&SET "LIST_EXEC=INSTALLED"&&FOR /F "TOKENS=8* DELIMS=\" %%a in ($LST) DO (FOR /F "TOKENS=1-1* DELIMS=~" %%1 in ("%%a") DO (CALL SET "BASEPRE=%%1"&&CALL SET "BASECAP=%%1"&&CALL:BASECAP))
CALL:MOUNT_INT
CALL:VDISK_DETACH&&CALL:TITLECARD
:LIST_BASE_CLEANUP
IF NOT DEFINED LIVE_APPLY CALL:SCRATCH_DELETE
IF DEFINED ERR_MSG CALL:PAD_LINE&&ECHO %ERR_MSG%
CALL:PAD_LINE&&ECHO                        End of Base-List Creation&&CALL:PAD_LINE&&CALL:TITLECARD&&CALL:CLEAN
CALL:PAUSED
EXIT /B
:BASECAP
IF "%BASEPRELST%"=="%BASEPRE%" IF "%LIST_ITEM%"=="COMPONENT" EXIT /B
CALL SET "BASEPRELST=%BASEPRE%"&&FOR %%G in (A B C D E F G H I J K L M N O P Q R S T U V W X Y Z) DO (CALL SET "BASECAP=%%BASECAP:%%G=%%G%%")
CALL ECHO  {%LIST_ITEM%}{%BASECAP%}{%LIST_EXEC%}&&CALL ECHO {%LIST_ITEM%}{%BASECAP%}{%LIST_EXEC%}>>"%CACHE_FOLDER%\%NEW_NAME%.MST"
EXIT /B
:LIST_COMBINE
IF DEFINED $LST1 COPY /Y "%$LST1%" "$LST1">NUL
IF DEFINED $LST2 COPY /Y "%$LST2%" "$LST2">NUL
ECHO EXEC-LIST>"$LST3"
IF EXIST $LST1 FOR /F "TOKENS=1-9 DELIMS={}" %%a in ($LST1) DO (IF NOT "%%a"=="" IF NOT "%%a"=="BASE-LIST" IF NOT "%%a"=="EXEC-LIST" IF NOT "%%a"=="VERSION" CALL ECHO {%%a}{%%b}{%%c}>>"$LST3")
IF EXIST $LST2 ECHO.&&FOR /F "TOKENS=1-9 DELIMS={}" %%a in ($LST2) DO (IF NOT "%%a"=="" IF NOT "%%a"=="BASE-LIST" IF NOT "%%a"=="EXEC-LIST" IF NOT "%%a"=="VERSION" CALL ECHO  {%%a}{%%b}{%%c}&&CALL ECHO {%%a}{%%b}{%%c}>>"$LST3")
IF EXIST $LST2 ECHO.
COPY /Y "$LST3" "%$LST1%">NUL
SET "$LST1="&&SET "$LST2="&&SET "$LST3="&&IF EXIST "$LST*" DEL /F "$LST*">NUL
EXIT /B
:LIST_WRITE
IF NOT DEFINED $ELECT EXIT /B
IF EXIST "$LST*" DEL /F "$LST*">NUL
FOR %%a in (%$ELECT%) DO (IF NOT "%%a"=="" CALL SET "LIST_WRITE={%%$ITEM%%a%%}"&&CALL:LIST_WRITEX)
EXIT /B
:LIST_WRITEX
IF NOT "%LIST_ITEM%"=="PACKAGE" FOR /F "TOKENS=1-9 DELIMS={}" %%1 IN ("%LIST_WRITE%") DO (IF "%%1"=="%LIST_ITEM%" CALL ECHO {%%1}{%%2}{%LIST_EXEC%}>>"$LST2")
IF "%LIST_ITEM%"=="PACKAGE" FOR /F "TOKENS=1-9 DELIMS={}" %%1 IN ("%LIST_WRITE%") DO (CALL ECHO {PACKAGE}{%%1}{%LIST_EXEC%}>>"$LST2")
EXIT /B
:PAD_SAME
IF "%$LST1%"=="%$PICK%" CALL:PAD_LINE&&ECHO [%$LST1%] and [%$PICK%] are the same...&&CALL:PAD_LINE&&CALL:PAUSED
EXIT /B
:PAD_MULT
CALL:PAD_LINE&&ECHO             Enter File # To Build List, Multiples OK(1 2 3)&&CALL:PAD_LINE
EXIT /B
:PAD_ADD
CLS&&CALL:PAD_LINE&&ECHO                The Following Items Were Added/Combined:&&CALL:PAD_LINE
EXIT /B
:PAD_END
CALL:PAD_LINE&&ECHO                           End of List Creation&&CALL:PAD_LINE
EXIT /B
:NULL
EXIT /B
:IF_LIVE1
IF DEFINED LIVE_APPLY CALL:MOUNT_INT
IF NOT DEFINED LIVE_APPLY CALL:MOUNT_EXT
EXIT /B
:IF_LIVE2
IF DEFINED LIVE_APPLY CALL:MOUNT_INT
IF NOT DEFINED LIVE_APPLY CALL:MOUNT_MIX
EXIT /B
REM IMAGEMGR_RUN_LIST_IMAGEMGR_RUN_LIST_IMAGEMGR_RUN_LIST_IMAGEMGR_RUN_LIST
:IMAGEMGR_RUN_LIST
REM IMAGEMGR_RUN_LIST_IMAGEMGR_RUN_LIST_IMAGEMGR_RUN_LIST_IMAGEMGR_RUN_LIST
SET "ERR_MSG="&&IF NOT DEFINED APPLY_COPY SET "APPLY_COPY=ORIG"
IF NOT DEFINED $PICK EXIT /B
SET "$LST1=%$PICK%"
SET "MENU_INSERTA= [ @ ]\[Current-Environment]"&&SET "PICK=VHDX"&&CALL:FILE_PICK
IF "%LIVE_APPLY%"=="1" IF NOT DEFINED DISCLAIMER CALL:DISCLAIMER&EXIT /B
IF NOT "%LIVE_APPLY%"=="1" IF NOT DEFINED $PICK EXIT /B
IF "%LIVE_APPLY%"=="1" GOTO:THE_ACTION
IF EXIST "V:\" SET "ERR_MSG=Drive letter V:\ can NOT be in use. Unmount the Vdisk in use."&&GOTO:THE_ACTION_CLEANUP
IF "%APPLY_COPY%"=="COPY" ECHO.&&ECHO Copying %$PICK%...&&COPY /Y "%$PICK%" "%IMAGE_FOLDER%\Copy_%$ELECT$%"&&SET "SELECT=Copy_%$ELECT$%"&&ECHO.
SET "VDISK=%$PICK%"&&CALL:VDISK_ATTACH
IF NOT EXIST "V:\Windows" SET "ERR_MSG=             Vdisk error or Windows not installed on Vdisk."&&CALL:VDISK_DETACH&&GOTO:THE_ACTION_CLEANUP
:THE_ACTION
CALL:UNIFIED_LIST_RUN
CALL:MOUNT_INT
IF NOT DEFINED LIVE_APPLY CALL:VDISK_DETACH
:THE_ACTION_CLEANUP
IF NOT DEFINED LIVE_APPLY CALL:SCRATCH_DELETE
IF DEFINED ERR_MSG CALL:PAD_LINE&&ECHO %ERR_MSG%
CALL:PAD_LINE&&ECHO                       Imaging operations complete&&CALL:PAD_LINE&&CALL:TITLECARD&&CALL:PAUSED
EXIT /B
:UNIFIED_LIST_RUN
IF NOT DEFINED $LST1 EXIT /B
CALL:PAD_LINE&&ECHO [EXEC-LIST START] [%DATE%] [%TIME%]&&CALL:PAD_LINE&&CALL:COLOR_CHK
IF "%PROG_MODE%"=="RAMDISK" IF "%BRUTE_FORCE%"=="ENABLED" SET "BRUTE_FORCE="&&SET "BRUTE_FORCE_TMP=1"
SET "SETUPCOMPLETE_INITIAL="&&SET "RUNONCE_INITIAL="&&COPY /Y "%$LST1%" "$LST">NUL 2>&1
FOR /F "TOKENS=1-9 SKIP=1 DELIMS={}" %%a in ($LST) DO (
IF "%%a"=="SERVICE" IF "%BRUTE_FORCE%"=="ENABLED" (SC DELETE $BRUTE>NUL 2>&1
SC CREATE $BRUTE BINPATH="CMD /C START %PROG_SOURCE%\$BRUTE.CMD" START=DEMAND>NUL 2>&1)
IF "%%a"=="TASKS-DELETE" IF "%BRUTE_FORCE%"=="ENABLED" (SC DELETE $BRUTE>NUL 2>&1
SC CREATE $BRUTE BINPATH="CMD /C START %PROG_SOURCE%\$BRUTE.CMD" START=DEMAND>NUL 2>&1)
FOR %%1 in (# APPX COMPONENT DISM FEATURE PACKAGE SERVICE TASK) DO (IF "%%1"=="%%a" CALL SET "LIST_ITEM=%%a"&&CALL SET "BASE_MEAT=%%b"&&CALL SET "LIST_EXEC=%%c"&&CALL:UNIFIED_PARSE))
CALL:SCRATCH_PACK_DELETE
IF DEFINED BRUTE_FORCE_TMP SET "BRUTE_FORCE=ENABLED"&&SET "BRUTE_FORCE_TMP="
IF "%BRUTE_FORCE%"=="ENABLED" SC DELETE $BRUTE>NUL 2>&1
ECHO [EXEC-LIST END] [%DATE%] [%TIME%]&&SET "$LST1="&&IF EXIST "$LST" DEL /F "$LST">NUL 2>&1
EXIT /B
:UNIFIED_PARSE
SET "NORESTART="&&SET "ENDQ=End of search"
IF DEFINED LIVE_APPLY SET "NORESTART=/NORESTART "
IF "%LIST_ITEM%"=="#" ECHO {#} [%BASE_MEAT%]
IF "%LIST_ITEM%"=="FEATURE" CALL:FEAT_HUNT
IF "%LIST_ITEM%"=="SERVICE" CALL:SVC_HUNT
IF "%LIST_ITEM%:%LIST_EXEC%"=="APPX:DELETE" CALL:APPX_HUNT
IF "%LIST_ITEM%:%LIST_EXEC%"=="TASK:DELETE" CALL:TASK_HUNT
IF "%LIST_ITEM%:%LIST_EXEC%"=="COMPONENT:DELETE" CALL:COMP_HUNT
IF "%LIST_ITEM%:%LIST_EXEC%"=="PACKAGE:RUN-ONCE" CALL:RUNONCE_CREATE
IF "%LIST_ITEM%:%LIST_EXEC%"=="PACKAGE:SETUP-COMPLETE" CALL:SETUPCOMPLETE_CREATE
IF "%LIST_ITEM%"=="DISM" IF NOT "%BASE_MEAT%"=="" IF NOT "%LIST_EXEC%"=="" CALL:IF_LIVE2
IF "%LIST_ITEM%"=="DISM" IF NOT "%BASE_MEAT%"=="" IF NOT "%LIST_EXEC%"=="" SET "DISM_OPER=%BASE_MEAT%"&&CALL:IMAGEMGR_DISM_OPER
IF "%LIST_ITEM%:%LIST_EXEC%"=="PACKAGE:IMAGE-APPLY" CALL SET "IMAGE_PACK=%PACK_FOLDER%\%BASE_MEAT%"&&CALL:PACK_INSTALL
CALL:CLEAN
EXIT /B
:APPX_HUNT
SET "APPX_DONE="&&SET "APPX_ERR="&&CALL:IF_LIVE1
REG QUERY "%HIVE_SOFTWARE%\Microsoft\Windows\CurrentVersion\Appx\AppxAllUserStore\Applications" /F "%BASE_MEAT%">$REG1
REG QUERY "%HIVE_SOFTWARE%\Microsoft\Windows\CurrentVersion\Appx\AppxAllUserStore\InboxApplications" /F "%BASE_MEAT%">>$REG1
SET "APPX_CNT="&&FOR /F "TOKENS=3* DELIMS=_" %%a IN ($REG1) DO (IF NOT "%%a"=="" CALL SET /A "APPX_CNT+=1"&&CALL SET "TX1=%%a"&&CALL SET "TX2=%%b"&&CALL:APPXBBQ)
IF DEFINED APPX_ERR ECHO           [AppX is either an empty stub or unable to remove]&&CALL:PAD_LINE
IF NOT DEFINED APPX_DONE IF NOT DEFINED APPX_ERR ECHO AppX [%BASE_MEAT%] doesn't exist&&CALL:PAD_LINE
IF DEFINED APPX_DONE ECHO                 [%DISMSG%]&&CALL:PAD_LINE
IF EXIST "$REG*" DEL /F "$REG*">NUL
EXIT /B
:APPXBBQ
IF "%TX1%"=="%ENDQ%" EXIT /B
ECHO Removing AppX [%BASE_MEAT%_%TX2%]...&&CALL:PAD_LINE&&CALL:IF_LIVE2
DISM /ENGLISH /%APPLY_TARGET% /REMOVE-Provisionedappxpackage /PACKAGENAME:"%BASE_MEAT%_%TX2%" >$DISM1
SET "DISMSG="&&FOR /F "TOKENS=1 DELIMS=." %%1 in ($DISM1) DO (SET "DISMSG="&&IF "%%1"=="The operation completed successfully" CALL SET DISMSG=%%1)
IF NOT DEFINED DISMSG SET "APPX_ERR=1"
IF DEFINED DISMSG SET "APPX_DONE=1"
IF EXIST "$DISM1" DEL /F "$DISM1">NUL
CALL:IF_LIVE1
IF DEFINED APPX_DONE REG ADD "%HIVE_SOFTWARE%\Microsoft\Windows\CurrentVersion\Appx\AppxAllUserStore\Deprovisioned\%BASE_MEAT%_%TX2%">NUL 2>&1
EXIT /B
:COMP_HUNT
CALL:IF_LIVE1
REG QUERY "%HIVE_SOFTWARE%\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages" /F "%BASE_MEAT%">$REG1
SET "X0LAST="&&SET "COMP_CNT="&&SET "FNL_CNT="&&FOR /F "TOKENS=1* DELIMS=:~" %%a IN ($REG1) DO (IF NOT "%%a"=="" CALL SET /A "COMP_CNT+=1"&&CALL SET /A "FNL_CNT+=1"&&CALL SET "TX1=%%a"&&CALL SET "TX2=%%b"&&CALL:COMP_HUNT2)
EXIT /B
:COMP_HUNT2
IF "%X0LAST%"=="%TX1%" EXIT /B
IF "%COMP_CNT%" GTR "1" EXIT /B
IF "%TX1%"=="%ENDQ%" ECHO Component [%BASE_MEAT%] doesn't exist&&CALL:PAD_LINE&&EXIT /B
IF NOT DEFINED LIVE_APPLY CALL:MOUNT_EXT
FOR %%a in (1 2 3 4 5 6 7 8 9) DO (CALL SET COMP_LAST%%a=)
REG QUERY "%HIVE_SOFTWARE%\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages" /F "%BASE_MEAT%">$REG2
SET "X0LAST="&&SET "SUB_COUNT="&&SET "COMP_FLAG="&&FOR /F "TOKENS=1* DELIMS=:~" %%1 IN ($REG2) DO (IF NOT "%%1"=="" CALL SET /A "SUB_COUNT+=1"&&CALL SET "X1=%%1"&&CALL SET "X2=%%2"&&CALL:COMPBBQ)
IF EXIST "$REG2" DEL /F "$REG2">NUL
EXIT /B
:COMPBBQ
IF "%X1%"=="%ENDQ%" EXIT /B
IF "%FNL_CNT%" GTR "9" EXIT /B
IF "%SUB_COUNT%" GTR "9" EXIT /B
IF "%X0LAST%"=="%BASE_MEAT%~%X2%" EXIT /B
IF "%BASE_MEAT%~%X2%"=="%COMP_LAST1%" EXIT /B
IF "%BASE_MEAT%~%X2%"=="%COMP_LAST2%" EXIT /B
IF "%BASE_MEAT%~%X2%"=="%COMP_LAST3%" EXIT /B
IF "%BASE_MEAT%~%X2%"=="%COMP_LAST4%" EXIT /B
IF "%BASE_MEAT%~%X2%"=="%COMP_LAST5%" EXIT /B
IF "%BASE_MEAT%~%X2%"=="%COMP_LAST6%" EXIT /B
IF "%BASE_MEAT%~%X2%"=="%COMP_LAST7%" EXIT /B
IF "%BASE_MEAT%~%X2%"=="%COMP_LAST8%" EXIT /B
IF "%BASE_MEAT%~%X2%"=="%COMP_LAST9%" EXIT /B
SET "COMP_ABT=X"&&SET "COMP_ABT1="&&IF "%SAFE_EXCLUDE%"=="ENABLED" FOR /F "TOKENS=1-9 DELIMS=-" %%1 IN ("%BASE_MEAT%") DO (IF "%%4"=="FEATURES" SET "COMP_ABT1=1")
SET "COMP_ABT2="&&IF "%SAFE_EXCLUDE%"=="ENABLED" FOR /F "TOKENS=1-9 DELIMS=-" %%1 IN ("%BASE_MEAT%") DO (IF "%%5"=="REQUIRED" SET "COMP_ABT2=1")
SET "COMP_LAST%FNL_CNT%=%BASE_MEAT%~%X2%"&&SET "COMP_ABT3="&&FOR %%1 in (%COMP_SKIP%) DO (IF "%BASE_MEAT%"=="%%1" SET "COMP_ABT3=1")
IF NOT DEFINED COMP_ABT1 IF NOT DEFINED COMP_ABT2 IF NOT DEFINED COMP_ABT3 SET "COMP_ABT="
SET /A "FNL_CNT+=1"&&SET "X0LAST=%BASE_MEAT%~%X2%"&&IF NOT DEFINED COMP_FLAG ECHO Removing Component [%BASE_MEAT%~%X2%]...&&CALL:PAD_LINE
IF DEFINED COMP_ABT IF "%FNL_CNT%"=="2" SET "COMP_FLAG=1"&&ECHO                [Component required or unable to remove]&&CALL:PAD_LINE
IF DEFINED COMP_ABT EXIT /B
IF NOT DEFINED LIVE_APPLY CALL:MOUNT_EXT
REG ADD "%X1%~%X2%" /V "Visibility" /T REG_DWORD /D "1" /F>NUL 2>&1
REG DELETE "%X1%~%X2%\Owners" /F>NUL 2>&1
IF NOT DEFINED LIVE_APPLY CALL:MOUNT_MIX
DISM /ENGLISH /%APPLY_TARGET% %NORESTART%/REMOVE-PACKAGE /PACKAGENAME:"%BASE_MEAT%~%X2%" >$DISM1
SET "DISMSG="&&FOR /F "TOKENS=1 DELIMS=." %%1 in ($DISM1) DO (SET "DISMSG="&&IF "%%1"=="The operation completed successfully" CALL SET DISMSG=%%1)
IF NOT DEFINED DISMSG ECHO                [Component leftover or unable to remove]&&CALL:PAD_LINE
IF DEFINED DISMSG ECHO                 [%DISMSG%]&&CALL:PAD_LINE
IF EXIST "$DISM1" DEL /F "$DISM1">NUL
EXIT /B
:FEAT_HUNT
CALL:IF_LIVE2
IF "%LIST_ITEM%:%LIST_EXEC%"=="FEATURE:ENABLE" ECHO Enabling Feature [%BASE_MEAT%]...&&CALL:PAD_LINE&&DISM /ENGLISH /%APPLY_TARGET% %NORESTART%/ENABLE-FEATURE /PACKAGENAME:"%BASE_MEAT%" /ALL>$DISM1
IF "%LIST_ITEM%:%LIST_EXEC%"=="FEATURE:ENABLE" SET "DISMSG="&&FOR /F "TOKENS=1 DELIMS=." %%a in ($DISM1) DO (SET "DISMSG="&&IF "%%a"=="The operation completed successfully" CALL SET "DISMSG=%%a"&&CALL ECHO                 [%%a]&&CALL:PAD_LINE)
IF "%LIST_ITEM%:%LIST_EXEC%"=="FEATURE:DISABLE" ECHO Disabling Feature [%BASE_MEAT%]...&&CALL:PAD_LINE&&DISM /ENGLISH /%APPLY_TARGET% %NORESTART%/DISABLE-FEATURE /FEATURENAME:"%BASE_MEAT%" /REMOVE>$DISM1
IF "%LIST_ITEM%:%LIST_EXEC%"=="FEATURE:DISABLE" SET "DISMSG="&&FOR /F "TOKENS=1 DELIMS=." %%a in ($DISM1) DO (SET "DISMSG="&&IF "%%a"=="The operation completed successfully" CALL SET "DISMSG=%%a"&&CALL ECHO                 [%%a]&&CALL:PAD_LINE)
IF "%LIST_ITEM%:%LIST_EXEC%"=="FEATURE:ENABLE" IF NOT DEFINED DISMSG CALL ECHO                  [Feature stub or unable to remove]&&CALL:PAD_LINE
IF "%LIST_ITEM%:%LIST_EXEC%"=="FEATURE:DISABLE" IF NOT DEFINED DISMSG CALL ECHO                  [Feature stub or unable to remove]&&CALL:PAD_LINE
EXIT /B
:SVC_HUNT
CALL:IF_LIVE1
IF "%LIST_ITEM%:%LIST_EXEC%"=="SERVICE:AUTO" ECHO Changing Start to Auto for Service [%BASE_MEAT%]...&&CALL:PAD_LINE&&REG ADD "%HIVE_SYSTEM%\ControlSet001\Services\%BASE_MEAT%" /V "Start" /T REG_DWORD /D "2" /F>NUL&&ECHO                 [The operation completed successfully]&&CALL:PAD_LINE&&EXIT /B
IF "%LIST_ITEM%:%LIST_EXEC%"=="SERVICE:MANUAL" ECHO Changing Start to Manual for Service [%BASE_MEAT%]...&&CALL:PAD_LINE&&REG ADD "%HIVE_SYSTEM%\ControlSet001\Services\%BASE_MEAT%" /V "Start" /T REG_DWORD /D "3" /F>NUL&&ECHO                 [The operation completed successfully]&&CALL:PAD_LINE&&EXIT /B
IF "%LIST_ITEM%:%LIST_EXEC%"=="SERVICE:DISABLE" ECHO Disabling Service [%BASE_MEAT%]...&&CALL:PAD_LINE&&REG ADD "%HIVE_SYSTEM%\ControlSet001\Services\%BASE_MEAT%" /V "Start" /T REG_DWORD /D "4" /F>NUL&&ECHO                 [The operation completed successfully]&&CALL:PAD_LINE&&EXIT /B
FOR %%1 in (%SVC_SKIP%) DO (IF "%BASE_MEAT%"=="%%1" CALL ECHO Deleting Service [%BASE_MEAT%]...&&CALL:PAD_LINE&&CALL ECHO             [The operation did NOT complete successfully]&&CALL:PAD_LINE&&EXIT /B)
REG QUERY "%HIVE_SYSTEM%\ControlSet001\Services\%BASE_MEAT%" /F ImagePath /c /e /s>$REG1 2>&1
IF EXIST "%PROG_SOURCE%\$BRUTE.CMD" DEL /F "%PROG_SOURCE%\$BRUTE.CMD">NUL
SET "SVC_GO="&&SET "SVC_CNT="&&FOR /F "TOKENS=1-9* DELIMS=: " %%a IN ($REG1) DO (IF "%%a"=="ImagePath" IF NOT "%%c"=="NUL" CALL SET "SVC_GO=1")
IF NOT DEFINED SVC_GO SET "REGMSG=Service [%BASE_MEAT%] doesn't exist"&&GOTO:SVC_SKIP
SET "SVC_CNT="&&CALL SET "X0LAST="&&FOR /F "TOKENS=1-9* DELIMS={}:" %%a IN ($REG1) DO (IF NOT "%%a"=="" CALL SET /A "SVC_CNT+=1"&&CALL SET "X1=%%a"&&CALL SET "X2=%%b"&&CALL:SVCBBQ&&CALL:NULL)
REG QUERY "%HIVE_SYSTEM%\ControlSet001\Services\%BASE_MEAT%" /F ImagePath /c /e /s>$REG2 2>&1
SET "REGMSG="&&FOR /F "TOKENS=1-9 DELIMS= " %%a IN ($REG2) DO (IF "%%a"=="ImagePath" IF NOT "%%c"=="NUL" CALL SET "REGMSG=            [The operation did NOT complete successfully]")
:SVC_SKIP
IF NOT DEFINED REGMSG ECHO                 [The operation completed successfully]&&CALL:PAD_LINE
IF DEFINED REGMSG ECHO %REGMSG%&&CALL:PAD_LINE
IF EXIST "%PROG_SOURCE%\$BRUTE.CMD" DEL /F "%PROG_SOURCE%\$BRUTE.CMD">NUL
IF EXIST "$REG1" DEL /F "$REG1">NUL
IF EXIST "$REG2" DEL /F "$REG2">NUL
EXIT /B
:SVCBBQ
IF "%X1%"=="%ENDQ%" EXIT /B
IF "%BASE_MEAT%"=="%X0LAST%" EXIT /B
SET "X0LAST=%BASE_MEAT%"&&SET "REGMSG="&&ECHO Deleting Service [%BASE_MEAT%]...&&CALL:PAD_LINE
IF "%SVC_CNT%"=="1" IF "%X1%"=="ERROR" SET "REGMSG=Service [%BASE_MEAT%] doesn't exist"&&CALL:PAD_LINE
IF "%SVC_CNT%"=="1" IF "%X1%"=="%ENDQ%" SET "REGMSG=Service [%BASE_MEAT%] doesn't exist"&&CALL:PAD_LINE
IF DEFINED REGMSG EXIT /B
SET SVC_CMD1=REG DELETE "%X1%" /F&&SET SVC_CMD2=REG ADD "%X1%" /V "ImagePath" /T REG_EXPAND_SZ /D "NUL" /F
IF NOT "%BRUTE_FORCE%"=="ENABLED" %SVC_CMD1%>NUL 2>&1
IF NOT "%BRUTE_FORCE%"=="ENABLED" %SVC_CMD2%>NUL 2>&1
IF "%BRUTE_FORCE%"=="ENABLED" ECHO %SVC_CMD1%>"%PROG_SOURCE%\$BRUTE.CMD"
IF "%BRUTE_FORCE%"=="ENABLED" ECHO %SVC_CMD2%>>"%PROG_SOURCE%\$BRUTE.CMD"
IF "%BRUTE_FORCE%"=="ENABLED" ECHO EXIT>>"%PROG_SOURCE%\$BRUTE.CMD"
IF "%BRUTE_FORCE%"=="ENABLED" SC START $BRUTE>NUL 2>&1
IF EXIST "$REG1" DEL /F "$REG1">NUL
EXIT /B
:TASK_HUNT
CALL:IF_LIVE1
REG QUERY "%HIVE_SOFTWARE%\Microsoft\Windows NT\CurrentVersion\Schedule\TaskCache\Tree\%BASE_MEAT%" /F Id /c /e /s>$REG1 2>&1
IF EXIST "%PROG_SOURCE%\$BRUTE.CMD" DEL /F "%PROG_SOURCE%\$BRUTE.CMD">NUL
SET "TASK_GO="&&SET "TASK_CNT="&&FOR /F "TOKENS=1-9* DELIMS={}:" %%a IN ($REG1) DO (IF "%%a"=="    Id    REG_SZ    " SET "TASK_GO=1")
IF NOT DEFINED TASK_GO SET "REGMSG=Task [%BASE_MEAT%] doesn't exist"&&GOTO:TASK_SKIP
SET "TASK_CNT="&&CALL SET "X0LAST="&&FOR /F "TOKENS=1-9* DELIMS={}:" %%a IN ($REG1) DO (IF NOT "%%a"=="" CALL SET /A "TASK_CNT+=1"&&CALL SET "X1=%%a"&&CALL SET "X2=%%b"&&CALL:TASKBBQ&&CALL:TASK_CHK)
:TASK_SKIP
IF NOT DEFINED REGMSG ECHO                 [The operation completed successfully]&&CALL:PAD_LINE
IF DEFINED REGMSG ECHO %REGMSG%&&CALL:PAD_LINE
IF EXIST "%PROG_SOURCE%\$BRUTE.CMD" DEL /F "%PROG_SOURCE%\$BRUTE.CMD">NUL
IF EXIST "$REG1" DEL /F "$REG1">NUL
IF EXIST "$REG2" DEL /F "$REG2">NUL
EXIT /B
:TASK_CHK
REG QUERY "%HIVE_SOFTWARE%\Microsoft\Windows NT\CurrentVersion\Schedule\TaskCache\Tree\%BASE_MEAT%" /F Id /c /e /s>$REG2 2>&1
SET "REGMSG="&&SET "TASK_CNT="&&FOR /F "TOKENS=1-9* DELIMS={}:" %%a IN ($REG2) DO (IF "%%a"=="    Id    REG_SZ    " CALL SET "REGMSG=            [The operation did NOT complete successfully]")
EXIT /B
:TASKBBQ
IF "%X1%"=="%ENDQ%" EXIT /B
IF "%BASE_MEAT%"=="%X0LAST%" EXIT /B
SET "REGMSG="&&IF NOT "%BASE_MEAT%"=="%X0LAST%" ECHO Deleting Task [%BASE_MEAT%]...&&CALL:PAD_LINE&&SET "X0LAST=%BASE_MEAT%"
IF "%TASK_CNT%"=="1" IF "%X1%"=="ERROR" SET "REGMSG=Task [%BASE_MEAT%] doesn't exist"&&CALL:PAD_LINE
IF "%TASK_CNT%"=="1" IF "%X1%"=="%ENDQ%" SET "REGMSG=Task [%BASE_MEAT%] doesn't exist"&&CALL:PAD_LINE
IF DEFINED REGMSG EXIT /B
SET TASK_CMD1=REG DELETE "%X1%" /F&&SET TASK_CMD2=REG DELETE "%HIVE_SOFTWARE%\Microsoft\Windows NT\CurrentVersion\Schedule\TaskCache\Tasks\{%X2%}" /F
IF NOT "%BRUTE_FORCE%"=="ENABLED" IF NOT "%X1%"=="    Id    REG_SZ    " %TASK_CMD1%>NUL 2>&1
IF NOT "%BRUTE_FORCE%"=="ENABLED" IF "%X1%"=="    Id    REG_SZ    " %TASK_CMD2%>NUL 2>&1
IF "%BRUTE_FORCE%"=="ENABLED" IF NOT "%X1%"=="    Id    REG_SZ    " ECHO %TASK_CMD1%>"%PROG_SOURCE%\$BRUTE.CMD"
IF "%BRUTE_FORCE%"=="ENABLED" IF "%X1%"=="    Id    REG_SZ    " ECHO %TASK_CMD2%>>"%PROG_SOURCE%\$BRUTE.CMD"
IF "%BRUTE_FORCE%"=="ENABLED" ECHO EXIT>>"%PROG_SOURCE%\$BRUTE.CMD"
IF "%BRUTE_FORCE%"=="ENABLED" SC START $BRUTE>NUL 2>&1
IF EXIST "$REG1" DEL /F "$REG1">NUL
EXIT /B
:SETUPCOMPLETE_CREATE
CALL:IF_LIVE1
IF NOT DEFINED SETUPCOMPLETE_INITIAL CALL:SETUPCOMPLETE_INITIAL
IF NOT DEFINED BASE_MEAT EXIT /B
ECHO Copying Package [%BASE_MEAT%] for SetupComplete...&&CALL:PAD_LINE
IF NOT EXIST "%PACK_FOLDER%\%BASE_MEAT%" ECHO %PACK_FOLDER%\%BASE_MEAT% is missing&&CALL:PAD_LINE
IF EXIST "%PACK_FOLDER%\%BASE_MEAT%" COPY /Y "%PACK_FOLDER%\%BASE_MEAT%" "%APPLYDIR_MASTER%\$">NUL
IF EXIST "%PACK_FOLDER%\%BASE_MEAT%" ECHO {PACKAGE}{%BASE_MEAT%}{IMAGE-APPLY}>>"%APPLYDIR_MASTER%\$\SETUPCOMPLETE.LST"
EXIT /B
:SETUPCOMPLETE_INITIAL
SET "SETUPCOMPLETE_INITIAL=1"
IF NOT EXIST "%APPLYDIR_MASTER%\$" MD "%APPLYDIR_MASTER%\$">NUL 2>&1
COPY /Y "%PROG_FOLDER%\$HAZZAM.CMD" "%APPLYDIR_MASTER%\$">NUL 2>&1
ECHO EXEC-LIST>"%APPLYDIR_MASTER%\$\SetupComplete.LST"
IF NOT EXIST "%APPLYDIR_MASTER%\WINDOWS\Setup\Scripts" MD "%WINTAR%\Setup\Scripts">NUL 2>&1
ECHO;%%SYSTEMDRIVE%%\$\$HAZZAM.CMD -IMAGEMGR -INSTALL -LIST SetupComplete.LST>"%WINTAR%\Setup\Scripts\SetupComplete.cmd"
ECHO;EXIT 0 >>"%WINTAR%\Setup\Scripts\SetupComplete.cmd"
CALL:PAD_LINE&&ECHO                        SetupComplete Preparation&&CALL:PAD_LINE
EXIT /B
:RUNONCE_CREATE
CALL:IF_LIVE1
IF NOT DEFINED RUNONCE_INITIAL CALL:RUNONCE_INITIAL
IF NOT DEFINED BASE_MEAT EXIT /B
ECHO Copying Package [%BASE_MEAT%] for RunOnce...&&CALL:PAD_LINE
IF NOT EXIST "%PACK_FOLDER%\%BASE_MEAT%" ECHO %PACK_FOLDER%\%BASE_MEAT% is missing&&CALL:PAD_LINE
IF EXIST "%PACK_FOLDER%\%BASE_MEAT%" COPY /Y "%PACK_FOLDER%\%BASE_MEAT%" "%APPLYDIR_MASTER%\$">NUL
IF EXIST "%PACK_FOLDER%\%BASE_MEAT%" ECHO {PACKAGE}{%BASE_MEAT%}{IMAGE-APPLY}>>"%APPLYDIR_MASTER%\$\RunOnce.LST"
EXIT /B
:RUNONCE_INITIAL
SET "RUNONCE_INITIAL=1"
IF NOT EXIST "%APPLYDIR_MASTER%\$" MD "%APPLYDIR_MASTER%\$">NUL 2>&1
COPY /Y "%PROG_FOLDER%\$HAZZAM.CMD" "%APPLYDIR_MASTER%\$">NUL 2>&1
ECHO EXEC-LIST>"%APPLYDIR_MASTER%\$\RunOnce.LST"
Reg.exe add "%HIVE_SOFTWARE%\Microsoft\Windows\CurrentVersion\RunOnce" /v "Runonce" /t REG_EXPAND_SZ /d "%%WINDIR%%\Setup\Scripts\RunOnce.cmd" /f>NUL 2>&1
IF NOT EXIST "%APPLYDIR_MASTER%\WINDOWS\Setup\Scripts" MD "%WINTAR%\Setup\Scripts">NUL 2>&1
ECHO;%%SYSTEMDRIVE%%\$\$HAZZAM.CMD -IMAGEMGR -INSTALL -LIST RunOnce.LST>"%WINTAR%\Setup\Scripts\RunOnce.cmd"
ECHO;EXIT 0 >>"%WINTAR%\Setup\Scripts\RunOnce.cmd"
CALL:PAD_LINE&&ECHO                           RunOnce Preparation&&CALL:PAD_LINE
EXIT /B
:PACK_INSTALL
CALL:PAD_LINE&&ECHO.                         Package-Manager Start&&CALL:PAD_LINE
IF "%CAME_FROM%"=="COMMAND" IF NOT EXIST "%IMAGE_PACK%" ECHO IMAGE-APPLY/RUN-ONCE/SETUP-COMPLETE LISTS ONLY
IF NOT EXIST "%IMAGE_PACK%" CALL:PAD_LINE&&ECHO %IMAGE_PACK% is missing&&CALL:PAD_LINE&&GOTO:PACK_INSTALL_FINISH
SET "SCRATCH_PACK=%PROG_SOURCE%\ScratchPack"
SET "PACK_BAD=The operation did NOT complete successfully"
SET "PACK_GOOD=The operation completed successfully"
IF EXIST "%SCRATCH_PACK%" DISM /cleanup-MountPoints>NUL 2>&1
IF EXIST "%SCRATCH_PACK%" RD /S /Q "%SCRATCH_PACK%">NUL 2>&1
IF NOT EXIST "%SCRATCH_PACK%" MD "%SCRATCH_PACK%">NUL 2>&1
FOR %%a in (PackName PackType PackDesc PackTag REG_KEY REG_VAL RUN_MOD REG_DAT) DO (CALL SET "%%a=")
FOR %%G in ("%IMAGE_PACK%") DO SET "PackExt=%%~xG"
FOR %%G in (M A B U S C) DO (CALL SET "PackExt=%%PackExt:%%G=%%G%%")
IF "%PackExt%"==".CAB" SET "PackType=DRIVER"&&SET "PackName=%IMAGE_PACK%"
IF "%PackExt%"==".MSU" SET "PackType=DRIVER"&&SET "PackName=%IMAGE_PACK%"
IF NOT "%PackExt%"==".$PK" GOTO:PACK_JUMP
DISM /ENGLISH /APPLY-IMAGE /IMAGEFILE:"%IMAGE_PACK%" /INDEX:2 /APPLYDIR:"%SCRATCH_PACK%" >NUL 2>&1
FOR /F "eol=- TOKENS=1-2 DELIMS==" %%a in (%SCRATCH_PACK%\PACKAGE.$HZ) DO (IF NOT "%%a"=="   " SET "%%a=%%b")
CALL:PACK_PERM
IF DEFINED PACK_PERM IF NOT DEFINED PACK_PASS GOTO:PACK_INSTALL_FINISH
IF "%GET_WIM_INFO%"=="1" GOTO:PACK_INSTALL_FINISH
ECHO Extracting %IMAGE_PACK%..&&CALL:PAD_LINE
DISM /ENGLISH /APPLY-IMAGE /IMAGEFILE:"%IMAGE_PACK%" /INDEX:1 /APPLYDIR:"%SCRATCH_PACK%">NUL
:PACK_JUMP
IF DEFINED LIVE_APPLY IF "%PackType%"=="DRIVER" CALL:MOUNT_INT
IF DEFINED LIVE_APPLY IF "%PackType%"=="SCRIPTED" CALL:MOUNT_INT
IF NOT DEFINED LIVE_APPLY IF "%PackType%"=="DRIVER" CALL:MOUNT_MIX
IF NOT DEFINED LIVE_APPLY IF "%PackType%"=="SCRIPTED" CALL:MOUNT_EXT
IF NOT DEFINED LIVE_APPLY IF "%PackTag%"=="DISM" CALL:MOUNT_MIX
ECHO Running [NAME[%PackName%] [EXT[%PackExt%] [DESC[%PackDesc%]&&CALL:PAD_LINE
IF "%PackExt%"==".CAB" EXPAND "%IMAGE_PACK%" -F:* "%SCRATCH_PACK%" >NUL 2>&1
IF "%PackExt%"==".MSU" DISM /ENGLISH /%APPLY_TARGET% /ADD-PACKAGE /PACKAGEPATH:"%IMAGE_PACK%" >$DRVR
IF "%PackExt%"==".MSU" SET "DISMSG="&&FOR /F "TOKENS=1 DELIMS=." %%1 in ($DRVR) DO (IF "%%1"=="%PACK_GOOD%" CALL SET DISMSG=1)
IF "%PackExt%"==".MSU" IF DEFINED DISMSG CALL ECHO                 [%PACK_GOOD%]
IF "%PackExt%"==".MSU" IF NOT DEFINED DISMSG CALL ECHO              [%PACK_BAD%]
IF "%PackExt%"==".MSU" GOTO:PACK_INSTALL_FINISH
IF "%PackType%"=="SCRIPTED" CD /D "%SCRATCH_PACK%"&&CMD /C "%SCRATCH_PACK%\PACKAGE.CMD"
IF "%PackType%"=="SCRIPTED" CD /D "%~DP0"&&ECHO.
IF "%PackType%"=="DRIVER" FOR /F "TOKENS=*" %%a in ('DIR/S/B "%SCRATCH_PACK%\*.INF"') DO (
IF NOT EXIST "%%a\*" CALL:TITLECARD&&CALL:PAD_LINE&&ECHO Installing [NAME[%PackName%] [TYPE[%PackType%] [DESC[%PackDesc%]&&CALL:PAD_LINE&&CALL ECHO INF [%%a]&&CALL:PAD_LINE
IF NOT EXIST "%%a\*" IF NOT DEFINED LIVE_APPLY DISM /ENGLISH /%APPLY_TARGET% /ADD-DRIVER /DRIVER:"%%a" /ForceUnsigned>$DRVR
IF NOT EXIST "%%a\*" IF DEFINED LIVE_APPLY pnputil.exe /add-driver "%%a" /install>$DRVR
IF NOT EXIST "%%a\*" SET "DISMSG="&&FOR /F "TOKENS=1 DELIMS=." %%1 in ($DRVR) DO (
IF "%%1"=="Driver package added successfully" CALL SET DISMSG=1
IF "%%1"=="%PACK_GOOD%" CALL SET DISMSG=1)
IF NOT EXIST "%%a\*" IF DEFINED DISMSG CALL ECHO                 [%PACK_GOOD%]
IF NOT EXIST "%%a\*" IF NOT DEFINED DISMSG CALL ECHO              [%PACK_BAD%])
:PACK_INSTALL_FINISH
CALL:MOUNT_INT>NUL 2>&1
IF EXIST $DRVR DEL /F $DRVR>NUL
IF EXIST "%SCRATCH_PACK%" DISM /cleanup-MountPoints>NUL 2>&1
IF EXIST "%SCRATCH_PACK%" RD /S /Q "%SCRATCH_PACK%">NUL 2>&1
SET "GET_WIM_INFO="&&CALL:PAD_LINE&&ECHO.                          Package-Manager End&&CALL:PAD_LINE
EXIT /B
:PACK_PERM
SET "PACK_PERM="
IF NOT "%REG_KEY%"=="NULL" IF NOT "%REG_VAL%"=="NULL" IF NOT "%RUN_MOD%"=="NULL" IF NOT "%REG_DAT%"=="NULL" IF DEFINED REG_KEY IF DEFINED REG_VAL IF DEFINED RUN_MOD IF DEFINED REG_DAT SET "PACK_PERM=1"
IF NOT DEFINED PACK_PERM EXIT /B
IF DEFINED RUN_MOD IF NOT "%RUN_MOD%"=="NULL" IF NOT "%RUN_MOD%"=="EQU" IF NOT "%RUN_MOD%"=="NEQ" EXIT /B
CALL:MOUNT_INT>NUL 2>&1
IF DEFINED PACK_PERM CALL REG QUERY "%REG_KEY%" /V "%REG_VAL%" >$HZ
SET "COL1="&&IF DEFINED PACK_PERM IF EXIST $HZ FOR /F "TOKENS=* DELIMS=" %%1 in ($HZ) DO (SET COL1=%%1)
IF DEFINED PACK_PERM IF EXIST $HZ DEL $HZ>NUL 2>&1
IF "%RUN_MOD%"=="NULL" SET "RUN_MOD=EQU"
IF NOT DEFINED RUN_MOD SET "RUN_MOD=EQU"
SET "PACK_PASS="&&IF DEFINED PACK_PERM FOR %%a in (REG_SZ REG_DWORD REG_BINARY REG_EXPAND_SZ REG_MULTI_SZ REG_NONE) DO (IF "%COL1%" %RUN_MOD% "    %REG_VAL%    %%a    %REG_DAT%" SET "PACK_PASS=1")
EXIT /B
:IMAGEMGR_DISM_MENU
CLS&&SET "ERR_MSG="&&CALL:PAD_LINE&&ECHO                        DISM Image Maintainence&&CALL:PAD_LINE&&ECHO.&&ECHO  {1}RestoreHealth&&ECHO  {2}Cleanup&&ECHO  {3}ResetBase&&ECHO  {4}SPSuperseded&&ECHO  {5}CheckHealth&&ECHO  {6}AnalyzeComponentStore&&ECHO.&&SET "PROMPT_SET=DISM_MENU"&&CALL:PAD_LINE&&CALL:PAD_PREV&&CALL:PROMPT_SET
SET "DISM_OPER="&&IF "%DISM_MENU%"=="1" SET "DISM_OPER=RESTOREHEALTH"
IF "%DISM_MENU%"=="2" SET "DISM_OPER=CLEANUP"
IF "%DISM_MENU%"=="3" SET "DISM_OPER=RESETBASE"
IF "%DISM_MENU%"=="4" SET "DISM_OPER=SPSUPERSEDED"
IF "%DISM_MENU%"=="5" SET "DISM_OPER=CHECKHEALTH"
IF "%DISM_MENU%"=="6" SET "DISM_OPER=ANALYZE"
IF NOT DEFINED DISM_OPER EXIT /B
SET "MENU_INSERTA= [ @ ]\[Current-Environment]"&&SET "PICK=VHDX"&&CALL:FILE_PICK
IF NOT "%LIVE_APPLY%"=="1" IF NOT DEFINED $PICK EXIT /B
IF "%LIVE_APPLY%"=="1" IF NOT DEFINED DISCLAIMER CALL:DISCLAIMER&EXIT /B
IF "%LIVE_APPLY%"=="1" SET "APPLY_TARGET=ONLINE"&&GOTO:IMAGEMGR_DISM_OPER_JUMP
IF NOT DEFINED $PICK EXIT /B
IF EXIST "V:\" SET "ERR_MSG=Drive letter V:\ can NOT be in use. Unmount the Vdisk in use."&&GOTO:DISM_OPER_CLEANUP
SET "APPLY_TARGET=IMAGE:V:"&&SET "VDISK=%$PICK%"&&CALL:VDISK_ATTACH
IF NOT EXIST "V:\Windows" SET "ERR_MSG=             Vdisk error or Windows not installed on Vdisk."&&CALL:VDISK_DETACH&&GOTO:DISM_OPER_CLEANUP
:IMAGEMGR_DISM_OPER_JUMP
CALL:IF_LIVE2
CALL:IMAGEMGR_DISM_OPER
IF NOT DEFINED LIVE_APPLY CALL:VDISK_DETACH
:DISM_OPER_CLEANUP
IF NOT DEFINED LIVE_APPLY CALL:SCRATCH_DELETE
IF DEFINED ERR_MSG CALL:PAD_LINE&&ECHO %ERR_MSG%&&CALL:PAD_LINE
ECHO                         End of DISM-Operations&&CALL:PAD_LINE&&CALL:TITLECARD&&CALL:COLOR_CHK&&CALL:PAUSED
EXIT /B
:IMAGEMGR_DISM_OPER
CALL:PAD_LINE&&IF "%DISM_OPER%"=="RESTOREHEALTH" ECHO                      Executing DISM Restorehealth...&&CALL:PAD_LINE&&DISM /ENGLISH /%APPLY_TARGET% /CLEANUP-IMAGE /Restorehealth
IF "%DISM_OPER%"=="CLEANUP" ECHO                  Executing DISM StartComponentCleanup.....&&CALL:PAD_LINE&&DISM /ENGLISH /%APPLY_TARGET% /CLEANUP-IMAGE /StartComponentCleanup
IF "%DISM_OPER%"=="RESETBASE" ECHO                       Executing DISM ResetBase....&&CALL:PAD_LINE&&DISM /ENGLISH /%APPLY_TARGET% /CLEANUP-IMAGE /StartComponentCleanup /ResetBase
IF "%DISM_OPER%"=="SPSUPERSEDED" ECHO                      Executing DISM SPSuperseded...&&CALL:PAD_LINE&&DISM /ENGLISH /%APPLY_TARGET% /CLEANUP-IMAGE /SPSuperseded
IF "%DISM_OPER%"=="CHECKHEALTH" ECHO                      Executing DISM CheckHealth...&&CALL:PAD_LINE&&DISM /ENGLISH /%APPLY_TARGET% /CLEANUP-IMAGE /CHECKHEALTH
IF "%DISM_OPER%"=="ANALYZE" ECHO                  Executing DISM AnalyzeComponentStore...&&CALL:PAD_LINE&&DISM /ENGLISH /%APPLY_TARGET% /CLEANUP-IMAGE /AnalyzeComponentStore
ECHO.&&CALL:PAD_LINE&&CALL:TITLECARD&&CALL:COLOR_CHK
EXIT /B
:IMAGEMGR_INSPECT
SET "ERR_MSG="&&SET "REPORT_IMAGE="&&SET "LIVE_APPLY="&&SET "MENU_INSERTA= [ @ ]\[Current-Environment]"&&SET "NOECHO1=1"&&SET "PICK=VHDX"&&CALL:FILE_PICK
IF NOT "%LIVE_APPLY%"=="1" IF NOT DEFINED $PICK EXIT /B
IF "%LIVE_APPLY%"=="1" IF NOT DEFINED DISCLAIMER CALL:DISCLAIMER&EXIT /B
IF "%LIVE_APPLY%"=="1" SET "LIVE_APPLY=1"&&SET "REPORT_IMAGE=LIVE"&&GOTO:INSPECT_JUMP_LIVE
IF EXIST "V:\" SET "ERR_MSG=Drive letter V:\ can NOT be in use. Unmount the Vdisk in use."&&CALL:PAD_LINE&&ECHO.&&GOTO:INSPECT_CLEANUP
SET "REPORT_IMAGE=%$ELECT$%"&&CALL:MOUNT_EXT
CALL:SCRATCH_CREATE&&SET "VDISK=%IMAGE_FOLDER%\%REPORT_IMAGE%"&&CALL:VDISK_ATTACH
IF NOT EXIST "V:\Windows" SET "ERR_MSG=             Vdisk error or Windows not installed on Vdisk."&&CALL:VDISK_DETACH&&GOTO:INSPECT_CLEANUP
:INSPECT_JUMP_LIVE
CALL:PAD_LINE&&ECHO                             Performing scan...&&CALL:PAD_LINE&&CALL:TITLECARD&&CALL:IF_LIVE1
CALL:PAD_WRITE>"%PROG_SOURCE%\%REPORT_IMAGE%_REPORT.TXT"
ECHO STARTUP ITEMS REPORT>>"%PROG_SOURCE%\%REPORT_IMAGE%_REPORT.TXT"
CALL:PAD_WRITE>>"%PROG_SOURCE%\%REPORT_IMAGE%_REPORT.TXT"
IF EXIST "%APPLYDIR_MASTER%\WINDOWS\Setup\Scripts\SETUPCOMPLETE.CMD" ECHO.SetupComplete.cmd located in \WINDOWS\Setup\Scripts>>"%PROG_SOURCE%\%REPORT_IMAGE%_REPORT.TXT"
IF NOT EXIST "%APPLYDIR_MASTER%\WINDOWS\Setup\Scripts\SETUPCOMPLETE.CMD" ECHO.No SetupComplete.cmd exists in image>>"%PROG_SOURCE%\%REPORT_IMAGE%_REPORT.TXT"
IF EXIST "%APPLYDIR_MASTER%\WINDOWS\PANTHER\UNATTEND.XML" ECHO.Unattend.xml located in \WINDOWS\PANTHER>>"%PROG_SOURCE%\%REPORT_IMAGE%_REPORT.TXT"
IF NOT EXIST "%APPLYDIR_MASTER%\WINDOWS\PANTHER\UNATTEND.XML" ECHO.No Unattend.xml exists in image>>"%PROG_SOURCE%\%REPORT_IMAGE%_REPORT.TXT"
CALL:PAD_WRITE>>"%PROG_SOURCE%\%REPORT_IMAGE%_REPORT.TXT"
ECHO Searching: [%HIVE_USER%\SOFTWARE\Microsoft\Windows\CurrentVersion\Run]>>"%PROG_SOURCE%\%REPORT_IMAGE%_REPORT.TXT"
REG QUERY "%HIVE_USER%\Software\Microsoft\Windows\CurrentVersion\Run">>"%PROG_SOURCE%\%REPORT_IMAGE%_REPORT.TXT" 2>&1
ECHO Searching: [%HIVE_USER%\SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnce]>>"%PROG_SOURCE%\%REPORT_IMAGE%_REPORT.TXT"
REG QUERY "%HIVE_USER%\Software\Microsoft\Windows\CurrentVersion\RunOnce">>"%PROG_SOURCE%\%REPORT_IMAGE%_REPORT.TXT" 2>&1
ECHO Searching: [%HIVE_SOFTWARE%\Microsoft\Windows\CurrentVersion\Run]>>"%PROG_SOURCE%\%REPORT_IMAGE%_REPORT.TXT"
REG QUERY "%HIVE_SOFTWARE%\Microsoft\Windows\CurrentVersion\Run">>"%PROG_SOURCE%\%REPORT_IMAGE%_REPORT.TXT" 2>&1
ECHO Searching: [%HIVE_SOFTWARE%\Microsoft\Windows\CurrentVersion\RunOnce]>>"%PROG_SOURCE%\%REPORT_IMAGE%_REPORT.TXT"
REG QUERY "%HIVE_SOFTWARE%\Microsoft\Windows\CurrentVersion\RunOnce">>"%PROG_SOURCE%\%REPORT_IMAGE%_REPORT.TXT" 2>&1
ECHO Searching: [%HIVE_SOFTWARE%\Microsoft\Windows\CurrentVersion\RunOnceEx]>>"%PROG_SOURCE%\%REPORT_IMAGE%_REPORT.TXT"
REG QUERY "%HIVE_SOFTWARE%\Microsoft\Windows\CurrentVersion\RunOnceEx">>"%PROG_SOURCE%\%REPORT_IMAGE%_REPORT.TXT" 2>&1
ECHO Searching: [%HIVE_SOFTWARE%\Wow6432Node\Microsoft\Windows\CurrentVersion\Run]>>"%PROG_SOURCE%\%REPORT_IMAGE%_REPORT.TXT"
REG QUERY "%HIVE_SOFTWARE%\Wow6432Node\Microsoft\Windows\CurrentVersion\Run">>"%PROG_SOURCE%\%REPORT_IMAGE%_REPORT.TXT" 2>&1
ECHO Searching: [%HIVE_SOFTWARE%\Microsoft\Windows NT\CurrentVersion\Winlogon]>>"%PROG_SOURCE%\%REPORT_IMAGE%_REPORT.TXT"
REG QUERY "%HIVE_SOFTWARE%\Microsoft\Windows NT\CurrentVersion\Winlogon" /f Userinit /c /e /s>>"%PROG_SOURCE%\%REPORT_IMAGE%_REPORT.TXT" 2>&1
CALL:MOUNT_INT
IF NOT DEFINED LIVE_APPLY CALL:VDISK_DETACH
IF EXIST "$VC" DEL /F "$VC">NUL 2>&1
IF EXIST "$TSK" DEL /F "$TSK">NUL 2>&1
CALL:PAD_WRITE>>"%PROG_SOURCE%\%REPORT_IMAGE%_REPORT.TXT"
ECHO  Inspection Complete [%REPORT_IMAGE%] %DATE% %TIME% >>"%PROG_SOURCE%\%REPORT_IMAGE%_REPORT.TXT"
CALL:PAD_WRITE>>"%PROG_SOURCE%\%REPORT_IMAGE%_REPORT.TXT"
START NOTEPAD.EXE "%PROG_SOURCE%\%REPORT_IMAGE%_REPORT.TXT"
:INSPECT_CLEANUP
IF NOT DEFINED LIVE_APPLY CALL:SCRATCH_DELETE
IF DEFINED ERR_MSG CALL:PAD_LINE&&ECHO %ERR_MSG%
CALL:PAD_LINE&&ECHO                           Inspection Complete&&CALL:PAD_LINE&&CALL:PAUSED
EXIT /B
:PAD_WRITE
IF NOT DEFINED CHCP_TMP FOR /F "TOKENS=2 DELIMS=:" %%a IN ('CHCP') DO SET "CHCP_TMP=%%a"
CHCP 65001 >NUL&&ECHO;■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■&&CHCP %CHCP_TMP% >NUL
EXIT /B
:SCRATCH_CREATE
SET "SCRATCHDIR=%PROG_SOURCE%\Scratch"
IF EXIST "%SCRATCHDIR%" DISM /cleanup-MountPoints>NUL 2>&1
IF EXIST "%SCRATCHDIR%" RD /S /Q "%SCRATCHDIR%">NUL 2>&1
IF NOT EXIST "%SCRATCHDIR%" MD "%SCRATCHDIR%">NUL 2>&1
EXIT /B
:SCRATCH_DELETE
SET "SCRATCHDIR=%PROG_SOURCE%\Scratch"
IF EXIST "%SCRATCHDIR%" DISM /cleanup-MountPoints>NUL 2>&1
IF EXIST "%SCRATCHDIR%" ATTRIB -R -S -H "%SCRATCHDIR%" /S /D /L>NUL 2>&1
IF EXIST "%SCRATCHDIR%" RD /S /Q "%SCRATCHDIR%">NUL 2>&1
EXIT /B
:BOOT_IMPORT
IF EXIST "%SOURCE_LOCATION%\boot.wim" ECHO Importing BOOT.WIM...&&COPY /Y "%SOURCE_LOCATION%\boot.wim" "%PROG_SOURCE%\BootMedia.sav"&&ECHO 
EXIT /B
:SOURCE_IMPORT
IF EXIST "%SOURCE_LOCATION%\install.wim" ECHO.&&CALL:PAD_LINE&&ECHO                              Name of WIM?&&CALL:PAD_LINE&&CALL:PAD_PREV&&SET "PROMPT_SET=NEW_NAME"&&CALL:PROMPT_SET_ANY
IF DEFINED NEW_NAME ECHO Copying %NEW_NAME%.WIM...&&COPY /Y "%SOURCE_LOCATION%\install.wim" "%IMAGE_FOLDER%\%NEW_NAME%.WIM"&&SET "NEW_NAME="&&ECHO 
EXIT /B
:WINDRVUSR_INT
SET "APPLYDIR_MASTER=%SYSTEMDRIVE%"&&SET "CAPTUREDIR_MASTER=%SYSTEMDRIVE%"
SET "APPLY_TARGET=ONLINE"&&SET "DRVTAR=%SYSTEMDRIVE%"&&SET "WINTAR=%WINDIR%"&&SET "USRTAR=%USERPROFILE%"
EXIT /B
:WINDRVUSR_EXT
SET "APPLYDIR_MASTER=V:"&&SET "CAPTUREDIR_MASTER=V:"
SET "APPLY_TARGET=IMAGE:%APPLYDIR_MASTER%"&&SET "DRVTAR=%APPLYDIR_MASTER%"&&SET "WINTAR=%APPLYDIR_MASTER%\Windows"&&SET "USRTAR=%APPLYDIR_MASTER%\Users\Default"
EXIT /B
:HIVES_ATTACH
CALL:HIVES_DETACH >NUL 2>&1
SET "HIVE_USER=HKU\$ALLUSER"&&SET "HIVE_SOFTWARE=HKLM\$SOFTWARE"&&SET "HIVE_SYSTEM=HKLM\$SYSTEM"
REG LOAD HKU\$ALLUSER "V:\Users\Default\Ntuser.dat">NUL 2>&1
REG LOAD HKLM\$SOFTWARE "V:\WINDOWS\SYSTEM32\Config\SOFTWARE">NUL 2>&1
REG LOAD HKLM\$SYSTEM "V:\WINDOWS\SYSTEM32\Config\SYSTEM">NUL 2>&1
EXIT /B
:HIVES_DETACH
SET "HIVE_USER=HKCU"&&SET "HIVE_SOFTWARE=HKLM\SOFTWARE"&&SET "HIVE_SYSTEM=HKLM\SYSTEM"
REG UNLOAD HKU\$ALLUSER>NUL 2>&1
REG UNLOAD HKLM\$SOFTWARE>NUL 2>&1
REG UNLOAD HKLM\$SYSTEM>NUL 2>&1
EXIT /B
:MOUNT_INT
IF "%MOUNT%"=="INT" EXIT /B
SET "MOUNT=INT"&&CALL:WINDRVUSR_INT&&CALL:HIVES_DETACH
EXIT /B
:MOUNT_EXT
IF "%MOUNT%"=="EXT" EXIT /B
SET "MOUNT=EXT"&&CALL:WINDRVUSR_EXT&&CALL:HIVES_ATTACH
EXIT /B
:MOUNT_MIX
IF "%MOUNT%"=="MIX" EXIT /B
SET "MOUNT=MIX"&&CALL:WINDRVUSR_EXT&&CALL:HIVES_DETACH
EXIT /B
REM IMAGEPROC_IMAGEPROC_IMAGEPROC_IMAGEPROC_IMAGEPROC_IMAGEPROC_IMAGEPROC_IMAGEPROC_
:IMAGEPROC_START
REM IMAGEPROC_IMAGEPROC_IMAGEPROC_IMAGEPROC_IMAGEPROC_IMAGEPROC_IMAGEPROC_IMAGEPROC_
@ECHO OFF&&CLS&&CALL:SETS_HANDLER&&CALL:COLOR_CHK&&CALL:TITLE_GNC&&CALL:CLEAN
CALL:PAD_LINE&&ECHO                            Image Processing&&CALL:PAD_LINE
IF "%SOURCE_TYPE%"=="WIM" IF NOT "%WIM_SOURCE%"=="SELECT" CALL:WIM_INDEX_QUERY
IF NOT DEFINED WIM_DESC SET "WIM_DESC=NULL"&&SET "WIM_INDEX=1"
IF "%SOURCE_TYPE%"=="WIM" IF "%TARGET_TYPE%"=="VHDX" ECHO   WIM {X} VHDX - Restore Windows-Image to VHDX&&CALL:PAD_LINE
IF "%SOURCE_TYPE%"=="WIM" IF "%TARGET_TYPE%"=="WIM" ECHO   WIM {X} WIM - Isolate Index&&CALL:PAD_LINE
IF "%SOURCE_TYPE%"=="VHDX" IF "%TARGET_TYPE%"=="WIM" ECHO   VHDX {X} WIM - Create Backup-Image of VHDX&&CALL:PAD_LINE
IF "%SOURCE_TYPE%"=="VHDX" ECHO   AVAILABLE VHDX'S:&&SET "BLIST=VHDX"&&CALL:FILE_LIST&&CALL:PAD_LINE&&ECHO. {S}OURCE-VHDX] [%VHDX_SOURCE%]&&CALL:PAD_LINE
IF "%SOURCE_TYPE%"=="WIM" ECHO   AVAILABLE WIM'S:&&SET "BLIST=WIM"&&CALL:FILE_LIST&&CALL:PAD_LINE&&ECHO. {S}OURCE-WIM] [%WIM_SOURCE%] {I}ndex[%WIM_INDEX%] [Edition[%WIM_DESC%]&&CALL:PAD_LINE
IF "%TARGET_TYPE%"=="VHDX" ECHO   EXISTING VHDX'S:&&SET "BLIST=VHDX"&&CALL:FILE_LIST&&CALL:PAD_LINE&&ECHO. {T}ARGET-VHDX] [%VHDX_TARGET%]      {G}o^^!  {V}Size[%VHDX_SIZE%MB] {Z}[%VHDX_XLVL%]&&CALL:PAD_LINE
IF "%TARGET_TYPE%"=="WIM" ECHO   EXISTING WIM'S:&&SET "BLIST=WIM"&&CALL:FILE_LIST&&CALL:PAD_LINE&&ECHO. {T}ARGET-WIM] [%WIM_TARGET%]      {G}o^^!     {Z}[X-LVL[%WIM_XLVL%]&&CALL:PAD_LINE
CALL:PAD_PREV&&CALL:MENU_SELECT
IF NOT DEFINED SELECT GOTO:PROG_MAIN
IF "%SELECT%"=="X" CALL:IMAGEPROC_SLOT
IF "%SELECT%"=="T" CALL:IMAGEPROC_PROMPT
IF "%SELECT%"=="Z" CALL:IMAGEPROC_XLVL
IF "%SELECT%"=="S" CALL:IMAGEPROC_PICK&&SET "SELECT="
IF "%SELECT%"=="V" CALL:IMAGEPROC_VSIZE&&SET "SELECT="
IF "%SELECT%"=="I" IF "%SOURCE_TYPE%"=="WIM" IF NOT "%WIM_SOURCE%"=="SELECT" CALL:WIM_INDEX
IF "%SELECT%"=="G" SET "CAME_FROM=IMAGE"&&CALL:IMAGEPROC&&CALL:PAUSED
GOTO:IMAGEPROC_START
:IMAGEPROC_XLVL
IF "%TARGET_TYPE%"=="WIM" CALL:WIM_XLVL
IF "%TARGET_TYPE%"=="VHDX" IF "%VHDX_XLVL%"=="COMPACT-OS" SET "VHDX_XLVL=DISABLED"&&EXIT /B
IF "%TARGET_TYPE%"=="VHDX" IF "%VHDX_XLVL%"=="DISABLED" SET "VHDX_XLVL=COMPACT-OS"&&EXIT /B
EXIT /B
:IMAGEPROC_VSIZE
SET "PROMPT_SET=VHDX_SIZE"&&CALL:PAD_LINE&&ECHO                               VHDX size?&&CALL:PAD_LINE&&CALL:PAD_PREV&&CALL:PROMPT_SET
SET "SELECT=%VHDX_SIZE%"&&SET "CHECK=NUM"&&CALL:CHECK
IF DEFINED ERROR SET "VHDX_SIZE=25600"
EXIT /B
:IMAGEPROC_PROMPT
IF "%TARGET_TYPE%"=="WIM" CALL:PAD_LINE&&ECHO                              Name of WIM?&&CALL:PAD_LINE&&CALL:PAD_PREV&&CALL SET "PROMPT_SET=WIM_TARGET"&&CALL:PROMPT_SET_ANY
IF "%TARGET_TYPE%"=="WIM" IF DEFINED WIM_TARGET CALL SET "WIM_TARGET=%WIM_TARGET%.WIM"
IF "%TARGET_TYPE%"=="VHDX" CALL:PAD_LINE&&ECHO                             Name of VHDX?&&CALL:PAD_LINE&&CALL:PAD_PREV&&CALL SET "PROMPT_SET=VHDX_TARGET"&&CALL:PROMPT_SET_ANY
IF "%TARGET_TYPE%"=="VHDX" IF DEFINED VHDX_TARGET CALL SET "VHDX_TARGET=%VHDX_TARGET%.VHDX"
EXIT /B
:IMAGEPROC_PICK
IF "%SOURCE_TYPE%"=="WIM" SET "PICK=WIM"&&CALL:FILE_PICK
IF "%SOURCE_TYPE%"=="VHDX" SET "PICK=VHDX"&&CALL:FILE_PICK
CALL SET "%SOURCE_TYPE%_SOURCE=%$ELECT$%"
EXIT /B
:IMAGEPROC_SLOT
SET /A "IMAGEPROC_SLOT+=1"
IF "%IMAGEPROC_SLOT%" GTR "3" SET "IMAGEPROC_SLOT=1"
IF "%IMAGEPROC_SLOT%"=="1" SET "SOURCE_TYPE=WIM"&&SET "TARGET_TYPE=VHDX"
IF "%IMAGEPROC_SLOT%"=="2" SET "SOURCE_TYPE=VHDX"&&SET "TARGET_TYPE=WIM"
IF "%IMAGEPROC_SLOT%"=="3" SET "SOURCE_TYPE=WIM"&&SET "TARGET_TYPE=WIM"
EXIT /B
:WIM_XLVL
SET /A "WIM_XXX+=1"
IF "%WIM_XXX%" GTR "3" SET "WIM_XXX=1"
IF "%WIM_XXX%"=="1" SET "WIM_XLVL=FAST"
IF "%WIM_XXX%"=="2" SET "WIM_XLVL=MAX"
IF "%WIM_XXX%"=="3" SET "WIM_XLVL=NONE"
EXIT /B
:WIM_INDEX
SET /A "WIM_INDEX+=1"
IF "%WIM_INDEX%"=="20" SET "WIM_INDEX=1"
CALL:WIM_INDEX_QUERY
EXIT /B
:WIM_INDEX_QUERY
SET "WIM_DESC="&&DISM /ENGLISH /Get-ImageInfo /ImageFile:"%IMAGE_FOLDER%\%WIM_SOURCE%" /Index:%WIM_INDEX% >"$DISM"
FOR /F "TOKENS=1-5 DELIMS=<> " %%a in ($DISM) DO (IF "%%a"=="Edition" SET "WIM_DESC=%%c")
FOR /F "TOKENS=1-5 DELIMS=<> " %%a in ($DISM) DO (IF "%%a"=="Languages" IF NOT "%%c"=="" SET "WIM_SOURCE=SELECT")
IF NOT DEFINED WIM_DESC SET "WIM_DESC=NULL"&&SET "WIM_INDEX=1"
IF EXIST "$DISM" DEL /Q /F "$DISM">NUL
EXIT /B
REM IMAGEPROC_IMAGEPROC_IMAGEPROC_IMAGEPROC_IMAGEPROC_IMAGEPROC_
:IMAGEPROC
REM IMAGEPROC_IMAGEPROC_IMAGEPROC_IMAGEPROC_IMAGEPROC_IMAGEPROC_
CALL:PAD_LINE&&ECHO                         Image-Processing Start&&CALL:PAD_LINE&&SET "ERR_MSG="&&SET "APPLYDIR_MASTER=V:"&&SET "CAPTUREDIR_MASTER=V:"&&SET "VHDX_MB=%VHDX_SIZE%"
IF "%TARGET_TYPE%"=="VHDX" IF EXIST "%IMAGE_FOLDER%\%VHDX_TARGET%" SET "ERR_MSG=Target %VHDX_TARGET% exists. Try another name or rename the existing file."&&GOTO:IMAGEPROC_CLEANUP
IF "%TARGET_TYPE%"=="WIM" IF EXIST "%IMAGE_FOLDER%\%WIM_TARGET%" SET "ERR_MSG=Target %WIM_TARGET% exists. Try another name or rename the existing file."&&GOTO:IMAGEPROC_CLEANUP
IF "%SOURCE_TYPE%"=="VHDX" IF "%VHDX_SOURCE%"=="SELECT" SET "ERR_MSG=Source %SOURCE_TYPE% not set."&&GOTO:IMAGEPROC_CLEANUP
IF "%TARGET_TYPE%"=="VHDX" IF "%VHDX_TARGET%"=="SELECT" SET "ERR_MSG=Target %TARGET_TYPE% not set."&&GOTO:IMAGEPROC_CLEANUP
IF "%SOURCE_TYPE%"=="WIM" IF "%WIM_SOURCE%"=="SELECT" SET "ERR_MSG=Source %SOURCE_TYPE% not set."&&GOTO:IMAGEPROC_CLEANUP
IF "%TARGET_TYPE%"=="WIM" IF "%WIM_TARGET%"=="SELECT" SET "ERR_MSG=Target %TARGET_TYPE% not set."&&GOTO:IMAGEPROC_CLEANUP
IF EXIST "V:\" SET "ERR_MSG=Drive letter V:\ can NOT be in use. Unmount the Vdisk in use."&&GOTO:IMAGEPROC_CLEANUP
IF NOT DEFINED WIM_INDEX SET "WIM_INDEX=1"
IF NOT DEFINED WIM_XLVL SET "WIM_XLVL=FAST"
IF NOT "%VHDX_XLVL%"=="COMPACT-OS" SET "COMPACT="
IF "%VHDX_XLVL%"=="COMPACT-OS" SET "COMPACT= /COMPACT"
CALL:VDISK_DETACH&&CALL:SCRATCH_CREATE
IF "%SOURCE_TYPE%"=="VHDX" SET "VDISK=%IMAGE_FOLDER%\%VHDX_SOURCE%"
IF "%TARGET_TYPE%"=="VHDX" SET "VDISK=%IMAGE_FOLDER%\%VHDX_TARGET%"
IF "%SOURCE_TYPE%"=="WIM" SET "IMAGE_SRC=%IMAGE_FOLDER%\%WIM_SOURCE%"
IF "%TARGET_TYPE%"=="WIM" SET "IMAGE_TGT=%IMAGE_FOLDER%\%WIM_TARGET%"
IF "%SOURCE_TYPE%"=="VHDX" IF "%TARGET_TYPE%"=="WIM" CALL:VDISK_ATTACH
IF "%SOURCE_TYPE%"=="WIM" IF "%TARGET_TYPE%"=="VHDX" CALL:VDISK_CREATE
IF "%SOURCE_TYPE%"=="WIM" IF "%TARGET_TYPE%"=="WIM" SET "VDISK=%SCRATCHDIR%\SCRATCH.VHDX"&&SET "VHDX_MB=20000"&&CALL:VDISK_CREATE
IF NOT EXIST "V:\" SET "ERR_MSG=Virtual Disk Error. If VHDX refuses mounting, reboot and try again."&&CALL:VDISK_DETACH&&GOTO:IMAGEPROC_CLEANUP
CALL:TITLECARD&&IF NOT DEFINED WIM_DESC SET "WIM_DESC=$HAZZAM"
IF "%SOURCE_TYPE%"=="WIM" IF "%TARGET_TYPE%"=="VHDX" DISM /ENGLISH /APPLY-IMAGE /IMAGEFILE:"%IMAGE_SRC%" /INDEX:%WIM_INDEX% /APPLYDIR:"%APPLYDIR_MASTER%"%COMPACT%
IF "%SOURCE_TYPE%"=="WIM" IF "%TARGET_TYPE%"=="WIM" DISM /ENGLISH /APPLY-IMAGE /IMAGEFILE:"%IMAGE_SRC%" /INDEX:%WIM_INDEX% /APPLYDIR:"%APPLYDIR_MASTER%"
IF "%TARGET_TYPE%"=="WIM" IF NOT EXIST "%APPLYDIR_MASTER%\*" CALL:VDISK_DETACH&&DEL /F /Q "%IMAGE_FOLDER%\%WIM_TARGET%">NUL 2>&1
IF "%TARGET_TYPE%"=="VHDX" IF NOT EXIST "%APPLYDIR_MASTER%\*" CALL:VDISK_DETACH&&DEL /F /Q "%IMAGE_FOLDER%\%VHDX_TARGET%">NUL 2>&1
IF NOT EXIST "%APPLYDIR_MASTER%\*" CALL:PAD_LINE&&SET "ERR_MSG=Source Extraction Error. If source refuses to extract, reboot and try again."&&GOTO:IMAGEPROC_CLEANUP
IF "%TARGET_TYPE%"=="WIM" DISM /ENGLISH /CAPTURE-IMAGE /CAPTUREDIR:"%CAPTUREDIR_MASTER%" /IMAGEFILE:"%IMAGE_TGT%" /COMPRESS:%WIM_XLVL% /NAME:%WIM_DESC%
CALL:VDISK_DETACH>NUL 2>&1
:IMAGEPROC_CLEANUP
IF "%CAME_FROM%"=="IMAGE" SET "CAME_FROM="&&ECHO 
CALL:SCRATCH_DELETE
IF DEFINED ERR_MSG ECHO  %ERR_MSG%&&ECHO.
CALL:PAD_LINE&&ECHO                        Image-Processing Complete&&CALL:PAD_LINE
EXIT /B
REM DISKMGR_DISKMGR_DISKMGR_DISKMGR_DISKMGR_DISKMGR_DISKMGR_
:DISKMGR_START
REM DISKMGR_DISKMGR_DISKMGR_DISKMGR_DISKMGR_DISKMGR_DISKMGR_
@ECHO OFF&&CLS&&CALL:SETS_HANDLER&&CALL:COLOR_CHK&&CALL:TITLE_GNC&&CALL:CLEAN&&SET "DISK_LETTER="&&SET "DISK_MSG="&&SET "MENU_FLAG="&&SET "ERROR="
CALL:PAD_LINE&&ECHO                             Disk Management&&CALL:PAD_LINE&&CALL:DISK_QUERY&&CALL:PAD_LINE
IF NOT "%BOOT_IMAGE%"=="NONE" ECHO  [DISK] {B}oot^^! {I}nspect {E}rase {#}ChangeUID {U}SB {*}NextBoot[%BOOT_PRIORITY%]&&CALL:PAD_LINE
IF "%BOOT_IMAGE%"=="NONE" ECHO  [DISK]  {I}nspect  {E}rase  {#}Change UID  {U}SB {*}NextBoot[%BOOT_PRIORITY%]&&CALL:PAD_LINE
ECHO  [PARTITION]  {C}reate  {D}elete  {F}ormat  {M}ount/Unmount  {L}ock&&CALL:PAD_LINE
CALL:PAD_PREV&&CALL:MENU_SELECT
IF NOT DEFINED SELECT GOTO:PROG_MAIN
IF "%SELECT%"=="*" CALL:BOOT_PRIORITY
IF "%SELECT%"=="B" IF NOT "%BOOT_IMAGE%"=="NONE" GOTO:$ETUP_START
IF "%SELECT%"=="$" IF NOT "%BOOT_IMAGE%"=="NONE" GOTO:$ETUP_START
IF "%SELECT%"=="U" RunDll32.exe shell32.dll,Control_RunDLL hotplug.dll
IF "%SELECT%"=="M" CALL:LETTER_GET&&CALL:DISKMGR_MOUNT_PROMPT&&SET "SELECT="
IF "%SELECT%"=="I" CALL:DISK_MENU&&CALL:DISKMGR_INSPECT&&CALL:DISK_PART_END&&SET "SELECT="
IF "%SELECT%"=="E" SET "MENU_FLAG=1"&&CALL:DISKMGR_ERASE&&CALL:DISK_PART_END&&SET "SELECT="
IF "%SELECT%"=="C" SET "MENU_FLAG=1"&&CALL:DISK_MENU&&CALL:DISKMGR_CREATE&&CALL:DISK_PART_END&&SET "SELECT="
IF "%SELECT%"=="#" SET "MENU_FLAG=1"&&CALL:DISK_MENU&&CALL:DISKMGR_CHANGEID&&CALL:DISK_PART_END&&SET "SELECT="
IF "%SELECT%"=="L" SET "MENU_FLAG=1"&&CALL:DISK_MENU&&CALL:PART_GET&&CALL:DISKMGR_LOCK&&CALL:DISK_PART_END&&SET "SELECT="
IF "%SELECT%"=="D" SET "MENU_FLAG=1"&&CALL:DISK_MENU&&CALL:PART_GET&&CALL:DISKMGR_DELETE&&CALL:DISK_PART_END&&SET "SELECT="
IF "%SELECT%"=="F" SET "MENU_FLAG=1"&&CALL:DISK_MENU&&CALL:PART_GET&&CALL:DISKMGR_FORMAT&&CALL:DISK_PART_END&&SET "SELECT="
IF EXIST "%TEMP%\DISK_TARGET" DEL /Q /F "%TEMP%\DISK_TARGET">NUL 2>&1
GOTO:DISKMGR_START
:BOOT_PRIORITY
IF "%BOOT_PRIORITY%"=="NULL" SET "BOOT_TARGET=GET"&&CALL:BOOT_TARGET_TOGGLE&&EXIT /B
IF "%BOOT_PRIORITY%"=="RECOVERY" SET "BOOT_TARGET=VHDX"&&CALL:BOOT_TARGET_TOGGLE&&EXIT /B
IF "%BOOT_PRIORITY%"=="VHDX" SET "BOOT_TARGET=RECOVERY"&&CALL:BOOT_TARGET_TOGGLE&&EXIT /B
EXIT /B
:DISK_PART_END
IF DEFINED ERROR EXIT /B
IF DEFINED DISK_MSG CALL:PAD_LINE&&ECHO %DISK_MSG%
CALL:PAD_LINE&&ECHO	                      End of Disk-Part Operation&&CALL:PAD_LINE&&CALL:PAUSED
EXIT /B
:LETTER_GET
CALL:PAD_LINE&&ECHO                           Which Drive Letter?&&CALL:PAD_LINE&&CALL:PAD_PREV&&CALL SET "PROMPT_SET=DISK_LETTER"&&CALL:PROMPT_SET
EXIT /B
:PART_GET
IF DEFINED ERROR EXIT /B
CALL:PAD_LINE&&ECHO                           Which Partition {#}?&&CALL:PAD_LINE&&CALL:PAD_PREV&&CALL:MENU_SELECT
SET "CHECK=NUM"&&CALL:CHECK&&SET "PART_NUMBER=%SELECT%"
EXIT /B
:PART_CREATE
IF EXIST "U:\" CALL:EFI_UNMOUNT
IF EXIST "S:\" CALL:REASSIGN_LETTER
CALL:DISKMGR_ERASE&&SET /A "PART_CNT+=1"
IF "%PART_CNT%" NEQ "3" SET "DEPLOY_MODE="
(ECHO.select disk %DISK_NUMBER%&&ECHO.create partition EFI size=1024&&ECHO.format quick fs=fat32 label="ESP"&&ECHO.assign letter=U noerr&&ECHO.create partition primary&&ECHO.format quick fs=ntfs&&ECHO.Exit)>"$DSK"&&DISKPART /s "$DSK"
(ECHO.select disk %DISK_NUMBER%&&ECHO.select partition 2&&ECHO.assign letter=S noerr&&ECHO.Exit)>"$DSK"&&DISKPART /s "$DSK"
IF EXIST "U:\" IF EXIST "S:\" EXIT /B
CALL:DISKMGR_ERASE
IF "%PART_CNT%" EQU "3" SET "DEPLOY_MODE=1"&&SET "BOOT_MSG=Drive incompatible, reverted to deploy-only drive."
(ECHO.select disk %DISK_NUMBER%&&ECHO.create partition primary size=1024&&ECHO.format quick fs=fat32 label="ESP"&&ECHO.assign letter=U noerr&&ECHO.create partition primary&&ECHO.format quick fs=ntfs&&ECHO.Exit)>"$DSK"&&DISKPART /s "$DSK"
IF "%PART_CNT%" LEQ "2" (ECHO.select disk %DISK_NUMBER%&&ECHO.select partition 1&&ECHO.set id=c12a7328-f81f-11d2-ba4b-00a0c93ec93b override&&ECHO.Exit)>"$DSK"&&DISKPART /s "$DSK"
(ECHO.select disk %DISK_NUMBER%&&ECHO.select partition 2&&ECHO.assign letter=S noerr&&ECHO.Exit)>"$DSK"&&DISKPART /s "$DSK"
IF EXIST "U:\" IF EXIST "S:\" EXIT /B
IF "%PART_CNT%" EQU "4" ECHO The drive is currently in use or incompatible. Continue to try?&&ECHO  {X}Continue {Enter}Abort&&CALL SET "PROMPT_SET=CONFIRM"&&CALL:PROMPT_SET
IF NOT "%CONFIRM%"=="X" SET "PART_ERR=1"
IF "%CONFIRM%"=="X" SET "PART_CNT=0"&&SET "CONFIRM="
IF DEFINED PART_ERR EXIT /B
GOTO:PART_CREATE
:DISKMGR_ERASE
IF "%MENU_FLAG%"=="1" CALL:PAD_LINE&&ECHO                            Which Disk {#}?&&CALL:PAD_LINE&&CALL:PAD_PREV&&CALL:MENU_SELECT
IF "%MENU_FLAG%"=="1" SET "MENU_FLAG="&&SET "CHECK=NUM"&&CALL:CHECK&&SET "DISK_NUMBER=%SELECT%"
IF DEFINED ERROR EXIT /B
IF NOT DEFINED DISK_NUMBER EXIT /B
FOR %%a in (0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15) DO (IF "%DISK_NUMBER%"=="%%a" CALL SET "GET_DISK_ID=%%DISKID_%%a%%")
(ECHO.select disk %DISK_NUMBER%&&ECHO.clean&&ECHO.convert gpt&&ECHO.select partition 1&&ECHO.delete partition override&&ECHO.Exit)>"$DSK"&&DISKPART /s "$DSK">NUL
(ECHO.select disk %DISK_NUMBER%&&ECHO.select partition 1&&ECHO.Assign letter=T noerr&&ECHO.Exit)>"$DSK"&&Diskpart /s "$DSK">NUL 2>&1
IF EXIST "T:\" (ECHO.select disk %DISK_NUMBER%&&ECHO.clean&&ECHO.convert gpt&&ECHO.select partition 1&&ECHO.delete partition override&&ECHO.Exit)>"$DSK"&&DISKPART /s "$DSK">NUL
CALL:DISKMGR_CHANGEID>NUL 2>&1
IF NOT EXIST "T:\" SET "DISK_MSG=All partitions on Disk %DISK_NUMBER% have been erased."
IF EXIST "T:\" SET "DISK_MSG=Disk %DISK_NUMBER% is currently in use - unplug disk - reboot into Windows - replug and try again."
IF EXIST "T:\" (ECHO.select VOLUME T&&ECHO.Remove letter=T noerr&&ECHO.Exit)>"$DSK"&&DISKPART /s "$DSK">NUL 2>&1
EXIT /B
:DISKMGR_INSPECT
IF DEFINED ERROR EXIT /B
IF NOT DEFINED DISK_NUMBER EXIT /B
(ECHO.select disk %DISK_NUMBER%&&ECHO.detail disk&&ECHO.list partition&&ECHO.Exit)>"$DSK"&&DISKPART /s "$DSK"&&ECHO 
EXIT /B
:DISKMGR_MOUNT_PROMPT
IF NOT DEFINED DISK_LETTER EXIT /B
IF EXIST "%DISK_LETTER%:\" CALL:PAD_LINE&&ECHO  UNMOUNTING [%DISK_LETTER%:\]&&CALL:PAD_LINE&&CALL:DISKMGR_UNMOUNT&&EXIT /B
IF NOT EXIST "%DISK_LETTER%:\" CALL:DISK_MENU
IF DEFINED DISK_NUMBER CALL:PART_GET
IF NOT DEFINED ERROR CALL:PAD_LINE&&ECHO  MOUNTING [%DISK_LETTER%:\]&&CALL:PAD_LINE&&CALL:DISKMGR_MOUNT
EXIT /B
:DISKMGR_MOUNT
FOR %%a in (DISK_NUMBER DISK_LETTER PART_NUMBER) DO (IF NOT DEFINED %%a EXIT /B)
(ECHO.select disk %DISK_NUMBER%&&ECHO.select partition %PART_NUMBER%&&ECHO.Assign letter=%DISK_LETTER% noerr&&ECHO.Exit)>"$DSK"&&Diskpart /s "$DSK">NUL 2>&1
IF NOT EXIST "%DISK_LETTER%:\" (ECHO.select disk %DISK_NUMBER%&&ECHO.select partition %PART_NUMBER%&&ECHO.gpt attributes=0x8000000000000000&&ECHO.Exit)>"$DSK"&&DISKPART /s "$DSK">NUL 2>&1
IF NOT EXIST "%DISK_LETTER%:\" (ECHO.select disk %DISK_NUMBER%&&ECHO.select partition %PART_NUMBER%&&ECHO.Assign letter=%DISK_LETTER% noerr&&ECHO.Exit)>"$DSK"&&DISKPART /s "$DSK">NUL 2>&1
IF EXIST "%DISK_LETTER%:\" SET "DISK_MSG=Partition %PART_NUMBER% on Disk %DISK_NUMBER% has been assigned letter %DISK_LETTER%."
IF NOT EXIST "%DISK_LETTER%:\" SET "DISK_MSG=ERROR: Partition %PART_NUMBER% on Disk %DISK_NUMBER% was not assigned letter %DISK_LETTER%."
ECHO 
EXIT /B
:DISKMGR_UNMOUNT
IF NOT DEFINED DISK_LETTER EXIT /B
(ECHO.select VOLUME %DISK_LETTER%&&ECHO.Remove letter=%DISK_LETTER% noerr&&ECHO.Exit)>"$DSK"&&DISKPART /s "$DSK"&&ECHO 
EXIT /B
:DISKMGR_CREATE
IF DEFINED ERROR EXIT /B
IF NOT DEFINED DISK_NUMBER EXIT /B
IF "%MENU_FLAG%"=="1" CALL:PAD_LINE&&ECHO             Enter a partition size. (0) Remainder of space &&CALL:PAD_LINE&&CALL:PAD_PREV&&CALL SET "PROMPT_SET=PART_SIZE"&&CALL:PROMPT_SET
IF "%MENU_FLAG%"=="1" SET "MENU_FLAG="&&SET "CHECK=NUM"&&SET "SELECT=%PART_SIZE%"&&CALL:CHECK
IF DEFINED ERROR EXIT /B
IF "%PART_SIZE%"=="0" SET "PART_SIZE="
IF NOT DEFINED PART_SIZE (ECHO.select disk %DISK_NUMBER%&&ECHO.create partition primary&&ECHO.format quick fs=ntfs&&ECHO.Exit)>"$DSK"&&DISKPART /s "$DSK"&&ECHO 
IF DEFINED PART_SIZE (ECHO.select disk %DISK_NUMBER%&&ECHO.create partition primary size=%PART_SIZE%&&ECHO.format quick fs=ntfs&&ECHO.Exit)>"$DSK"&&DISKPART /s "$DSK"&&ECHO 
EXIT /B
:DISKMGR_DELETE
IF DEFINED ERROR EXIT /B
FOR %%a in (DISK_NUMBER PART_NUMBER) DO (IF NOT DEFINED %%a EXIT /B)
(ECHO.select disk %DISK_NUMBER%&&ECHO.select partition %PART_NUMBER%&&ECHO.delete partition override&&ECHO.Exit)>"$DSK"&&DISKPART /s "$DSK"&&ECHO 
EXIT /B
:DISKMGR_CHANGEID
IF NOT DEFINED DISK_NUMBER EXIT /B
IF "%MENU_FLAG%"=="1" SET "MENU_FLAG="&&CALL:PAD_LINE&&ECHO                        Enter a new disk-UID {#} &&CALL:PAD_LINE&&CALL:PAD_PREV&&CALL SET "PROMPT_SET=GET_DISK_ID"&&CALL:PROMPT_SET
SET "UID_CNT="&&FOR /F "DELIMS=" %%G in ('CMD.EXE /D /U /C ECHO %GET_DISK_ID%^| FIND /V ""') do (CALL SET /A "UID_CNT+=1")
IF NOT "%UID_CNT%"=="36" SET "GET_DISK_ID=00000000-0000-0000-0000-000000000000"
(ECHO.select disk %DISK_NUMBER%&&ECHO.uniqueid disk id=%GET_DISK_ID%&&ECHO.Exit)>"$DSK"&&DISKPART /s "$DSK"&&ECHO 
EXIT /B
:DISKMGR_FORMAT
IF DEFINED ERROR EXIT /B
FOR %%a in (DISK_NUMBER PART_NUMBER) DO (IF NOT DEFINED %%a EXIT /B)
(ECHO.select disk %DISK_NUMBER%&&ECHO.select partition %PART_NUMBER%&&ECHO.format quick fs=ntfs override&&ECHO.Exit)>"$DSK"&&DISKPART /s "$DSK"&&ECHO 
EXIT /B
:DISKMGR_LOCK
IF DEFINED ERROR EXIT /B
FOR %%a in (DISK_NUMBER PART_NUMBER) DO (IF NOT DEFINED %%a EXIT /B)
(ECHO.select disk %DISK_NUMBER%&&ECHO.select partition %PART_NUMBER%&&ECHO.gpt attributes=0x4000000000000001&&ECHO.Exit)>"$DSK"&&DISKPART /s "$DSK"&&ECHO 
EXIT /B
:DISK_MENU
CLS&&SET "ERROR="&&SET "DISK_CONFLICT="&&SET "DISK_TARGET="&&CALL:MENU_GNC&&CALL:DISK_QUERY
CALL:PAD_LINE&&ECHO                            Choose a Disk {#}&&CALL:PAD_LINE&&CALL:PAD_PREV&&CALL:MENU_SELECT
IF "%SELECT%" GTR "9999999" GOTO:DISK_MENU
IF "%SELECT%" LSS "0" SET "ERROR=1"&&EXIT /B
FOR %%a in (0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15) DO (IF "%SELECT%"=="%%a" CALL SET "DISK_TARGET=%%DISKID_%%a%%"&&CALL SET "DISK_TYPE=%%DISKTYPE_%%a%%")
IF "%DISK_TARGET%"=="%DISK_HOME%" GOTO:DISK_MENU
IF "%DISK_TARGET%"=="00000000" SET "DISK_CONFLICT=1"
IF "%DISK_TARGET%"=="0000-0000" SET "DISK_CONFLICT=1"
IF "%DISK_TARGET%"=="00000000-0000-0000-0000-000000000000" SET "DISK_CONFLICT=1"
IF DEFINED DISK_CONFLICT CALL:PAD_LINE&&ECHO ERASE DISK FIRST&&CALL:PAD_LINE&&CALL:PAUSED
IF DEFINED DISK_CONFLICT GOTO:DISK_MENU
IF "%DISK_TARGET%"=="" GOTO:DISK_MENU
CALL:DISK_QUERY>NUL
IF "%DISK_NUMBER%"=="" GOTO:DISK_MENU
ECHO.%DISK_TARGET%>"%TEMP%\DISK_TARGET"
CALL:PAD_LINE&&ECHO [DISK[%DISK_NUMBER%] [UID[%DISK_TARGET%] is the target disk&&CALL:PAD_LINE
EXIT /B
:DISK_QUERY
(ECHO.LIST DISK&&ECHO.Exit)>$DSK1&&DISKPART /s $DSK1>$DSK2
FOR /F "TOKENS=2,4 SKIP=8 DELIMS= " %%a in ($DSK2) DO ((ECHO.SELECT DISK %%a&&ECHO.DETAIL DISK&&ECHO.Exit)>$DSK3&&DISKPART /s $DSK3>$DSK4
IF NOT "%%a"=="DiskPart..." FOR /F "TOKENS=1-5 SKIP=7 DELIMS={}: " %%1 in ($DSK4) DO (IF "%%1"=="Type" IF "%%2"=="File" SET VSKIP%%a=%%a))
FOR /F "TOKENS=2,4 SKIP=8 DELIMS= " %%a in ($DSK2) DO (SET DISK%%a=&&SET DISKVENDOR_%%a=
IF NOT DEFINED VSKIP%%a (ECHO.SELECT DISK %%a&&ECHO.DETAIL DISK&&ECHO.LIST PARTITION&&ECHO.Exit)>$DSK3&&DISKPART /s $DSK3>$DSK4&&SET PAD_SIZE=4&&CALL:PAD_LINE
IF NOT DEFINED VSKIP%%a IF NOT "%%a"=="DiskPart..." FOR /F "TOKENS=1-9 SKIP=7 DELIMS={}: " %%1 in ($DSK4) DO (
IF NOT DEFINED DISK%%a SET DISK%%a=%%a&&ECHO  DISK ^{%%a^}
IF NOT DEFINED DISKVENDOR_%%a SET DISKVENDOR_%%a=%%1 %%2 %%3&&ECHO VENDOR = %%1 %%2 %%3
IF "%%1"=="Type" SET "DISKTYPE_%%a=%%2"&&ECHO  Type  = %%2
IF "%%1 %%2"=="Disk ID" SET "DISKID_%%a=%%3"&&ECHO  UID   = %%3&&IF "%%3"=="%DISK_TARGET%" SET DISK_NUMBER=%%a
IF "%%1 %%2 %%3"=="Pagefile Disk Yes" ECHO *Active Pagefile*
IF "%%1"=="Partition" IF NOT "%%2"=="###" ECHO  {%%1 %%2}&&ECHO  Size  = %%4 %%5
IF "%%3"=="S" SET "CURRENT_HOME=%%2"))
SET PAD_SIZE=4&&CALL:PAD_LINE
DEL /Q /F "$DSK*">NUL 2>&1
EXIT /B
:EFI_MOUNT
IF NOT DEFINED DISK_TARGET ECHO DISK ID ERROR&&EXIT /B
(ECHO.select VOLUME U&&ECHO.Remove letter=U noerr&&ECHO.Exit)>"$DSK"&&Diskpart /s "$DSK">NUL 2>&1
(ECHO.select disk %DISK_NUMBER%&&ECHO.select partition 1&&ECHO.gpt attributes=0x8000000000000000&&ECHO.Exit)>"$DSK"&&DISKPART /s "$DSK">NUL 2>&1
(ECHO.select disk %DISK_NUMBER%&&ECHO.select partition 1&&ECHO.Assign letter=U noerr&&ECHO.Exit)>"$DSK"&&Diskpart /s "$DSK">NUL 2>&1
DEL /Q /F "$DSK">NUL 2>&1
IF NOT EXIST "U:\EFI" ECHO EFI EMPTY OR NOT MOUNTED
EXIT /B
:EFI_UNMOUNT
(ECHO.select VOLUME U&&ECHO.Remove letter=U noerr&&ECHO.Exit)>"$DSK"&&Diskpart /s "$DSK">NUL 2>&1
(ECHO.select disk %DISK_NUMBER%&&ECHO.select partition 1&&ECHO.gpt attributes=0x4000000000000001&&ECHO.Exit)>"$DSK"&&DISKPART /s "$DSK">NUL 2>&1
DEL /Q /F "$DSK">NUL 2>&1
EXIT /B
:HOME_AUTO
SET "HOME_MOUNT="&&CLS&&ECHO Querying disks...
IF EXIST "%PROG_FOLDER%\DISK_TARGET" SET /P DISK_HOME=<"%PROG_FOLDER%\DISK_TARGET"
IF EXIST "%PROG_FOLDER%\DISK_TARGET" SET /P DISK_TARGET=<"%PROG_FOLDER%\DISK_TARGET"
IF EXIST "S:\" CALL:REASSIGN_LETTER
IF EXIST "%PROG_FOLDER%\DISK_TARGET" SET /P DISK_TARGET=<"%PROG_FOLDER%\DISK_TARGET"
CALL:DISK_QUERY>NUL 2>&1
IF NOT EXIST "S:\" (ECHO.select disk %DISK_NUMBER%&&ECHO.select partition 2&&ECHO.Assign letter=S noerr&&ECHO.Exit)>"$DSK"&&Diskpart /s "$DSK">NUL 2>&1
IF NOT EXIST "S:\" (ECHO.select disk %DISK_NUMBER%&&ECHO.select partition 2&&ECHO.gpt attributes=0x8000000000000000&&ECHO.Exit)>"$DSK"&&DISKPART /s "$DSK">NUL 2>&1
IF NOT EXIST "S:\" (ECHO.select disk %DISK_NUMBER%&&ECHO.select partition 2&&ECHO.Assign letter=S noerr&&ECHO.Exit)>"$DSK"&&Diskpart /s "$DSK">NUL 2>&1
DEL /Q /F "$DSK">NUL 2>&1
IF EXIST "S:\" IF NOT EXIST "S:\$" MD "S:\$">NUL 2>&1
IF EXIST "S:\$" IF NOT EXIST "S:\$\$haZZam.cmd" IF EXIST "X:\$\$haZZam.cmd" COPY "X:\$\$haZZam.cmd" "S:\$">NUL 2>&1
IF NOT EXIST "S:\$" IF NOT DEFINED ARBIT_FLAG SET "ARBIT_FLAG=1"&&GOTO:HOME_AUTO
SET "PROG_SOURCE=S:\$"&&SET "PROG_TARGET=S:\$"&&SET "HOME_MOUNT=YES"&&SET "ARBIT_FLAG="
IF EXIST "S:\$" CALL:SETS_LOAD>NUL 2>&1
EXIT /B
:HOME_MANUAL
CALL:DISK_MENU
ECHO %DISK_TARGET%>"%PROG_FOLDER%\DISK_TARGET"
CALL:HOME_AUTO>NUL 2>&1
EXIT /B
:REASSIGN_LETTER
CALL:DISK_QUERY>NUL 2>&1
FOR %%G in (Q P O N M L K J I H G F E D) DO (IF NOT EXIST "%%G:\" SET "NXT_LETTER=%%G")
(ECHO.select VOLUME S&&ECHO.Remove letter=S noerr&&ECHO.Exit)>"$DSK"&&Diskpart /s "$DSK">NUL 2>&1
(ECHO.select VOLUME %CURRENT_HOME%&&ECHO.assign letter=%NXT_LETTER% noerr&&ECHO.Exit)>"$DSK"&&DISKPART /s "$DSK">NUL 2>&1
DEL /Q /F "$DSK">NUL 2>&1
EXIT /B
:VDISK_CREATE
IF NOT DEFINED VDISK_LETTER_OVER SET "VDISK_LETTER=V"
SET "VDISK_LETTER_BAK=%VDISK_LETTER%"&&CALL:VDISK_DETACH>NUL 2>&1
SET "VDISK_LETTER=%VDISK_LETTER_BAK%"
IF DEFINED NEW_VDISK SET "VHDX_LABEL=%NEW_VDISK%"
IF NOT DEFINED VHDX_MB SET "VHDX_MB=25600"
IF NOT DEFINED VHDX_LABEL SET "VHDX_LABEL=VHDX%VHDX_SLOT%"
DEL /Q /F "%VDISK%">NUL 2>&1
(ECHO.create vdisk file="%VDISK%" maximum=%VHDX_MB% type=expandable&&ECHO.Select vdisk file="%VDISK%"&&ECHO.Attach vdisk&&ECHO.create partition primary&&ECHO.select partition 1&&ECHO.format fs=ntfs quick label="%VHDX_LABEL%"&&ECHO.Assign letter=%VDISK_LETTER% noerr&&ECHO.Exit)>"$DSK"&&DISKPART /s "$DSK">NUL 2>&1
SET "VDISK_LETTER_OVER="&&DEL "$DSK">NUL 2>&1
EXIT /B
:VDISK_ATTACH
IF NOT DEFINED VDISK_LETTER_OVER SET "VDISK_LETTER=V"
SET "VDISK_LETTER_BAK=%VDISK_LETTER%"&&CALL:VDISK_DETACH>NUL 2>&1
SET "VDISK_LETTER=%VDISK_LETTER_BAK%"
(ECHO.Select vdisk file="%VDISK%"&&ECHO.Attach vdisk&&ECHO.select partition 1&&ECHO.Assign letter=%VDISK_LETTER% noerr&&ECHO.Exit)>"$DSK"&&DISKPART /s "$DSK">NUL 2>&1
SET "VDISK_LETTER_OVER="&&DEL "$DSK">NUL 2>&1
EXIT /B
:VDISK_DETACH
IF NOT DEFINED VDISK_LETTER SET "VDISK_LETTER=V"
(ECHO.Select vdisk file="%VDISK%"&&ECHO.Detach vdisk&&ECHO.Exit)>"$DSK"&&DISKPART /s "$DSK">NUL 2>&1
IF EXIST "%VDISK_LETTER%:\" CALL:VDISK_BRUTE
DEL "$DSK">NUL 2>&1
EXIT /B
::(ECHO.select VOLUME=%VDISK_LETTER%&&ECHO.remove all dismount noerr&&ECHO.Exit)>"$DSK"
:VDISK_BRUTE
(ECHO.List Volume&&ECHO.Exit)>$DSK1&&DISKPART /s $DSK1>$DSK2
SET "DISK_TMP="&&FOR /F "TOKENS=1-9 DELIMS= " %%a IN ($DSK2) DO (IF "%%c"=="V" CALL SET "DISK_TMP=%%b")
(ECHO.Select Volume %DISK_TMP%&&ECHO.Detail Volume&&ECHO.Exit)>$DSK1&&DISKPART /s $DSK1>$DSK2
SET "DISK_TMP="&&FOR /F "TOKENS=1-9 DELIMS= " %%a IN ($DSK2) DO (
IF "%%a"=="Disk" IF NOT "%%b"=="###" SET "DISK_TMP=%%b"
IF "%%a"=="*" IF "%%b"=="Disk" SET "DISK_TMP=%%c")
(ECHO.List Vdisk&&ECHO.Exit)>$DSK1&&DISKPART /s $DSK1>$DSK2
SET "VDISK_TMP="&&FOR /F "TOKENS=1-9* DELIMS= " %%a IN ($DSK2) DO (IF "%%a"=="VDisk" IF "%%d"=="%DISK_TMP%" IF EXIST "%%i" SET "VDISK_TMP=%%i")
CALL:PAD_LINE&&CALL ECHO  Detaching [%VDISK_TMP%]&&CALL:PAD_LINE
(ECHO.Select vdisk file="%VDISK_TMP%"&&ECHO.Detach vdisk&&ECHO.Exit)>$DSK1&&DISKPART /s $DSK1 >NUL 2>&1
DEL /F "$DSK*">NUL 2>&1
EXIT /B
:VDISK_COMPACT
IF NOT DEFINED $PICK EXIT /B
CALL:PAD_LINE
(ECHO.Select vdisk file="%$PICK%"&&ECHO.Attach vdisk readonly&&ECHO.compact vdisk&&ECHO.detach vdisk&&ECHO.Exit)>"$DSK"&&DISKPART /s "$DSK"&&DEL "$DSK">NUL 2>&1
CALL:PAD_LINE&&CALL:PAUSED
EXIT /B
REM FILEMGR_FILEMGR_FILEMGR_FILEMGR_FILEMGR_FILEMGR_FILEMGR_FILEMGR_FILEMGR_
:FILEMGR_START
REM FILEMGR_FILEMGR_FILEMGR_FILEMGR_FILEMGR_FILEMGR_FILEMGR_FILEMGR_FILEMGR_
@ECHO OFF&&CLS&&CALL:COLOR_CHK&&CALL:TITLE_GNC&&CALL:PAD_LINE
IF NOT DEFINED FMGR_SOURCE SET "FMGR_SOURCE=%PROG_SOURCE%"&&SET "FMGR_TARGET=%PROG_TARGET%"
IF NOT EXIST "%FMGR_SOURCE%\*" SET "FMGR_SOURCE=%PROG_SOURCE%"&&SET "FMGR_TARGET=%PROG_TARGET%"
ECHO                             File Management&&CALL:PAD_LINE&&ECHO  SRC {X} TGT - [SOURCE[%FMGR_SOURCE%] [TARGET[%FMGR_TARGET%]&&CALL:PAD_LINE
IF "%FMGR_DUAL%"=="ENABLED" ECHO   CURRENTLY IN [TARGET[%FMGR_TARGET%]:&&SET "BLIST=FMGT"&&CALL:FILE_LIST&&CALL:PAD_LINE
ECHO   CURRENTLY IN [SOURCE[%FMGR_SOURCE%]:&&SET "MENU_INSERTA= [SRC]\[..]"&&SET "BLIST=FMGS"&&CALL:FILE_LIST&&CALL:PAD_LINE
ECHO  {E}xplore {N}ew {O}pen {C}opy {M}ove {R}en {D}el {V}iew {#}Own {*}Sym&&CALL:PAD_LINE
CALL:PAD_PREV&&CALL:MENU_SELECT
IF NOT DEFINED SELECT GOTO:PROG_MAIN
IF "%SELECT%"=="X" CALL:FMGR_SWAP
IF "%SELECT%"=="N" CALL:FMGR_NEW&&SET "SELECT="
IF "%SELECT%"=="E" CALL:FMGR_EXPLORE&&SET "SELECT="
IF "%SELECT%"=="C" SET "PICK=FMGS"&&CALL:FILE_PICK&&CALL:FMGR_COPY&&SET "SELECT="
IF "%SELECT%"=="O" SET "PICK=FMGS"&&CALL:FILE_PICK&&CALL:FMGR_OPEN&&SET "SELECT="
IF "%SELECT%"=="M" SET "PICK=FMGS"&&CALL:FILE_PICK&&CALL:FMGR_MOVE&&SET "SELECT="
IF "%SELECT%"=="R" SET "PICK=FMGS"&&CALL:FILE_PICK&&CALL:FMGR_REN&&SET "SELECT="
IF "%SELECT%"=="*" SET "PICK=FMGS"&&CALL:FILE_PICK&&CALL:FMGR_SYM&&SET "SELECT="
IF "%SELECT%"=="#" SET "PICK=FMGS"&&CALL:FILE_PICK&&CALL:FMGR_OWN&&SET "SELECT="
IF "%SELECT%"=="D" SET "PICK=FMGS"&&CALL:FILE_PICK&&CALL:FMGR_DEL&&SET "SELECT="
IF "%SELECT%"=="V" IF "%FMGR_DUAL%"=="DISABLED" SET "FMGR_DUAL=ENABLED"&&SET "SELECT="
IF "%SELECT%"=="V" IF "%FMGR_DUAL%"=="ENABLED" SET "FMGR_DUAL=DISABLED"&&SET "SELECT="
IF "%SELECT%"==".." CALL SET "FMGR_SOURCE=%%FMGR_SOURCE_%FMS#%%%"&&CALL SET /A "FMS#-=1"
GOTO:FILEMGR_START
:FMGR_NEW
CALL:PAD_LINE&&ECHO.                       {1}Folder      {2}File&&CALL:PAD_LINE&&CALL:PAD_PREV&&SET "PROMPT_SET=NEW_TYPE"&&CALL:PROMPT_SET
IF NOT "%NEW_TYPE%"=="1" IF NOT "%NEW_TYPE%"=="2" EXIT /B
IF "%NEW_TYPE%"=="1" CALL:PAD_LINE&&ECHO.                           New Folder Name?&&CALL:PAD_LINE&&CALL:PAD_PREV&&SET "PROMPT_SET=NEW_NAME"&&CALL:PROMPT_SET_ANY
IF "%NEW_TYPE%"=="1" IF NOT DEFINED NEW_NAME EXIT /B
IF "%NEW_TYPE%"=="1" SET "NEW_TYPE="&&MD "%FMGR_SOURCE%\%NEW_NAME%">NUL 2>&1
IF "%NEW_TYPE%"=="2" CALL:PAD_LINE&&ECHO.                            New File Name?&&CALL:PAD_LINE&&CALL:PAD_PREV&&SET "PROMPT_SET=NEW_NAME"&&CALL:PROMPT_SET_ANY
IF "%NEW_TYPE%"=="2" IF NOT DEFINED NEW_NAME EXIT /B
IF "%NEW_TYPE%"=="2" SET "NEW_TYPE="&&ECHO.>"%FMGR_SOURCE%\%NEW_NAME%"
EXIT /B
:FMGR_REN
IF NOT DEFINED $PICK EXIT /B
CALL:PAD_LINE&&ECHO.                               New name?&&CALL:PAD_LINE&&CALL:PAD_PREV&&SET "PROMPT_SET=NEW_NAME"&&CALL:PROMPT_SET_ANY
IF NOT DEFINED NEW_NAME EXIT /B
CALL:PAD_LINE&&REN "%$PICK%" "%NEW_NAME%"
IF NOT EXIST "%FMGR_SOURCE%\%NEW_NAME%\*" ECHO Renaming [%$PICK%]to[%FMGR_SOURCE%\%NEW_NAME%]
IF EXIST "%FMGR_SOURCE%\%NEW_NAME%\*" ECHO Renaming [%$PICK%]to[%FMGR_SOURCE%\%NEW_NAME%]
CALL:PAD_LINE&&CALL:PAUSED
EXIT /B
:FMGR_DEL
IF NOT DEFINED $PICK EXIT /B
CALL:PAD_LINE&&IF NOT EXIST "%$PICK%\*" DEL /Q /F "\\?\%$PICK%"
IF EXIST "%$PICK%\*" RD /S /Q "\\?\%$PICK%"
IF NOT EXIST "%$PICK%\*" IF NOT EXIST "%$PICK%" ECHO Deleted [%$PICK%]..
CALL:PAD_LINE&&CALL:PAUSED
EXIT /B
:FMGR_OPEN
IF NOT DEFINED $PICK EXIT /B
IF NOT EXIST "%$PICK%\*" "%$PICK%"&EXIT /B
IF EXIST "%$PICK%\*" CALL SET /A "FMS#+=1"
CALL SET "FMGR_SOURCE_%FMS#%=%FMGR_SOURCE%"&&CALL SET "FMGR_SOURCE=%$PICK%"
EXIT /B
:FMGR_COPY
IF NOT DEFINED $PICK EXIT /B
IF "%FMGR_SOURCE%"=="%FMGR_TARGET%" CALL:PAD_LINE&&ECHO                        Source/Target are the same..&&CALL:PAD_LINE&&CALL:PAUSED
IF "%FMGR_SOURCE%"=="%FMGR_TARGET%" EXIT /B
CALL:PAD_LINE&&IF NOT EXIST "%$PICK%\*" ECHO Copying [%$PICK%]to[%FMGR_TARGET%]...&&XCOPY "%$PICK%" "%FMGR_TARGET%\" /C /Y>NUL 2>&1
IF EXIST "%$PICK%\*" ECHO Copying [%$PICK%]to[%FMGR_TARGET%]...&&XCOPY "%$PICK%" "%FMGR_TARGET%\%$ELECT$%\" /E /C /I /Y>NUL 2>&1
CALL:PAD_LINE&&CALL:PAUSED
EXIT /B
:FMGR_SYM
IF NOT DEFINED $PICK EXIT /B
IF "%FMGR_SOURCE%"=="%FMGR_TARGET%" CALL:PAD_LINE&&ECHO                        Source/Target are the same..&&CALL:PAD_LINE&&CALL:PAUSED
IF "%FMGR_SOURCE%"=="%FMGR_TARGET%" EXIT /B
CALL:PAD_LINE&&IF EXIST "%$PICK%\*" MKLINK /J "%FMGR_TARGET%\%$ELECT$%" "%$PICK%"
IF NOT EXIST "%$PICK%\*" MKLINK "%FMGR_TARGET%\%$ELECT$%" "%$PICK%"
CALL:PAD_LINE&&CALL:PAUSED
EXIT /B
:FMGR_MOVE
IF NOT DEFINED $PICK EXIT /B
IF "%FMGR_SOURCE%"=="%FMGR_TARGET%" CALL:PAD_LINE&&ECHO                        Source/Target are the same..&&CALL:PAD_LINE&&CALL:PAUSED
IF "%FMGR_SOURCE%"=="%FMGR_TARGET%" EXIT /B
CALL:PAD_LINE&&IF NOT EXIST "%$PICK%\*" ECHO Moving [%$PICK%]to[%FMGR_TARGET%]...&&MOVE /Y "%$PICK%" "%FMGR_TARGET%\">NUL 2>&1
IF EXIST "%$PICK%\*" ECHO Moving [%$PICK%]to[%FMGR_TARGET%]...&&XCOPY "%$PICK%" "%FMGR_TARGET%\%$ELECT$%\" /E /C /I /Y>NUL 2>&1
IF EXIST "%$PICK%\*" RD /S /Q "\\?\%$PICK%">NUL 2>&1
CALL:PAD_LINE&&CALL:PAUSED
EXIT /B
:FMGR_OWN
IF NOT DEFINED $PICK EXIT /B
CALL:PAD_LINE&&IF EXIST "%$PICK%\*" TAKEOWN /F "%$PICK%" /R /D Y
IF EXIST "%$PICK%\*" ICACLS "%$PICK%\*" /grant %USERNAME%:F /T >NUL 2>&1
IF NOT EXIST "%$PICK%\*" TAKEOWN /F "%$PICK%"
IF NOT EXIST "%$PICK%\*" ICACLS "%$PICK%" /grant %USERNAME%:F >NUL 2>&1
ECHO.&&CALL:PAD_LINE&&CALL:PAUSED
EXIT /B
:FMGR_EXPLORE
CALL:PAD_LINE&&ECHO.                   Enter a path (Can't end in "\")&&CALL:PAD_LINE&&FOR %%G in (A B C D E F G H I J K L M N O P Q R S T U V W X Y Z) DO (IF EXIST "%%G:\" ECHO [%%G:])
CALL:PAD_LINE&&CALL:PAD_PREV&&CALL:MENU_SELECT
IF DEFINED SELECT FOR /F "DELIMS=" %%G in ('CMD.EXE /D /U /C ECHO %SELECT%^| FIND /V ""') do (SET "SLASHER=%%G")
IF EXIST "%SELECT%\*" IF NOT "%SLASHER%"=="\" SET "FMGR_SOURCE=%SELECT%"
EXIT /B
:FMGR_SWAP
IF NOT EXIST "%FMGR_SOURCE%" EXIT /B
IF NOT EXIST "%FMGR_TARGET%" EXIT /B
SET "FMGR_SOURCE=%FMGR_TARGET%"&&SET "FMGR_TARGET=%FMGR_SOURCE%"
EXIT /B
REM $ETUP_$ETUP_$ETUP_$ETUP_$ETUP_$ETUP_$ETUP_$ETUP_$ETUP_$ETUP_$ETUP_$ETUP_$ETUP_$ETUP
:$ETUP_START
REM $ETUP_$ETUP_$ETUP_$ETUP_$ETUP_$ETUP_$ETUP_$ETUP_$ETUP_$ETUP_$ETUP_$ETUP_$ETUP_$ETUP 
CLS&&CALL:SETS_HANDLER&&CALL:TITLE_GNC&&CALL:COLOR_CHK&&CALL:CLEAN&&SET "BTMP=%WINDIR%\System32\config\ELAM"&&SET "MENU_FLAG="&&SET "CAME_FROM="&&CALL:PAD_LINE
ECHO                              Boot-Creator&&CALL:PAD_LINE&&ECHO    ~ { Erase Target-Disk ^& Create Image-Deploy Boot-Environment } ~&&CALL:PAD_LINE
IF "%FOLDER_MODE%"=="UNIFIED" ECHO   AVAILABLE VHDX'S:&&SET "BLIST=VHDX"&&CALL:FILE_LIST&&CALL:PAD_LINE
IF "%FOLDER_MODE%"=="UNIFIED" IF "%PROG_MODE%"=="RAMDISK" ECHO                     ~ {R}ebuild as [%BCD_SYSTEM%-MODE] } ~&&CALL:PAD_LINE
IF "%FOLDER_MODE%"=="ISOLATED" ECHO   BOOT-FOLDER:&&SET "BLIST=BOOT"&&CALL:FILE_LIST&&CALL:PAD_LINE
IF "%FOLDER_MODE%"=="ISOLATED" IF NOT "%PROG_MODE%"=="RAMDISK" ECHO                            {-}BOOT/IMAGE{+}&&CALL:PAD_LINE
IF "%FOLDER_MODE%"=="ISOLATED" IF "%PROG_MODE%"=="RAMDISK" ECHO     {-}BOOT/IMAGE{+}                 ~ {R}ebuild as [%BCD_SYSTEM%-MODE] } ~&&CALL:PAD_LINE
IF "%FOLDER_MODE%"=="ISOLATED" ECHO   IMAGE-FOLDER:&&SET "BLIST=VHDX"&&CALL:FILE_LIST&&CALL:PAD_LINE
IF "%VHDX_$ETUP%"=="SELECT" ECHO                                  {G}o^^!      ~ {V} Choose VHDX } ~&&CALL:PAD_LINE
IF NOT "%VHDX_$ETUP%"=="SELECT" IF "%BCD_SYSTEM%"=="NAME" ECHO     {M}ode[%BCD_SYSTEM%]                 {G}o^^!  ~ {V} Current[%VHDX_$ETUP%] } ~ &&CALL:PAD_LINE
IF NOT "%VHDX_$ETUP%"=="SELECT" IF "%BCD_SYSTEM%"=="SLOT" ECHO     {M}ode  {Q}ty[%BOOT_BAYS%]  {S}lot[%ACTIVE_BAY%]  {G}o^^!  ~ {V} Current[%VHDX_$ETUP%] } ~ &&CALL:PAD_LINE
CALL:PAD_PREV&&CALL:MENU_SELECT
IF NOT DEFINED SELECT GOTO:DISKMGR_START
IF "%SELECT%"=="S" SET /A "ACTIVE_BAY+=1"&&IF "%ACTIVE_BAY%" EQU "9" SET "ACTIVE_BAY=0"
IF "%SELECT%"=="S" IF "%ACTIVE_BAY%" GTR "%BOOT_BAYS%" SET "ACTIVE_BAY=0"
IF "%SELECT%"=="Q" SET /A "BOOT_BAYS+=1"&&IF "%BOOT_BAYS%" EQU "9" SET "BOOT_BAYS=0"
IF "%SELECT%"=="Q" IF "%BOOT_BAYS%" LSS "%ACTIVE_BAY%" SET "ACTIVE_BAY=%BOOT_BAYS%"
IF "%SELECT%"=="-" IF "%FOLDER_MODE%"=="ISOLATED" SET "MENU_FLAG=I2B"&&SET "PICK=VHDX"&&CALL:FILE_PICK
IF "%MENU_FLAG%"=="I2B" IF DEFINED $PICK CALL:PAD_LINE&&ECHO  Moving [%$PICK%]to[%PROG_SOURCE%]...&&CALL:PAD_LINE&&MOVE /Y "%$PICK%" "%PROG_SOURCE%\">NUL
IF "%SELECT%"=="+" IF "%FOLDER_MODE%"=="ISOLATED" SET "MENU_FLAG=B2I"&&SET "PICK=BOOT"&&CALL:FILE_PICK
IF "%MENU_FLAG%"=="B2I" IF DEFINED $PICK CALL:PAD_LINE&&ECHO  Moving [%$PICK%]to[%IMAGE_FOLDER%]...&&CALL:PAD_LINE&&MOVE /Y "%$PICK%" "%IMAGE_FOLDER%\">NUL
IF "%SELECT%"=="M" IF NOT "%VHDX_$ETUP%"=="SELECT" IF "%BCD_SYSTEM%"=="SLOT" SET "BCD_SYSTEM=NAME"&&SET "SELECT="
IF "%SELECT%"=="M" IF NOT "%VHDX_$ETUP%"=="SELECT" IF "%BCD_SYSTEM%"=="NAME" SET "BCD_SYSTEM=SLOT"&&SET "SELECT="
IF "%SELECT%"=="R" IF "%PROG_MODE%"=="RAMDISK" IF NOT "%VHDX_$ETUP%"=="SELECT" SET "CAME_FROM=$ETUP"&&CALL:BCD_REBUILD&&CALL:PAUSED
IF "%SELECT%"=="G" IF NOT "%VHDX_$ETUP%"=="SELECT" SET "CAME_FROM=$ETUP"&&CALL:BOOT_MAKER&&CALL:PAUSED
IF "%SELECT%"=="V" SET "MENU_FLAG=PVHDX"&&SET "PICK=VHDX"&&CALL:FILE_PICK
IF "%MENU_FLAG%"=="PVHDX" SET "VHDX_$ETUP=%$ELECT$%"&&SET "SELECT="
GOTO:$ETUP_START
:BCD_REBUILD
IF "%BCD_SYSTEM%"=="NAME" CALL:PAD_LINE&&ECHO  Rebuilding BCD [%BCD_SYSTEM%-MODE] [VHDX[%VHDX_$ETUP%]&&CALL:PAD_LINE
IF "%BCD_SYSTEM%"=="SLOT" CALL:PAD_LINE&&ECHO  Rebuilding BCD [%BCD_SYSTEM%-MODE] [Qty[%BOOT_BAYS%] [VHDX[%VHDX_$ETUP%]to[Slot[%ACTIVE_BAY%]&&CALL:PAD_LINE
CALL:EFI_MOUNT>NUL 2>&1
CALL:BCD_CREATE>NUL 2>&1
CALL:EFI_UNMOUNT>NUL 2>&1
IF "%BCD_SYSTEM%"=="NAME" IF EXIST "S:\$\%VHDX_$ETUP%" ECHO  [%VHDX_$ETUP%] exists in target location [S:\$]&&CALL:PAD_LINE
IF "%BCD_SYSTEM%"=="SLOT" IF EXIST "S:\$\%ACTIVE_BAY%.VHDX" ECHO  [%ACTIVE_BAY%.VHDX] exists in target location [S:\$]&&CALL:PAD_LINE
IF "%BCD_SYSTEM%"=="NAME" IF NOT EXIST "S:\$\%VHDX_$ETUP%" ECHO  Relocating [%IMAGE_FOLDER%\%VHDX_$ETUP%]to[S:\$\%VHDX_$ETUP%]&&CALL:PAD_LINE&&MOVE /Y "\\?\%IMAGE_FOLDER%\%VHDX_$ETUP%" "S:\$">NUL 2>&1
IF "%BCD_SYSTEM%"=="SLOT" IF NOT EXIST "S:\$\%ACTIVE_BAY%.VHDX" ECHO  Relocating [%IMAGE_FOLDER%\%VHDX_$ETUP%]to[S:\$\%ACTIVE_BAY%.VHDX]&&CALL:PAD_LINE&&MOVE /Y "\\?\%IMAGE_FOLDER%\%VHDX_$ETUP%" "S:\$\%ACTIVE_BAY%.VHDX">NUL 2>&1
ECHO  Done^^!&&CALL:PAD_LINE
EXIT /B
:BOOT_MAKER
SET "BOOT_MSG="&&SET "DISK_MSG="&&SET "PART_CNT="&&SET "PART_ERR="&&SET "BOOT_ABT="&&SET "BOOT_GO="
IF NOT "%PROG_MODE%"=="RAMDISK" IF NOT EXIST "S:\" IF NOT EXIST "T:\" IF NOT EXIST "U:\" IF NOT EXIST "V:\" SET "BOOT_GO=1"
IF NOT "%PROG_MODE%"=="RAMDISK" IF NOT DEFINED BOOT_GO SET "BOOT_MSG=Drive letters S:\,T:\,U:\,V:\ can NOT be in use. Reassign/Unmount the letter in use."&&GOTO:BOOT_ABT
IF "%CAME_FROM%"=="$ETUP" IF NOT "%VHDX_$ETUP%"=="SELECT" IF NOT EXIST "%IMAGE_FOLDER%\%VHDX_$ETUP%" SET "BOOT_MSG=Source VHDX not selected."&&GOTO:BOOT_ABT
IF "%CAME_FROM%"=="$ETUP" CALL:DISK_MENU
IF "%CAME_FROM%"=="$ETUP" IF DEFINED ERROR EXIT /B
CALL:PAD_LINE&&ECHO                           Boot Creator Start&&CALL:PAD_LINE
DISM /cleanup-MountPoints>NUL 2>&1
IF "%PROG_MODE%"=="RAMDISK" SET /P DISK_TARGET=<"%PROG_FOLDER%\DISK_TARGET"&&CALL:DISK_QUERY>NUL 2>&1
IF "%PROG_MODE%"=="RAMDISK" CALL:EFI_MOUNT>NUL 2>&1
IF "%PROG_MODE%"=="RAMDISK" IF NOT EXIST "U:\$.WIM" SET "BOOT_MSG=No boot-media detected."&&GOTO:BOOT_CLEANUP
IF "%PROG_MODE%"=="RAMDISK" SET "BOOT_IMAGE=U:\$.WIM"
COPY /Y "%BOOT_IMAGE%" "%TEMP%\$WIM.TMP">NUL 2>&1
IF "%PROG_MODE%"=="RAMDISK" CALL:EFI_UNMOUNT>NUL 2>&1
IF EXIST "%TEMP%\$haZZam" RD /Q /S "\\?\%TEMP%\$haZZam">NUL 2>&1
IF NOT EXIST "%TEMP%\$haZZam" MD "%TEMP%\$haZZam">NUL 2>&1
SET /P DISK_TARGET=<"%TEMP%\DISK_TARGET"&&CALL:DISK_QUERY>NUL 2>&1
COPY /Y "\\?\%PROG_FOLDER%\$haZZam.CMD" "%TEMP%\$haZZam">NUL 2>&1
ECHO                           Creating partitions...&&CALL:PAD_LINE
IF DEFINED DISK_NUMBER CALL:PART_CREATE>NUL 2>&1
IF DEFINED UID_FAIL SET "DISK_TARGET=%GET_DISK_ID%"&&CALL:DISK_QUERY>NUL 2>&1
ECHO.%DISK_TARGET%>"%TEMP%\$haZZam\DISK_TARGET"
SET "BOOT_MSG0=Disk is currently in use - unplug disk - reboot into Windows - replug and try again."
IF DEFINED PART_ERR SET "BOOT_MSG=%BOOT_MSG0%"&&SET "BOOT_ABT=1"
IF NOT EXIST "U:\" SET "BOOT_MSG=%BOOT_MSG0%"&&SET "BOOT_ABT=1"
IF NOT EXIST "S:\" SET "BOOT_MSG=%BOOT_MSG0%"&&SET "BOOT_ABT=1"
IF DEFINED BOOT_ABT GOTO:BOOT_CLEANUP
:BOOT_CREATE
SET "SCRATCH_BOOT=S:\$\Scratch"
IF EXIST "%SCRATCH_BOOT%" RD /S /Q "\\?\%SCRATCH_BOOT%">NUL 2>&1
IF NOT EXIST "%SCRATCH_BOOT%" MD "%SCRATCH_BOOT%">NUL 2>&1
MOVE /Y "%TEMP%\$WIM.TMP" "%SCRATCH_BOOT%\$.WIM">NUL 2>&1
SET "VDISK=%SCRATCH_BOOT%\SCRATCH.VHDX"&&SET "VHDX_MB=20000"&&CALL:VDISK_CREATE>NUL 2>&1
SET "IMAGE_BOOT=%SCRATCH_BOOT%\$.WIM"
CALL:BOOT_INDEX>NUL 2>&1
SET "APPLYDIR_BOOT=V:"&&SET "CAPTUREDIR_BOOT=V:"
ECHO                          Extracting boot-media...&&CALL:PAD_LINE&&CALL:TITLECARD
DISM /ENGLISH /APPLY-IMAGE /IMAGEFILE:"%IMAGE_BOOT%" /INDEX:%BOOT_INDEX% /APPLYDIR:"%APPLYDIR_BOOT%"
IF NOT EXIST "%APPLYDIR_BOOT%\Windows" SET "BOOT_MSG=Mount failure, Index %BOOT_INDEX%" &&GOTO:BOOT_CLEANUP
DEL /Q /F "\\?\%IMAGE_BOOT%">NUL 2>&1
MD "%APPLYDIR_BOOT%\$">NUL 2>&1
COPY /Y "%TEMP%\$haZZam\*.*" "%APPLYDIR_BOOT%\$">NUL 2>&1
MD "U:\EFI\Microsoft\Boot">NUL 2>&1
MD "U:\Boot">NUL 2>&1
MD "U:\EFI\Boot">NUL 2>&1
COPY /Y "%APPLYDIR_BOOT%\Windows\Boot\DVD\EFI\boot.sdi" "U:\Boot">NUL 2>&1
COPY /Y "%APPLYDIR_BOOT%\Windows\Boot\EFI\bootmgfw.efi" "U:\EFI\Boot\bootx64.efi">NUL 2>&1
COPY /Y "%APPLYDIR_BOOT%\Windows\System32\config\ELAM" "%TEMP%\BCD">NUL 2>&1
IF NOT EXIST "%APPLYDIR_BOOT%\Windows\System32\Setup.dat" DEL /Q /F "\\?\%APPLYDIR_BOOT%\setup.exe">NUL 2>&1
IF NOT EXIST "%APPLYDIR_BOOT%\Windows\Boot\DVD\EFI\boot.sdi" COPY /Y "%WinDir%\Boot\DVD\EFI\boot.sdi" "U:\Boot">NUL 2>&1
IF NOT EXIST "%APPLYDIR_BOOT%\Windows\Boot\EFI\bootmgfw.efi" COPY /Y "%WinDir%\Boot\EFI\bootmgfw.efi" "U:\EFI\Boot\bootx64.efi">NUL 2>&1
IF NOT EXIST "U:\EFI\Boot\bootx64.efi" SET "BOOT_MSG=EFI missing"&&GOTO:BOOT_CLEANUP
CALL:BCD_CREATE>NUL 2>&1
IF NOT EXIST "U:\EFI\Microsoft\Boot\BCD" SET "BOOT_MSG=BCD missing"&&GOTO:BOOT_CLEANUP
ECHO "%%SYSTEMDRIVE%%\$\$HAZZAM.CMD">"%APPLYDIR_BOOT%\WINDOWS\SYSTEM32\STARTNET.CMD"
ECHO.&&CALL:PAD_LINE&&ECHO                            Saving boot-media...&&CALL:PAD_LINE&&CALL:TITLECARD
DISM /ENGLISH /CAPTURE-IMAGE /IMAGEFILE:"U:\$.WIM" /CAPTUREDIR:"%CAPTUREDIR_BOOT%" /NAME:NAME /CheckIntegrity /Verify /Bootable
COPY /Y "%PROG_FOLDER%\$ETTINGS.PRO" "\\?\S:\$">NUL 2>&1
COPY /Y "%PROG_FOLDER%\$haZZam.CMD" "\\?\S:\$">NUL 2>&1
:BOOT_CLEANUP
ECHO.&&CALL:PAD_LINE&&ECHO                             Unmounting EFI...&&CALL:PAD_LINE&&CALL:TITLECARD&&CALL:VDISK_DETACH>NUL 2>&1
CALL:EFI_UNMOUNT>NUL 2>&1
IF EXIST "%TEMP%\$WIM.TMP" DEL /Q /F "\\?\%TEMP%\$WIM.TMP">NUL 2>&1
IF EXIST "%TEMP%\$haZZam" RD /S /Q "\\?\%TEMP%\$haZZam">NUL 2>&1
IF EXIST "$DSK" DEL /Q /F "$DSK">NUL 2>&1
IF EXIST "%TEMP%\DISK_TARGET" DEL /Q /F "%TEMP%\DISK_TARGET">NUL 2>&1
IF EXIST "%SCRATCH_BOOT%" DISM /cleanup-MountPoints>NUL 2>&1
IF EXIST "%SCRATCH_BOOT%" RD /S /Q "\\?\%SCRATCH_BOOT%">NUL 2>&1
IF "%PROG_MODE%"=="RAMDISK" CALL:HOME_AUTO>NUL 2>&1
IF NOT "%PROG_MODE%"=="RAMDISK" CALL:REASSIGN_LETTER>NUL 2>&1
CALL:EFI_UNMOUNT>NUL 2>&1
IF DEFINED BOOT_ABT GOTO:BOOT_ABT
IF "%PROG_MODE%"=="COMMAND" ECHO Copying %VHDX_$ETUP%...&&COPY /Y "\\?\%IMAGE_FOLDER%\%VHDX_$ETUP%" "%NXT_LETTER%:\$">NUL 2>&1
IF "%CAME_FROM%"=="$ETUP" IF "%BCD_SYSTEM%"=="NAME" IF NOT "%VHDX_$ETUP%"=="SELECT" ECHO  Copying %VHDX_$ETUP%...&&COPY /Y "\\?\%IMAGE_FOLDER%\%VHDX_$ETUP%" "%NXT_LETTER%:\$">NUL 2>&1
IF "%CAME_FROM%"=="$ETUP" IF "%BCD_SYSTEM%"=="SLOT" IF NOT "%VHDX_$ETUP%"=="SELECT" ECHO  Copying %VHDX_$ETUP%...&&COPY /Y "\\?\%IMAGE_FOLDER%\%VHDX_$ETUP%" "%NXT_LETTER%:\$\%ACTIVE_BAY%.VHDX">NUL 2>&1
IF "%CAME_FROM%"=="$ETUP" IF NOT "%VHDX_$ETUP%"=="SELECT" IF NOT EXIST "%NXT_LETTER%:\$\*.VHDX" SET "BOOT_MSG=ERROR Copying VHDX."
:BOOT_ABT
IF DEFINED BOOT_MSG CALL:PAD_LINE&&ECHO %BOOT_MSG%&&SET "BOOT_MSG="
CALL:PAD_LINE&&ECHO                           Boot Creator Finish&&CALL:PAD_LINE
IF "%CAME_FROM%"=="$ETUP" ECHO &&SET "CAME_FROM="
EXIT /B
:BOOT_INDEX
IF EXIST "%IMAGE_BOOT%" DISM /ENGLISH /Get-ImageInfo /ImageFile:"%IMAGE_BOOT%" /Index:3>$DISM
IF EXIST "%IMAGE_BOOT%" FOR /F "TOKENS=5 SKIP=5 DELIMS=<> " %%a in ($DISM) DO (IF "%%a"=="Setup" SET "BOOT_INDEX=3"&&GOTO:WIM_ESCAPE)
IF EXIST "%IMAGE_BOOT%" DISM /ENGLISH /Get-ImageInfo /ImageFile:"%IMAGE_BOOT%" /Index:2>$DISM
IF EXIST "%IMAGE_BOOT%" FOR /F "TOKENS=5 SKIP=5 DELIMS=<> " %%a in ($DISM) DO (IF "%%a"=="Setup" SET "BOOT_INDEX=2"&&GOTO:WIM_ESCAPE)
IF EXIST "%IMAGE_BOOT%" DISM /ENGLISH /Get-ImageInfo /ImageFile:"%IMAGE_BOOT%" /Index:1>$DISM
IF EXIST "%IMAGE_BOOT%" FOR /F "TOKENS=5 SKIP=5 DELIMS=<> " %%a in ($DISM) DO (IF "%%a"=="Setup" SET "BOOT_INDEX=1"&&GOTO:WIM_ESCAPE)
:WIM_ESCAPE
IF NOT DEFINED BOOT_INDEX SET "BOOT_INDEX=1"
DEL /Q /F "$DISM">NUL 2>&1
EXIT /B
:BCD_CREATE
IF "%CAME_FROM%"=="$ETUP" IF "%VHDX_$ETUP%"=="SELECT" SET "BCD_SYSTEM=SLOT"&&SET "BCD_SYSTEM_TEMP=1"
IF "%PROG_MODE%"=="COMMAND" IF NOT DEFINED BCD_SYSTEM IF DEFINED VHDX_$ETUP SET "BCD_SYSTEM=NAME"&&SET "BCD_SYSTEM_TEMP=1"
IF "%PROG_MODE%"=="COMMAND" IF NOT DEFINED BCD_SYSTEM IF NOT DEFINED VHDX_$ETUP SET "BCD_SYSTEM=SLOT"&&SET "BCD_SYSTEM_TEMP=1"
SET "BCD_KEY=BCD00000001"&&SET "BCD_FILE=%TEMP%\0020"&&IF EXIST "%TEMP%\BCD1" DEL /F "%TEMP%\BCD1">NUL
IF NOT DEFINED BOOT_BAYS SET "BOOT_BAYS=2"&&SET "ACTIVE_BAY=1"
IF NOT DEFINED ACTIVE_BAY SET "BOOT_BAYS=2"&&SET "ACTIVE_BAY=1"
IF "%ACTIVE_BAY%" GTR "%BOOT_BAYS%" SET "ACTIVE_BAY=%BOOT_BAYS%"
DEL /Q /F "%BCD_FILE%">NUL 2>&1
BCDEDIT.EXE /createstore "%BCD_FILE%"
BCDEDIT.EXE /STORE "%BCD_FILE%" /create {bootmgr}
BCDEDIT.EXE /STORE "%BCD_FILE%" /SET {bootmgr} description "Boot Manager"
BCDEDIT.EXE /STORE "%BCD_FILE%" /SET {bootmgr} device boot
BCDEDIT.EXE /STORE "%BCD_FILE%" /SET {bootmgr} timeout 3
FOR /f "TOKENS=2 DELIMS={}" %%a in ('BCDEDIT.EXE /STORE %BCD_FILE% /create /device') do SET RAMDISK={%%a} 
BCDEDIT.EXE /STORE %BCD_FILE% /SET %RAMDISK% ramdisksdidevice boot
BCDEDIT.EXE /STORE %BCD_FILE% /SET %RAMDISK% ramdisksdipath \boot\boot.sdi
FOR /f "TOKENS=2 DELIMS={}" %%a in ('BCDEDIT.EXE /STORE %BCD_FILE% /create /application osloader') do SET BCD_GUID={%%a}
BCDEDIT.EXE /STORE %BCD_FILE% /SET %BCD_GUID% systemroot \Windows
BCDEDIT.EXE /STORE %BCD_FILE% /SET %BCD_GUID% detecthal Yes
BCDEDIT.EXE /STORE %BCD_FILE% /SET %BCD_GUID% winpe Yes
BCDEDIT.EXE /STORE %BCD_FILE% /SET %BCD_GUID% osdevice ramdisk=[boot]\$.WIM,%RAMDISK%
BCDEDIT.EXE /STORE %BCD_FILE% /SET %BCD_GUID% device ramdisk=[boot]\$.WIM,%RAMDISK%
BCDEDIT.EXE /STORE %BCD_FILE% /SET %BCD_GUID% path \windows\system32\winload.efi
BCDEDIT.EXE /STORE %BCD_FILE% /SET %BCD_GUID% description "$haZZam^!"
BCDEDIT.EXE /STORE %BCD_FILE% /displayorder %BCD_GUID% /addlast
IF NOT DEFINED DEPLOY_MODE IF "%BCD_SYSTEM%"=="NAME" SET "BCD_CNT="&&CALL:BCD_VHDX
IF NOT DEFINED DEPLOY_MODE IF "%BCD_SYSTEM%"=="SLOT" FOR %%a in (9 8 7 6 5 4 3 2 1 0) DO (IF "%%a" LEQ "%BOOT_BAYS%" CALL SET "BCD_CNT=%%a"&&CALL:BCD_VHDX)
REG UNLOAD HKLM\%BCD_KEY%>NUL 2>&1
REG LOAD HKLM\%BCD_KEY% "%BCD_FILE%">NUL 2>&1
REG EXPORT HKLM\%BCD_KEY% "%TEMP%\BCD1"
REG UNLOAD HKLM\%BCD_KEY%>NUL 2>&1
SET "BCD_FILE=%TEMP%\BCD"
IF NOT EXIST "%BCD_FILE%" COPY /Y "%BTMP%" "%BCD_FILE%">NUL 2>&1
REG LOAD HKLM\%BCD_KEY% "%BCD_FILE%">NUL 2>&1
REG IMPORT "%TEMP%\BCD1" >NUL 2>&1
REG.exe add "HKLM\%BCD_KEY%\Description" /v "KeyName" /t REG_SZ /d "%BCD_KEY%" /f
REG.exe add "HKLM\%BCD_KEY%\Description" /v "System" /t REG_DWORD /d "1" /f
REG.exe add "HKLM\%BCD_KEY%\Description" /v "TreatAsSystem" /t REG_DWORD /d "1" /f
REG.exe delete "HKLM\%BCD_KEY%" /v "FirmwareModified" /f
REG UNLOAD HKLM\%BCD_KEY%>NUL 2>&1
IF "%CAME_FROM%"=="COMMAND" COPY /Y "%BCD_FILE%" "U:\EFI\Microsoft\Boot\BCD">NUL 2>&1
IF "%CAME_FROM%"=="$ETUP" COPY /Y "%BCD_FILE%" "U:\EFI\Microsoft\Boot\BCD">NUL 2>&1
IF "%CAME_FROM%"=="DISKMGR" COPY /Y "%BCD_FILE%" "U:\EFI\Microsoft\Boot\BCD">NUL 2>&1
DEL /Q /F "%TEMP%\BCD1"&&DEL /Q /F "%TEMP%\0020"&&DEL /Q /F "%BCD_FILE%"
IF DEFINED BCD_SYSTEM_TEMP SET "BCD_SYSTEM_TEMP="&&SET "BCD_SYSTEM="
EXIT /B
:BCD_VHDX
IF "%BCD_SYSTEM%"=="NAME" SET "BCD_NAME=%VHDX_$ETUP%"
IF "%BCD_SYSTEM%"=="SLOT" SET "BCD_NAME=%BCD_CNT%.VHDX"
FOR /f "TOKENS=3" %%a in ('BCDEDIT.EXE /STORE %BCD_FILE% /create /application osloader') do SET BCD_GUID=%%a
BCDEDIT.EXE /STORE "%BCD_FILE%" /SET %BCD_GUID% device vhd=[locate]\$\%BCD_NAME%
BCDEDIT.EXE /STORE "%BCD_FILE%" /SET %BCD_GUID% path \Windows\SYSTEM32\winload.efi
BCDEDIT.EXE /STORE "%BCD_FILE%" /SET %BCD_GUID% osdevice vhd=[locate]\$\%BCD_NAME%
BCDEDIT.EXE /STORE "%BCD_FILE%" /SET %BCD_GUID% systemroot \Windows
IF "%BCD_SYSTEM%"=="NAME" BCDEDIT.EXE /STORE "%BCD_FILE%" /SET %BCD_GUID% description "%BCD_NAME%"
IF "%BCD_SYSTEM%"=="SLOT" BCDEDIT.EXE /STORE "%BCD_FILE%" /SET %BCD_GUID% description "Slot %BCD_CNT%"
BCDEDIT.EXE /STORE "%BCD_FILE%" /displayorder %BCD_GUID% /addfirst
EXIT /B
REM MAKER_MAKER_MAKER_MAKER_MAKER_MAKER_MAKER_MAKER_MAKER_MAKER_MAKER_
:MAKER_START
REM MAKER_MAKER_MAKER_MAKER_MAKER_MAKER_MAKER_MAKER_MAKER_MAKER_MAKER_
@ECHO OFF&&CLS&&CALL:SETS_HANDLER&&CALL:COLOR_CHK&&CALL:TITLE_GNC&&CALL:SCRATCH_PACK_DELETE&&CALL:PAD_LINE
ECHO                          $PK Package Creator&&CALL:PAD_LINE
FOR %%a in (PackName PackType PackTag PackDesc REG_KEY REG_VAL RUN_MOD REG_DAT) DO (CALL SET "%%a=NULL")
IF EXIST "%MAKER_FOLDER%\PACKAGE.$HZ" FOR /F "eol=- TOKENS=1-2 DELIMS==" %%a in (%MAKER_FOLDER%\PACKAGE.$HZ) DO (IF NOT "%%a"=="   " SET "%%a=%%b")
IF NOT "%REG_KEY%"=="NULL" IF NOT "%REG_VAL%"=="NULL" IF NOT "%RUN_MOD%"=="NULL" IF NOT "%REG_DAT%"=="NULL" SET "PACK_COND=ENABLED"
IF "%REG_KEY%"=="NULL" SET "PACK_COND=DISABLED"
IF "%REG_VAL%"=="NULL" SET "PACK_COND=DISABLED"
IF "%RUN_MOD%"=="NULL" SET "PACK_COND=DISABLED"
IF "%REG_DAT%"=="NULL" SET "PACK_COND=DISABLED"
IF NOT "%REG_VAL%"=="NULL" IF NOT "%RUN_MOD%"=="NULL" IF NOT "%REG_DAT%"=="NULL" SET "PACK_COND=ENABLED"
IF "%PACK_COND%"=="ENABLED" ECHO  [Name[%PackName%] [Type[%PackType%] [Tag[%PackTag%] [X-LVL[%PACK_XLVL%] [PMT[%PACK_COND%]&&CALL:PAD_LINE
IF "%PACK_COND%"=="DISABLED" ECHO  [Name[%PackName%] [Type[%PackType%] [Tag[%PackTag%] [X-LVL[%PACK_XLVL%]&&CALL:PAD_LINE
ECHO  [Desc]: %PackDesc%&&CALL:PAD_LINE
IF "%PACK_COND%"=="ENABLED" ECHO  [PERMIT IF]: [%REG_KEY% %REG_VAL%] [%RUN_MOD%] [%REG_DAT%]&&CALL:PAD_LINE
ECHO   PACKAGE CONTENTS:&&SET "BLIST=MAK"&&CALL:FILE_LIST&&CALL:PAD_LINE
IF "%PackType%"=="NULL" ECHO  {X}Project[%MAKER_SLOT%]  {R}estore  {N}ew  {E}xport-Drivers  {I}nspect-System&&CALL:PAD_LINE
IF "%PackType%"=="DRIVER" ECHO  {X}Project[%MAKER_SLOT%] {C}reate {R}estore {N}ew {V}iew {Z}Lvl {P}ermit {E}xport&&CALL:PAD_LINE
IF "%PackType%"=="SCRIPTED" ECHO  {X}Project[%MAKER_SLOT%]  {C}reate  {R}estore  {N}ew  {V}iew  {Z}Lvl  {P}ermit&&CALL:PAD_LINE
IF "%PackType%"=="STORAGE" ECHO  {X}Project[%MAKER_SLOT%]  {C}reate  {R}estore  {N}ew  {V}iew  {Z}Lvl  {P}ermit&&CALL:PAD_LINE
IF NOT "%PackType%"=="NULL" IF NOT "%PackType%"=="DRIVER" IF NOT "%PackType%"=="SCRIPTED" IF NOT "%PackType%"=="STORAGE" ECHO  {X}Project[%MAKER_SLOT%]  [PackType error] {R}estore  {N}ew  {V}iew&&CALL:PAD_LINE
CALL:PAD_PREV&&CALL:MENU_SELECT
IF NOT DEFINED SELECT GOTO:PROG_MAIN
IF "%SELECT%"=="P" CALL:PACK_COND
IF "%SELECT%"=="Z" CALL:PACK_XLVL
IF "%SELECT%"=="C" IF NOT "%PackType%"=="NULL" CALL:MAKER_CREATE&&SET "SELECT="
IF "%SELECT%"=="N" SET "EXAMPLE_MODE=CREATE"&&CALL:PACKEX_MENU_START&&SET "SELECT="
IF "%SELECT%"=="R" SET "PICK=$PK"&&CALL:FILE_PICK&&CALL:MAKER_RESTORE&&SET "SELECT="
IF "%SELECT%"=="E" IF NOT "%PackType%"=="SCRIPTED" IF NOT "%PackType%"=="STORAGE" CALL:MAKER_EXPORT&&SET "SELECT="
IF "%SELECT%"=="I" IF NOT "%PackType%"=="SCRIPTED" IF NOT "%PackType%"=="STORAGE" CALL:MAKER_INSPECT&&SET "SELECT="
IF "%SELECT%"=="V" SET "EDIT_SETUP=1"&&SET "EDIT_MANIFEST=1"&&SET "EDIT_README=1"&&SET "EDIT_CUSTOM="&&CALL:MAKER_EDITOR
IF "%SELECT%"=="X" SET /A "MAKER_SLOT+=1"&&IF "%MAKER_SLOT%" GEQ "5" SET "MAKER_SLOT=1"
IF "%SELECT%"=="X" SET "MAKER_FOLDER=%PROG_SOURCE%\Project%MAKER_SLOT%"
GOTO:MAKER_START
:MAKER_INSPECT
CALL:PAD_LINE&&ECHO                          Driver Inspect Start&&CALL:PAD_LINE&&DISM /ENGLISH /ONLINE /GET-DRIVERS&&CALL:PAD_LINE&&CALL:PAUSED
EXIT /B
:MAKER_EXPORT
SET "PackType=DRIVER"&&IF "%PackName%"=="NULL" SET "PackName=DRIVER_%RANDOM%"
IF NOT EXIST "%MAKER_FOLDER%" MD "%MAKER_FOLDER%">NUL 2>&1
CALL:PAD_LINE&&ECHO                        Exporting System Drivers&&CALL:PAD_LINE&&DISM /ENGLISH /ONLINE /EXPORT-DRIVER /destination:"%MAKER_FOLDER%"&&CALL:PACK_MANIFEST
CALL:PAD_LINE&&ECHO                            Driver Export End&&CALL:PAD_LINE&&CALL:PAUSED
EXIT /B
:MAKER_RESTORE
IF NOT DEFINED $PICK EXIT /B
CALL:PAD_LINE&&ECHO                   Project[%MAKER_SLOT%] folder will be cleared&&CALL:PAD_LINE&&ECHO.                         Press {X} to proceed
CALL:PAD_LINE&&CALL:PAD_PREV&&SET "PROMPT_SET=CONFIRM"&&CALL:PROMPT_SET
IF NOT "%CONFIRM%"=="X" EXIT /B
CALL:PAD_LINE&&ECHO.                          Package Restore Start&&CALL:PAD_LINE
ECHO.                            Restoring Package
IF NOT EXIST "%PROG_SOURCE%\ScratchPack" MD "%PROG_SOURCE%\ScratchPack">NUL 2>&1
DISM /ENGLISH /APPLY-IMAGE /IMAGEFILE:"%$PICK%" /INDEX:2 /APPLYDIR:"%PROG_SOURCE%\ScratchPack">NUL 2>&1
FOR %%a in (PackName PackType PackDesc PackTag REG_KEY REG_VAL RUN_MOD REG_DAT) DO (CALL SET "%%a=NULL")
IF EXIST "%PROG_SOURCE%\ScratchPack\PACKAGE.$HZ" FOR /F "eol=- TOKENS=1-2 DELIMS==" %%a in (%PROG_SOURCE%\ScratchPack\PACKAGE.$HZ) DO (IF NOT "%%a"=="   " SET "%%a=%%b")
FOR %%a in (PackName PackType PackDesc PackTag REG_KEY REG_VAL RUN_MOD REG_DAT) DO (IF NOT DEFINED %%a CALL SET "%%a=NULL")
IF NOT EXIST "%PROG_SOURCE%\ScratchPack\PACKAGE.$HZ" CALL:PAD_LINE&&ECHO PACKAGE %PackName% IS DEFUNCT&&CALL:PAD_LINE&&SET "PACK_DEFUNCT=1"&&CALL:PAUSED
IF EXIST "%MAKER_FOLDER%" RD /S /Q "%MAKER_FOLDER%">NUL 2>&1
IF NOT EXIST "%MAKER_FOLDER%" MD "%MAKER_FOLDER%">NUL 2>&1
MOVE /Y "%PROG_SOURCE%\ScratchPack\PACKAGE.$HZ" "%MAKER_FOLDER%">NUL 2>&1
DISM /ENGLISH /APPLY-IMAGE /IMAGEFILE:"%$PICK%" /INDEX:1 /APPLYDIR:"%MAKER_FOLDER%"
ECHO.&&CALL:PAD_LINE&&ECHO.                          Package Restore End&&CALL:PAD_LINE&&CALL:PAUSED
EXIT /B
:MAKER_CREATE
SET "PACK_FAIL="&&CALL:PAD_LINE&&ECHO.                         Package Create Start&&CALL:PAD_LINE
ECHO.                           Creating Package&&CALL:SCRATCH_PACK_DELETE
IF NOT EXIST "%MAKER_FOLDER%\*.*" SET "PACK_FAIL=1"&&CALL:PAD_LINE&&ECHO.Project%MAKER_SLOT% is empty&&CALL:PAD_LINE&&CALL:PAUSED
IF NOT DEFINED PackName SET "PACK_FAIL=1"&&CALL:PAD_LINE&&ECHO.PackName is Empty&&CALL:PAD_LINE&&CALL:PAUSED
IF NOT DEFINED PackType SET "PACK_FAIL=1"&&CALL:PAD_LINE&&ECHO.PackType is Empty&&CALL:PAD_LINE&&CALL:PAUSED
IF DEFINED PACK_FAIL EXIT /B
IF NOT EXIST "%PROG_SOURCE%\ScratchPack" MD "%PROG_SOURCE%\ScratchPack">NUL 2>&1
MOVE /Y "%MAKER_FOLDER%\PACKAGE.$HZ" "%PROG_SOURCE%\ScratchPack">NUL 2>&1
DISM /ENGLISH /CAPTURE-IMAGE /CAPTUREDIR:"%MAKER_FOLDER%" /IMAGEFILE:"%PACK_FOLDER%\%PackName%.$PK" /COMPRESS:%PACK_XLVL% /NAME:"%PackName%" /CheckIntegrity /Verify
DISM /ENGLISH /APPEND-IMAGE /IMAGEFILE:"%PACK_FOLDER%\%PackName%.$PK" /CAPTUREDIR:"%PROG_SOURCE%\ScratchPack" /NAME:"%PackName%" /Description:$haZZam^^! /CheckIntegrity /Verify>NUL 2>&1
MOVE /Y "%PROG_SOURCE%\ScratchPack\PACKAGE.$HZ" "%MAKER_FOLDER%">NUL 2>&1
CALL:SCRATCH_PACK_DELETE
ECHO.&&CALL:PAD_LINE&&ECHO.                           Package Create End&&CALL:PAD_LINE
IF NOT "%EXAMPLE_MODE%"=="INSTANT" CALL:PAUSED
EXIT /B
:PACK_XLVL
SET /A "PAK_XXX+=1"
IF "%PAK_XXX%" GTR "3" SET "PAK_XXX=1"
IF "%PAK_XXX%"=="1" SET "PACK_XLVL=FAST"
IF "%PAK_XXX%"=="2" SET "PACK_XLVL=MAX"
IF "%PAK_XXX%"=="3" SET "PACK_XLVL=NONE"
EXIT /B
:PACK_COND
CALL ECHO INPUT REG-KEY&&ECHO (CASE SENSITIVE^^!)&&CALL:MENU_SELECT_ANY
CALL SET "REG_KEY=%SELECT%"
IF NOT DEFINED REG_KEY SET "REG_VAL="&&SET "RUN_MOD="&&SET "REG_DAT="&&CALL:PACK_MANIFEST&&EXIT /B
CALL ECHO INPUT REG-VALUE&&ECHO (CASE SENSITIVE^^!)&&CALL:MENU_SELECT_ANY
CALL SET "REG_VAL=%SELECT%"
IF NOT DEFINED REG_VAL EXIT /B
CALL REG QUERY "%REG_KEY%" /V "%REG_VAL%" >$HZ
SET COL1=&&IF EXIST $HZ FOR /F "TOKENS=* DELIMS=" %%1 in ($HZ) DO (SET COL1=%%1)
CALL ECHO [%COL1%]&&DEL $HZ>NUL 2>&1
CALL ECHO INPUT REG-VALUE TARGET DATA&&ECHO (CASE SENSITIVE^^!)&&CALL:MENU_SELECT_ANY
CALL SET "REG_DAT=%SELECT%"
ECHO PERMIT INSTALL IF DATA&&ECHO {1}MATCH&&ECHO {2}DOES NOT MATCH&&CALL:MENU_SELECT
IF NOT DEFINED SELECT SET "RUN_MOD=EQU"
IF "%SELECT%"=="1" SET "RUN_MOD=EQU"
IF "%SELECT%"=="2" SET "RUN_MOD=NEQ"
CALL:PACK_MANIFEST
EXIT /B
:MAKER_EDITOR
IF DEFINED EDIT_SETUP IF EXIST "%MAKER_FOLDER%\PACKAGE.CMD" START NOTEPAD.EXE "%MAKER_FOLDER%\PACKAGE.CMD"
IF DEFINED EDIT_MANIFEST IF EXIST "%MAKER_FOLDER%\PACKAGE.$HZ" START NOTEPAD.EXE "%MAKER_FOLDER%\PACKAGE.$HZ"
IF DEFINED EDIT_README IF EXIST "%MAKER_FOLDER%\README.TXT" START NOTEPAD.EXE "%MAKER_FOLDER%\README.TXT"
IF DEFINED EDIT_CUSTOM IF EXIST "%MAKER_FOLDER%\%EDIT_CUSTOM%" START NOTEPAD.EXE "%MAKER_FOLDER%\%EDIT_CUSTOM%"
SET "EDIT_SETUP="&&SET "EDIT_MANIFEST="&&SET "EDIT_README="&&SET "EDIT_CUSTOM="
EXIT /B
:PAK_LOAD
FOR %%a in (PackName PackType PackDesc PackTag REG_KEY REG_VAL RUN_MOD REG_DAT) DO (CALL SET %%a=NULL)
IF EXIST "%MAKER_FOLDER%\PACKAGE.$HZ" COPY /Y "%MAKER_FOLDER%\PACKAGE.$HZ" "0002"&&FOR /F "eol=- TOKENS=1-2 DELIMS==" %%a in (0002) DO (IF NOT "%%a"=="   " SET "%%a=%%b")
DEL /Q /F "0002">NUL 2>&1
EXIT /B
:PACK_SAVE
MOVE /Y "%MAKER_FOLDER%\PACKAGE.$HZ" "0002"&&FOR /F "eol=- TOKENS=1-2 DELIMS==" %%a in (0002) DO (CALL ECHO %%a=%%%%a%%>>"%MAKER_FOLDER%\PACKAGE.$HZ")
DEL /Q /F "0002">NUL 2>&1
EXIT /B
:PACK_MANIFEST
FOR %%a in (PackName PackType PackDesc PackTag REG_KEY REG_VAL RUN_MOD REG_DAT) DO (IF NOT DEFINED %%a CALL SET %%a=NULL)
(ECHO ----------[Package Manifest]---------=&&ECHO.PackName=%PackName%&&ECHO.PackType=%PackType%&&ECHO.PackDesc=%PackDesc%&&ECHO.PackTag=%PackTag%&&ECHO.REG_KEY=%REG_KEY%&&ECHO.REG_VAL=%REG_VAL%&&ECHO.RUN_MOD=%RUN_MOD%&&ECHO.REG_DAT=%REG_DAT%&&ECHO.Created=%date% %time%&&ECHO ------------[END OF FILE]------------=)>"%MAKER_FOLDER%\PACKAGE.$HZ"
EXIT /B
:PACK_VARS
ECHO;:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;::THE REGISTRY/FILES ARE NORMAL DURING SETUPCOMPLETE,RUNONCE, ^&IMAGEMGR::>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;::         DURING THE IMAGE-APPLY THEY ARE EXTERNALLY MOUNTED          ::>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;::  IMAGE-APPLY=OFFLINE, SETUP-COMPLETE=PRE-LOGON, RUN-ONCE=1ST LOGON  ::>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;:: THESE VARIABLES ARE BUILT-IN AND CAN HELP KEEP A SCRIPT CONSISTANT  ::>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;::      THROUGHOUT THE ENTIRE PROCESS AND FOR LIVE-PACKAGE APPLY       ::>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;::       FOLDER USER:        (%%USRTAR%%)       = ($:\Users\Default)     ::>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;::       FOLDER WINDOWS:     (%%WINTAR%%)       = ($:\Windows)           ::>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;::       FOLDER BASE:        (%%DRVTAR%%)       = ($:)                   ::>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;::       REG-HIVE USER:     (%%HIVE_USER%%)     = (HKCU)                 ::>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;::       REG-HIVE SOFTWARE: (%%HIVE_SOFTWARE%%) = (HKLM\SOFTWARE)        ::>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;::       REG-HIVE SYSTEM:   (%%HIVE_SYSTEM%%)   = (HKLM\SYSTEM)          ::>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;:::::::::::::::::::::::::::::::START:OF:PACK:::::::::::::::::::::::::::::>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO.>>"%MAKER_FOLDER%\PACKAGE.CMD"
EXIT /B
:PACK_END
ECHO.>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;::::::::::::::::::::::::::::::::END:OF:PACK::::::::::::::::::::::::::::::>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::>>"%MAKER_FOLDER%\PACKAGE.CMD"
EXIT /B
:PACK_CONFIG
SET "PACK_ENT="&&FOR /F "DELIMS=" %%G in ('CMD.EXE /D /U /C ECHO %PACK_CONFIG%^| FIND /V ""') do (CALL SET /A "PACK_ENT+=1"&&SET "PACK_CFG=%%G"&&CALL:PACK_CONFIG_CNT)
EXIT /B
:PACK_CONFIG_CNT
SET "PACK_ENT_%PACK_ENT%=%PACK_CFG%"
EXIT /B
:PACKEX_MENU_START
@ECHO OFF&&CLS&&CALL:COLOR_CHK&&CALL:TITLE_GNC
CALL:PAD_LINE&&ECHO                                {TASKS}&&CALL:PAD_LINE
IF "%EXAMPLE_MODE%"=="INSTANT" ECHO  {A1} End Task                                              (INSTANT)
IF "%EXAMPLE_MODE%"=="INSTANT" ECHO  {A2} Start/Stop Service                                    (INSTANT)
IF "%EXAMPLE_MODE%"=="INSTANT" ECHO  {A3} List Accounts                                         (INSTANT)
IF "%EXAMPLE_MODE%"=="INSTANT" ECHO  {FS} FOR-Sight                                             (INSTANT)
ECHO  {M1} Create Local User-Account
ECHO  {M2} Create Local Admin-Account
IF "%EXAMPLE_MODE%"=="INSTANT" GOTO:PACKEX_JUMP
CALL:PAD_LINE&&ECHO                         {New Package Template}&&CALL:PAD_LINE
ECHO  {N01} New Driver Package                                  (DRIVER)
ECHO  {N02} New Scripted Package                                (SCRIPTED)
ECHO  {N03} New Storage Package                                 (STORAGE)
CALL:PAD_LINE&&ECHO                     {Lists: SetupComplete/RunOnce}&&CALL:PAD_LINE
ECHO  {L01} Pagefile Disable                                    (SCRIPTED)
ECHO  {L02} Import Firewall Rules.XML                           (SCRIPTED)
ECHO  {L03} Taskmgr Prefs                                       (SCRIPTED)
ECHO  {L04} Boot Timeout                                        (SCRIPTED)
ECHO  {L05} Computer Name                                       (SCRIPTED)
CALL:PAD_LINE&&ECHO                          {Lists: ImageApply}&&CALL:PAD_LINE
ECHO  {S01} Setup+ Disable Hello                                (SCRIPTED)
ECHO  {S02} Setup+ Unattended Answer-File                       (SCRIPTED)
ECHO  {S03} Setup+ Initial RunOnce/Async Delay Desktop          (SCRIPTED)
CALL:PAD_LINE&&ECHO                          {Any time Any list}&&CALL:PAD_LINE
ECHO  {S04} Quicker Preparing Desktop...                        (SCRIPTED)
ECHO  {S05} WinLogon Verbose                                    (SCRIPTED)
ECHO  {S06} LSA Strict Rules                                    (SCRIPTED)
ECHO  {S07} Local Accounts Only                                 (SCRIPTED)
ECHO  {S08} Store Disable                                       (SCRIPTED)
ECHO  {S09} OneDrive Disable                                    (SCRIPTED)
ECHO  {S10} Cloud Content Disable                               (SCRIPTED)
ECHO  {S11} UAC Prompt Always/Never                             (SCRIPTED)
ECHO  {S12} NotificationCenter Disable                          (SCRIPTED)
ECHO  {S13} Net Discovery Enable/Disable                        (SCRIPTED)
ECHO  {S14} Bluetooth Advertising Enable/Disable                (SCRIPTED)
ECHO  {S15} Virtualization Based Security Enable/Disable        (SCRIPTED)
ECHO  {S16} Disable Explorer URL Access                         (SCRIPTED)
ECHO  {S17} Background Apps Disable                             (SCRIPTED)
ECHO  {S18} DCOM Enable/Disable (Breaks Stuff)                  (SCRIPTED)
ECHO  {S19} Prioritize Ethernet                                 (SCRIPTED)
ECHO  {S20} Prioritize WiFi                                     (SCRIPTED)
ECHO  {S21} Wakelocks General Disable                           (SCRIPTED)
ECHO  {S22} Wakelocks Network Disable                           (SCRIPTED)
ECHO  {S24} VB-Script Execution Disable                         (SCRIPTED)
ECHO  {S25} Feature Updates Threshold                           (SCRIPTED)
ECHO  {S26} Driver Updates Enable/Disable                       (SCRIPTED)
ECHO  {S30} Run Program Every Boot                              (SCRIPTED)
ECHO  {S40} Dark/Light Theme                                    (SCRIPTED)
ECHO  {S41} Wallpaper Single (WIP)
ECHO  {S42} Wallpaper Folder (WIP)
CALL:PAD_LINE&&ECHO                                 {MISC}&&CALL:PAD_LINE
ECHO  {P01} Pack-Permit Demo
ECHO  {P02} MSI Installer Example                               (SCRIPTED)
ECHO  {DBG} DEBUG PAUSE/ECHO-ON/ECHO-OFF                        (SCRIPTED)
ECHO  {DISM} DISM SPECIAL                                       (SCRIPTED)
:PACKEX_JUMP
CALL:PAD_LINE&&CALL:PAD_PREV&&CALL:MENU_SELECT
IF NOT DEFINED SELECT EXIT /B
SET "EXAMPLE=%SELECT%"&&SET "PASS="&&FOR %%a in (N01 N02 N03 A1 A2 A3 FS M1 M2 S01 S02 S03 S04 S05 S06 S07 S08 S09 S10 S11 S12 S13 S14 S15 S16 S17 S18 S19 S20 S21 S22 S24 S25 S26 S30 S40 L01 L02 L03 L04 L05 P01 P02 DBG DISM) DO (IF "%%a"=="%SELECT%" SET "PASS=1")
IF NOT "%PASS%"=="1" EXIT /B
IF "%EXAMPLE_MODE%"=="INSTANT" SET "MAKER_FOLDER=%PROG_SOURCE%\PROJECT_TMP"
IF "%EXAMPLE_MODE%"=="CREATE" CALL:PAD_LINE&&ECHO                   Project[%MAKER_SLOT%] folder will be cleared&&CALL:PAD_LINE&&ECHO.                         Press {X} to proceed&&CALL:PAD_LINE&&CALL:PAD_PREV&&SET "PROMPT_SET=CONFIRM"&&CALL:PROMPT_SET
IF "%EXAMPLE_MODE%"=="CREATE" IF NOT "%CONFIRM%"=="X" EXIT /B
IF EXIST "%MAKER_FOLDER%" RD /S /Q "\\?\%MAKER_FOLDER%">NUL 2>&1
IF NOT EXIST "%MAKER_FOLDER%" MD "%MAKER_FOLDER%">NUL 2>&1
CALL:SCRATCH_PACK_DELETE&&CALL:MOUNT_INT
FOR %%a in (PackName PackType PackDesc PackTag REG_KEY REG_VAL RUN_MOD REG_DAT) DO (CALL SET "%%a=NULL")
CALL:PACK_VARS
IF "%EXAMPLE%"=="N01" CALL:PACKEX_NEW_DRIVER
IF "%EXAMPLE%"=="N02" CALL:PACKEX_NEW_SCRIPTED
IF "%EXAMPLE%"=="N03" CALL:PACKEX_NEW_STORAGE
IF "%EXAMPLE%"=="A1" CALL:PACKEX_TASKMGR_APP
IF "%EXAMPLE%"=="A2" CALL:PACKEX_SVCMGR_APP
IF "%EXAMPLE%"=="A3" CALL:PACKEX_QUERY_USERS
IF "%EXAMPLE%"=="FS" CALL:FOR_SIGHT
IF "%EXAMPLE%"=="A4" CALL:PACKEX_SHUTDOWN
IF "%EXAMPLE%"=="M1" CALL:PACKEX_NEWUSER
IF "%EXAMPLE%"=="M2" CALL:PACKEX_NEWADMIN
IF "%EXAMPLE%"=="S01" CALL:PACKEX_DISABLE_HELLO
IF "%EXAMPLE%"=="S02" CALL:PACKEX_ANSWER_FILE
IF "%EXAMPLE%"=="S03" CALL:PACKEX_DELAY_DESKTOP
IF "%EXAMPLE%"=="S04" CALL:PACKEX_SHORTEN_PREPARING
IF "%EXAMPLE%"=="S05" CALL:PACKEX_WINLOGON_VERBOSE
IF "%EXAMPLE%"=="S06" CALL:PACKEX_LSA_STRICT
IF "%EXAMPLE%"=="S07" CALL:PACKEX_LOCAL_ACCOUNT
IF "%EXAMPLE%"=="S08" CALL:PACKEX_STORE
IF "%EXAMPLE%"=="S09" CALL:PACKEX_ONEDRIVE
IF "%EXAMPLE%"=="S10" CALL:PACKEX_CLOUD_CONTENT
IF "%EXAMPLE%"=="S11" CALL:PACKEX_UAC
IF "%EXAMPLE%"=="S12" CALL:PACKEX_NOTIFICATION_CENTER
IF "%EXAMPLE%"=="S13" CALL:PACKEX_LLT_DISCOVERY_RSPNDR
IF "%EXAMPLE%"=="S14" CALL:PACKEX_BT_VISIBILITY
IF "%EXAMPLE%"=="S15" CALL:PACKEX_VBS
IF "%EXAMPLE%"=="S16" CALL:EXPLORER_URL_ACCESS
IF "%EXAMPLE%"=="S17" CALL:PACKEX_BACKGROUND_APPS
IF "%EXAMPLE%"=="S18" CALL:PACKEX_DCOM
IF "%EXAMPLE%"=="S19" CALL:PACKEX_PRIORITIZE_ETHERNET
IF "%EXAMPLE%"=="S20" CALL:PACKEX_PRIORITIZE_WIFI
IF "%EXAMPLE%"=="S21" CALL:PACKEX_WAKELOCKS
IF "%EXAMPLE%"=="S22" CALL:PACKEX_WAKELOCKS_NET
IF "%EXAMPLE%"=="S24" CALL:PACKEX_SCRIPTHOST
IF "%EXAMPLE%"=="S25" CALL:PACKEX_FEATURE_UPDATE_THRESHOLD
IF "%EXAMPLE%"=="S26" CALL:PACKEX_DRIVER_UPDATE
IF "%EXAMPLE%"=="S30" CALL:PACKEX_STARTUP_USER
IF "%EXAMPLE%"=="S40" CALL:PACKEX_COLOR_MODE_TOGGLE
IF "%EXAMPLE%"=="L01" CALL:PACKEX_PAGEFILE
IF "%EXAMPLE%"=="L02" CALL:PACKEX_FIREWALL_IMPORT
IF "%EXAMPLE%"=="L03" CALL:PACKEX_TASKMGR_PREF
IF "%EXAMPLE%"=="L04" CALL:PACKEX_BOOT_TIMEOUT
IF "%EXAMPLE%"=="L05" CALL:PACKEX_PCNAME
IF "%EXAMPLE%"=="P01" CALL:PACKEX_PACK_PERMIT_EXAMPLE
IF "%EXAMPLE%"=="P02" CALL:PACKEX_MSI_EXAMPLE
IF "%EXAMPLE%"=="DBG" CALL:PACKEX_DEBUG
IF "%EXAMPLE%"=="DISM" CALL:PACKEX_DISM
IF "%PackType%"=="SCRIPTED" CALL:PACK_END
CALL:PACK_MANIFEST>NUL 2>&1
IF "%EXAMPLE_MODE%"=="INSTANT" SET "PackName=%PackName%_TMP"&&CALL:MAKER_CREATE>NUL 2>&1
IF "%EXAMPLE_MODE%"=="INSTANT" SET "IMAGE_PACK=%PACK_FOLDER%\%PackName%.$PK"&&CALL:PACK_INSTALL>NUL 2>&1
IF "%EXAMPLE_MODE%"=="INSTANT" SET "MAKER_FOLDER=%PROG_SOURCE%\Project%MAKER_SLOT%"&&DEL /Q /F "%PACK_FOLDER%\%PackName%.$PK">NUL 2>&1
IF "%EXAMPLE_MODE%"=="INSTANT" RD /S /Q "%PROG_SOURCE%\PROJECT_TMP">NUL 2>&1
IF "%EXAMPLE_MODE%"=="CREATE" IF DEFINED EXAMPLE CALL:MAKER_EDITOR
IF "%PackType%"=="STORAGE" DEL /F "%MAKER_FOLDER%\PACKAGE.CMD">NUL 2>&1
IF "%PackType%"=="DRIVER" DEL /F "%MAKER_FOLDER%\PACKAGE.CMD">NUL 2>&1
SET "EXAMPLE_MODE="&&CALL:SCRATCH_PACK_DELETE
EXIT /B
:SCRATCH_PACK_DELETE
IF EXIST "%PROG_SOURCE%\ScratchPack" DISM /cleanup-MountPoints>NUL 2>&1
IF EXIST "%PROG_SOURCE%\ScratchPack" ATTRIB -R -S -H "%PROG_SOURCE%\ScratchPack" /S /D /L>NUL 2>&1
IF EXIST "%PROG_SOURCE%\ScratchPack" RD /S /Q "\\?\%PROG_SOURCE%\ScratchPack">NUL 2>&1
EXIT /B
:PACKEX_SVCMGR_APP
CLS&&ECHO.&&CALL:PAD_LINE&&ECHO                           The Service Reaper&&CALL:PAD_LINE
IF EXIST $SVC DEL $SVC>NUL
SET SVC_MODE=&&REG QUERY "%HIVE_SYSTEM%\ControlSet001\Services" /f Type /c /e /s>>"$SVC"
SET SVC_CNT=&&FOR /F "TOKENS=1-9 DELIMS=\ " %%a in ($SVC) DO (
IF "%%a"=="HKEY_LOCAL_MACHINE" IF NOT "%%e"=="" CALL SET SVC_NAME=%%e%%f%%g%%h%%i
IF "%%a"=="Type" IF "%%c"=="0x10" CALL:SVC_QUERY
IF "%%a"=="Type" IF "%%c"=="0x20" CALL:SVC_QUERY)
IF EXIST $SVC DEL $SVC>NUL
CALL:PAD_LINE&&ECHO                     {1}Start Service {2}Stop Service&&CALL:PAD_LINE&&CALL:PAD_PREV&&CALL:MENU_SELECT
IF NOT "%SELECT%"=="1" IF NOT "%SELECT%"=="2"  EXIT /B
IF "%SELECT%"=="1" SET "SVC_MODE=START"
IF "%SELECT%"=="2" SET "SVC_MODE=STOP"
CALL:PAD_LINE&&ECHO                    %SVC_MODE% Which SVC{#}?&&CALL:PAD_LINE&&CALL:PAD_PREV&&CALL:MENU_SELECT
SET "CHECK=NUM"&&CALL:CHECK
IF DEFINED ERROR EXIT /B
IF "%SVC_MODE%"=="START" CALL SC START %%SVC_CNT_%SELECT%%%
IF "%SVC_MODE%"=="STOP" CALL SC STOP %%SVC_CNT_%SELECT%%%
SET "SVC_MODE="&&CALL:PAD_LINE&&CALL:PAUSED
GOTO:PACKEX_SVCMGR_APP
:SVC_QUERY
CALL SET /A "SVC_CNT+=1"
FOR /F "TOKENS=1-9 DELIMS= " %%1 in ('SC QUERY %SVC_NAME%') DO (IF "%%1"=="STATE" CALL SET "SVC_STATE=%%4")
CALL ECHO  {%SVC_CNT%} 	[State[%SVC_STATE%] 	[%SVC_NAME%]&&CALL SET SVC_CNT_%SVC_CNT%=%SVC_NAME%
EXIT /B
:PACKEX_TASKMGR_APP
CLS&&ECHO.
CALL:PAD_LINE&&ECHO                            The Task Reaper&&CALL:PAD_LINE
TASKLIST /FO LIST>$TSK
SET TSK_CNT=&&FOR /F "TOKENS=1-9 DELIMS=: " %%a in ($TSK) DO (
IF "%%a"=="Image" CALL SET TSK_NAME=%%c%%d%%e%%f%%g
IF "%%a"=="PID" CALL SET TSK_PID=%%b
IF "%%a"=="Mem" CALL SET TSK_MEM=%%c&&CALL:TASK_QUERY)
IF EXIST $TSK DEL $TSK>NUL
CALL:PAD_LINE&&ECHO                            End Which Task{#}?&&CALL:PAD_LINE&&CALL:PAD_PREV&&CALL:MENU_SELECT
SET "CHECK=NUM"&&CALL:CHECK
IF DEFINED ERROR EXIT /B
CALL TASKKILL /F /IM %%TSK_CNT_%SELECT%%%
CALL:PAD_LINE&&CALL:PAUSED
GOTO:PACKEX_TASKMGR_APP
:TASK_QUERY
CALL SET /A "TSK_CNT+=1"
CALL ECHO  {%TSK_CNT%} 	[PID[%TSK_PID%] 	[%TSK_NAME%]   	[MEM[%TSK_MEM%] KB&&CALL SET TSK_CNT_%TSK_CNT%=%TSK_NAME%
EXIT /B
:PACKEX_QUERY_USERS
CLS&&CALL:PAD_LINE&&ECHO                       USER ACCOUNT ENUMERATION&&CALL:PAD_LINE
NET USER>$USR
FOR /F "TOKENS=1-9 SKIP=4 DELIMS= " %%a IN ($USR) DO (
IF NOT "%%a"=="The" IF NOT "%%a"=="" NET USER %%a&&CALL:PAD_LINE
IF NOT "%%a"=="The" IF NOT "%%b"=="" NET USER %%b&&CALL:PAD_LINE
IF NOT "%%a"=="The" IF NOT "%%c"=="" NET USER %%c&&CALL:PAD_LINE
IF NOT "%%a"=="The" IF NOT "%%d"=="" NET USER %%d&&CALL:PAD_LINE
IF NOT "%%a"=="The" IF NOT "%%e"=="" NET USER %%e&&CALL:PAD_LINE
IF NOT "%%a"=="The" IF NOT "%%f"=="" NET USER %%f&&CALL:PAD_LINE
IF NOT "%%a"=="The" IF NOT "%%g"=="" NET USER %%g&&CALL:PAD_LINE
IF NOT "%%a"=="The" IF NOT "%%h"=="" NET USER %%h&&CALL:PAD_LINE
IF NOT "%%a"=="The" IF NOT "%%i"=="" NET USER %%i&&CALL:PAD_LINE)
DEL /Q /F $USR>NUL
ECHO                     END OF USER ACCOUNT ENUMERATION&&CALL:PAD_LINE&&CALL:PAUSED
EXIT /B
:FOR_SIGHT
@ECHO OFF&&CLS&&CALL:PAD_LINE&&ECHO  FOR~SIGHT&&CALL:PAD_LINE
IF NOT DEFINED FOR_SAV SET "FOR_SAV=FRESH"&&SET "CLM_TGT=1"&&SET "CMD_MODE=INT"&&SET "GET_ROW=1"
IF EXIST EXT.CMD SET /P CUR_CMD=<EXT.CMD
IF NOT DEFINED CUR_CMD SET "CUR_CMD=VER"
IF DEFINED CUR_CMD %CUR_CMD% >$FOR
SET "ROW="&&IF EXIST "$FOR" FOR /F "TOKENS=1-9 DELIMS=<>()" %%A IN ($FOR) DO (SET "ARGUE=%%A%%B%%C%%D%%E%%F%%G%%H"&&CALL:ARGUE)
IF EXIST "$FOR" SET "MARK="&&DEL /F $FOR>NUL 2>&1
IF DEFINED FS_LAST ECHO  {FOR} %FS_LAST%
CALL:PAD_LINE&&ECHO  {T}CLM[%CLM_TGT%] {F}ull  {R}ef          {G}o  {V}iew  {M}ode[%FOR_SAV%]  {Q}uit&&CALL:PAD_LINE
ECHO  {D}ELIMS[%DELIMS%]  {C}MD [%CUR_CMD%]&&CALL:PAD_LINE&&ECHO                  Press (Enter) to reparse FOR results&&CALL:MENU_SELECT
IF "%SELECT%"=="Q" EXIT /B
IF "%SELECT%"=="G" START CMD /C FOR.CMD
IF "%SELECT%"=="V" START NOTEPAD.EXE FOR.CMD
IF "%SELECT%"=="T" IF NOT DEFINED ROW_EXT SET "SELECT="&&SET /A "CLM_TGT+=1"&&IF "%CLM_TGT%"=="9" SET "CLM_TGT=1"
IF "%SELECT%"=="T" IF DEFINED ROW_EXT SET "SELECT="&&SET /A "CLM_TGT+=1"&&IF "%CLM_TGT%"=="20" SET "CLM_TGT=1"
IF "%SELECT%"=="M" IF "%FOR_SAV%"=="FRESH" SET "FOR_SAV=REUSE"&&SET "SELECT="&&GOTO:FOR_SIGHT
IF "%SELECT%"=="M" IF "%FOR_SAV%"=="REUSE" SET "FOR_SAV=FRESH"&&SET "SELECT="&&GOTO:FOR_SIGHT
IF "%SELECT%"=="F" IF NOT DEFINED ROW_EXT SET "ROW_EXT=1"&&SET "SELECT="&&GOTO:FOR_SIGHT
IF "%SELECT%"=="F" IF DEFINED ROW_EXT SET "ROW_EXT="&&SET "SELECT="&&SET "CLM_TGT=1"&&GOTO:FOR_SIGHT
IF "%SELECT%"=="R" IF NOT DEFINED FOR_REF SET "FOR_REF=1"&&SET "SELECT="&&GOTO:FOR_SIGHT
IF "%SELECT%"=="R" IF DEFINED FOR_REF SET "FOR_REF="&&SET "SELECT="&&GOTO:FOR_SIGHT
IF "%SELECT%"=="C" IF NOT EXIST EXT.CMD ECHO;VER.EXE>EXT.CMD
IF "%SELECT%"=="C" SET "SELECT="&&CALL:PAD_LINE&&START NOTEPAD.EXE EXT.CMD&&GOTO:FOR_SIGHT
IF "%SELECT%"=="D" SET SELECT=&&SET "PROMPT_SET=DELIMS"&&CALL:PROMPT_SET_ANY
IF "%SELECT%" GTR "0" SET "SKIP_CNT=%SELECT%"&&SET "ROW_TGT=%SELECT%"
IF "%SELECT%" GTR "0" SET "MARK=1"&&SET /A "SKIP_CNT-=1"
IF "%SELECT%" GTR "0" CALL SET "SKIPPER=SKIP=%SKIP_CNT%"
IF "%SELECT%"=="1" SET "SKIPPER="
GOTO:FOR_SIGHT
:PACKEX_NEW_DRIVER
SET "PackType=DRIVER"&&CALL:PAD_LINE&&ECHO                        - New Driver Pack Name -&&CALL:PAD_LINE&&SET "PROMPT_SET=PackName"&&CALL:PROMPT_SET_ANY
IF NOT DEFINED PackName SET PackName=Driver_%RANDOM%
EXIT /B
:PACKEX_NEW_SCRIPTED
SET "PackType=SCRIPTED"&&CALL:PAD_LINE&&ECHO                       - New Scripted Pack Name -&&CALL:PAD_LINE&&SET "PROMPT_SET=PackName"&&CALL:PROMPT_SET_ANY
IF NOT DEFINED PackName SET PackName=Scripted_%RANDOM%
EXIT /B
:PACKEX_NEW_STORAGE
SET "PackType=STORAGE"&&CALL:PAD_LINE&&ECHO                        - New Storage Pack Name -&&CALL:PAD_LINE&&SET "PROMPT_SET=PackName"&&CALL:PROMPT_SET_ANY
IF NOT DEFINED PackName SET PackName=Storage_%RANDOM%
EXIT /B
:PACKEX_NEWUSER
SET "PackType=SCRIPTED"&&SET "PackName=Add_User"&&SET "PackDesc=Creates Local User-Account"&&ECHO       - Username? -&&ECHO     - Enter username -&&ECHO   - 0-9 A-Z - no spaces -&&SET "PROMPT_SET=NEWUSER1"&&CALL:PROMPT_SET_ANY
SET "CHAR_STR=%NEWUSER1%"&&SET "CHAR_CHK= "&&CALL:CHAR_CHK
IF DEFINED CHAR_FLG SET "NEWUSER1="
IF NOT DEFINED NEWUSER1 SET "NEWUSER1=UserName"
ECHO;Net User %NEWUSER1% /add>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Net User %NEWUSER1% /passwordreq:No>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Net User %NEWUSER1% /passwordchg:No>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Net Accounts /maxpwage:unlimited>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;WMIC USERACCOUNT WHERE Name="%NEWUSER1%" SET PasswordExpires=FALSE>>"%MAKER_FOLDER%\PACKAGE.CMD"
EXIT /B
:PACKEX_NEWADMIN
SET "PackType=SCRIPTED"&&SET "PackName=Add_Admin"&&SET "PackDesc=Creates Local Admin-Account"&&ECHO       - Username? -&&ECHO     - Enter username -&&ECHO   - 0-9 A-Z - no spaces -&&SET "PROMPT_SET=NEWUSER1"&&CALL:PROMPT_SET_ANY
SET "CHAR_STR=%NEWUSER1%"&&SET "CHAR_CHK= "&&CALL:CHAR_CHK
IF DEFINED CHAR_FLG SET "NEWUSER1="
IF NOT DEFINED NEWUSER1 SET "NEWUSER1=UserName"
ECHO;Net User %NEWUSER1% /add>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Net User %NEWUSER1% /passwordreq:No>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Net User %NEWUSER1% /passwordchg:No>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Net Accounts /maxpwage:unlimited>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Net localgroup Administrators %NEWUSER1% /add>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;WMIC USERACCOUNT WHERE Name="%NEWUSER1%" SET PasswordExpires=FALSE>>"%MAKER_FOLDER%\PACKAGE.CMD"
EXIT /B
:PACKEX_BOOT_TIMEOUT
SET "PackType=SCRIPTED"&&SET "PackName=Boot_Timeout"&&SET "PackDesc=Change Boot Timeout"
ECHO;::LIVE COMMAND, NEEDS TO BE APPLIED LIVE, SETUPCOMPLETE, OR RUNONCE>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO   - ENTER BOOT TIMEOUT IN SECONDS -
SET "PROMPT_SET=BOOT_TIMEOUT"&&CALL:PROMPT_SET
IF NOT DEFINED BOOT_TIMEOUT EXIT /B
ECHO;BCDEDIT /TIMEOUT %BOOT_TIMEOUT% >>"%MAKER_FOLDER%\PACKAGE.CMD"
EXIT /B
:PACKEX_STARTUP_USER
SET "PackType=SCRIPTED"&&SET "PackName=UserLogon_Run"&&SET "PackDesc=Run a Program or batch at User Login"
ECHO;Reg.exe add "%%HIVE_SOFTWARE%%\Microsoft\Windows\CurrentVersion\Run" /v "RunUser" /t REG_EXPAND_SZ /d "%%PROGRAMDATA%%\USERLOGON.CMD" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;ECHO;EXPLORER.EXE C:\WINDOWS\SYSTEM32\NOTEPAD.EXE^>"%%PROGRAMDATA%%\USERLOGON.CMD">>"%MAKER_FOLDER%\PACKAGE.CMD"
EXIT /B
:PACKEX_AUTOPILOT_STRAP
SET "PackType=SCRIPTED"&&SET "PackName=AUTOPILOT_ENABLED"&&SET "PackDesc=AUTOPILOT Enabled and NextBoot to Recovery"
ECHO;::LIVE COMMAND, NEEDS TO BE APPLIED LIVE, SETUPCOMPLETE, OR RUNONCE>>"%MAKER_FOLDER%\PACKAGE.CMD"
EXIT /B
:PACKEX_PCNAME
SET "PackType=SCRIPTED"&&SET "PackName=PC_Name"&&SET "PackDesc=Renames the PC"&&ECHO       - Computer Name? -&&ECHO     - ENTER NAME -&&ECHO   - 0-9 A-Z - NO SPACES -&&SET "PROMPT_SET=PC_NAME"&&CALL:PROMPT_SET_ANY
ECHO;::LIVE COMMAND, NEEDS TO BE APPLIED LIVE, SETUPCOMPLETE, OR RUNONCE>>"%MAKER_FOLDER%\PACKAGE.CMD"
SET "CHAR_STR=%PC_NAME%"&&SET "CHAR_CHK= "&&CALL:CHAR_CHK
IF DEFINED CHAR_FLG SET "PC_NAME="
IF NOT DEFINED PC_NAME SET "PC_NAME=Computer"
ECHO;WMIC COMPUTERSYSTEM WHERE Name="Present Name" CALL RENAME Name="%PC_NAME%">>"%MAKER_FOLDER%\PACKAGE.CMD"
EXIT /B
:PACKEX_PAGEFILE
SET "PackType=SCRIPTED"&&SET "PackName=Pagefile_Disable"&&SET "PackDesc=Disable Pagefile"
ECHO;::LIVE COMMAND, NEEDS TO BE APPLIED LIVE, SETUPCOMPLETE, OR RUNONCE>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Reg.exe add "%%HIVE_SYSTEM%%\ControlSet001\Control\Session Manager\Memory Management" /v "ClearPageFileAtShutdown" /t REG_DWORD /d "1" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Reg.exe add "%%HIVE_SYSTEM%%\ControlSet001\Control\Session Manager\Memory Management" /v "DisablePagingExecutive" /t REG_DWORD /d "1" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Reg.exe add "%%HIVE_SYSTEM%%\ControlSet001\Control\Session Manager\Memory Management" /v "PagingFiles" /t REG_MULTI_SZ /d "" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Reg.exe add "%%HIVE_SYSTEM%%\ControlSet001\Control\Session Manager\Memory Management" /v "ExistingPageFiles" /t REG_MULTI_SZ /d "" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;powercfg.exe -h off>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;wmic computersystem where name="%%computername%%" set AutomaticManagedPagefile=False>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;wmic pagefileset where name="C:\\pagefile.sys" delete>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;wmic pagefileset where name="D:\\pagefile.sys" delete>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;wmic pagefileset where name="E:\\pagefile.sys" delete>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;wmic pagefileset where name="F:\\pagefile.sys" delete>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;wmic pagefileset where name="G:\\pagefile.sys" delete>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;wmic pagefileset where name="H:\\pagefile.sys" delete>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;wmic pagefileset where name="N:\\pagefile.sys" delete>>"%MAKER_FOLDER%\PACKAGE.CMD"
EXIT /B
:PACKEX_FIREWALL_IMPORT
SET "PackType=SCRIPTED"&&SET "PackName=Firewall_Import"&&SET "PackDesc=Import Windows Firewall Config .XML"
ECHO;::LIVE COMMAND, NEEDS TO BE APPLIED LIVE, SETUPCOMPLETE, OR RUNONCE>>"%MAKER_FOLDER%\PACKAGE.CMD"
NETSH advfirewall EXPORT "%MAKER_FOLDER%\FirewallPolicy.wfw"
ECHO;NETSH advfirewall IMPORT "FirewallPolicy.wfw">>"%MAKER_FOLDER%\PACKAGE.CMD"
EXIT /B
:PACKEX_BACKGROUND_APPS
SET "PackType=SCRIPTED"&&SET "PackName=BackgroundApps_Disable"&&SET "PackDesc=Disable Background Applications"
ECHO;Reg.exe add "%%HIVE_USER%%\SOFTWARE\Microsoft\Windows\CurrentVersion\BackgroundAccessApplications" /v "GlobalUserDisabled" /t REG_DWORD /d "1" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Reg.exe add "%%HIVE_SOFTWARE%%\Policies\Microsoft\Edge" /v "BackgroundModeEnabled" /t REG_DWORD /d "0" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
EXIT /B
:PACKEX_WAKELOCKS_NET
SET "PackType=SCRIPTED"&&SET "PackName=Wake_Net_Disable"&&SET "PackDesc=Disable Network Adapter Wakelocks"
ECHO;Reg.exe add "%%HIVE_SYSTEM%%\ControlSet001\Control\Power\PowerSettings\F15576E8-98B7-4186-B944-EAFA664402D9\DefaultPowerSchemeValues\381b4222-f694-41f0-9685-ff5bb260df2e" /v "AcSettingIndex" /t REG_DWORD /d "0" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Reg.exe add "%%HIVE_SYSTEM%%\ControlSet001\Control\Power\PowerSettings\F15576E8-98B7-4186-B944-EAFA664402D9\DefaultPowerSchemeValues\381b4222-f694-41f0-9685-ff5bb260df2e" /v "DcSettingIndex" /t REG_DWORD /d "0" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
EXIT /B
:PACKEX_WAKELOCKS
SET "PackType=SCRIPTED"&&SET "PackName=Wake_Disable"&&SET "PackDesc=Disable Wakelocks"
ECHO;Reg.exe add "%%HIVE_SYSTEM%%\ControlSet001\Control\Power\PowerSettings\238C9FA8-0AAD-41ED-83F4-97BE242C8F20\bd3b718a-0680-4d9d-8ab2-e1d2b4ac806d\DefaultPowerSchemeValues\381b4222-f694-41f0-9685-ff5bb260df2e" /v "AcSettingIndex" /t REG_DWORD /d "0" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Reg.exe add "%%HIVE_SYSTEM%%\ControlSet001\Control\Power\PowerSettings\238C9FA8-0AAD-41ED-83F4-97BE242C8F20\bd3b718a-0680-4d9d-8ab2-e1d2b4ac806d\DefaultPowerSchemeValues\381b4222-f694-41f0-9685-ff5bb260df2e" /v "DcSettingIndex" /t REG_DWORD /d "0" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
EXIT /B
:PACKEX_LSA_STRICT
SET "PackType=SCRIPTED"&&SET "PackName=LSA_Strict"&&SET "PackDesc=Strict Ruleset For Local Security Authentication"
ECHO;Reg.exe add "%%HIVE_SYSTEM%%\ControlSet001\Control\Lsa" /v "LimitBlankPasswordUse" /t REG_DWORD /d "1" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Reg.exe add "%%HIVE_SYSTEM%%\ControlSet001\Control\LSA" /v "LsaCfgFlags " /t REG_DWORD /d "1" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Reg.exe add "%%HIVE_SYSTEM%%\ControlSet001\Control\Lsa" /v "LsaPid" /t REG_DWORD /d "632" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Reg.exe add "%%HIVE_SYSTEM%%\ControlSet001\Control\Lsa" /v "ProductType" /t REG_DWORD /d "125" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Reg.exe add "%%HIVE_SYSTEM%%\ControlSet001\Control\Lsa" /v "RunAsPPL" /t REG_DWORD /d "1" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Reg.exe add "%%HIVE_SYSTEM%%\ControlSet001\Control\Lsa" /v "SubmitControl" /t REG_DWORD /d "0" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Reg.exe add "%%HIVE_SYSTEM%%\ControlSet001\Control\Lsa" /v "disabledomaincreds" /t REG_DWORD /d "1" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Reg.exe add "%%HIVE_SYSTEM%%\ControlSet001\Control\Lsa" /v "everyoneincludesanonymous" /t REG_DWORD /d "0" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Reg.exe add "%%HIVE_SYSTEM%%\ControlSet001\Control\Lsa" /v "forceguest" /t REG_DWORD /d "0" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Reg.exe add "%%HIVE_SYSTEM%%\ControlSet001\Control\Lsa" /v "NoLmHash" /t REG_DWORD /d "1" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Reg.exe add "%%HIVE_SYSTEM%%\ControlSet001\Control\Lsa" /v "restrictanonymous" /t REG_DWORD /d "1" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Reg.exe add "%%HIVE_SYSTEM%%\ControlSet001\Control\Lsa" /v "restrictanonymoussam" /t REG_DWORD /d "1" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Reg.exe add "%%HIVE_SYSTEM%%\ControlSet001\Control\Lsa" /v "RestrictRemoteSAM" /t REG_SZ /d "O:BAG:BAD:(A;;RC;;;BA)" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Reg.exe add "%%HIVE_SYSTEM%%\ControlSet001\Control\Lsa\MSV1_0" /v "allownullsessionfallback" /t REG_DWORD /d "0" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
EXIT /B
:PACKEX_STORE
SET "PackType=SCRIPTED"&&SET "PackName=Store_Disable"&&SET "PackDesc=Disable Store"
ECHO;Reg.exe add "%%HIVE_SOFTWARE%%\Policies\Microsoft\WindowsStore" /v "RemoveWindowsStore" /t REG_DWORD /d "1" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Reg.exe add "%%HIVE_USER%%\SOFTWARE\Policies\Microsoft\Windows\Explorer" /v "NoUseStoreOpenWith" /t REG_DWORD /d "1" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
EXIT /B
:PACKEX_ONEDRIVE
SET "PackType=SCRIPTED"&&SET "PackName=OneDrive_Disable"&&SET "PackDesc=Disable OneDrive"
ECHO;Reg.exe add "%%HIVE_USER%%\SOFTWARE\Classes\CLSID\{018D5C66-4533-4307-9B53-224DE2ED1FE6}" /v "SYSTEM.IsPinnedToNameSpaceTree" /t REG_DWORD /d "0" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Reg.exe delete "%%HIVE_SYSTEM%%\ControlSet001\Services\OneSyncSvc" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Reg.exe add "%%HIVE_SYSTEM%%\ControlSet001\Services\OneSyncSvc" /v "ImagePath" /t REG_EXPAND_SZ /d "NUL" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
EXIT /B
:PACKEX_CLOUD_CONTENT
SET "PackType=SCRIPTED"&&SET "PackName=Cloud_Disable"&&SET "PackDesc=Disable Cloud-Content"
ECHO;Reg.exe add "%%HIVE_SOFTWARE%%\Policies\Microsoft\Windows\CloudContent" /ve /t REG_SZ /d "" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Reg.exe add "%%HIVE_SOFTWARE%%\Policies\Microsoft\Windows\CloudContent" /v "DisableWindowsConsumerFeatures" /t REG_DWORD /d "1" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Reg.exe add "%%HIVE_SOFTWARE%%\Policies\Microsoft\Windows\CloudContent" /v "DisableSoftLanding" /t REG_DWORD /d "1" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Reg.exe add "%%HIVE_SOFTWARE%%\Policies\Microsoft\Windows\CloudContent" /v "DisableWindowsSpotlightFeatures" /t REG_DWORD /d "1" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
EXIT /B
:PACKEX_UAC
SET "PackType=SCRIPTED"&&SET "PACK_CFG_1=111"&&SET "PACK_CFG_2=000"&&ECHO     - UAC Prompt -&&ECHO {1}Enable&&ECHO {2}Disable&&CALL:MENU_SELECT
IF "%SELECT%"=="1" SET "PACK_CONFIG=%PACK_CFG_1%"&&SET "PackName=UAC_Prompt_Always_On"&&SET "PackDesc=UAC Always Prompt"
IF "%SELECT%"=="2" SET "PACK_CONFIG=%PACK_CFG_2%"&&SET "PackName=UAC_Prompt_Always_Off"&&SET "PackDesc=UAC Never Prompt"
CALL:PACK_CONFIG
ECHO;Reg.exe add "%%HIVE_SOFTWARE%%\Microsoft\Windows\CurrentVersion\Policies\SYSTEM" /v "ConsentPromptBehaviorAdmin" /t REG_DWORD /d "%PACK_ENT_1%" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Reg.exe add "%%HIVE_SOFTWARE%%\Microsoft\Windows\CurrentVersion\Policies\SYSTEM" /v "ConsentPromptBehaviorUser" /t REG_DWORD /d "%PACK_ENT_2%" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Reg.exe add "%%HIVE_SOFTWARE%%\Microsoft\Windows\CurrentVersion\Policies\SYSTEM" /v "FilterAdministratorToken" /t REG_DWORD /d "%PACK_ENT_3%" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
EXIT /B
:PACKEX_NOTIFICATION_CENTER
SET "PackType=SCRIPTED"&&SET "PACK_CFG_1=0"&&SET "PACK_CFG_2=1"&&ECHO   - Notification Center -&&ECHO {1}Enable&&ECHO {2}Disable&&CALL:MENU_SELECT
IF "%SELECT%"=="1" SET "PACK_CONFIG=%PACK_CFG_1%"&&SET "PackName=Notification_Center_Enable"&&SET "PackDesc=Enable Notification Center"
IF "%SELECT%"=="2" SET "PACK_CONFIG=%PACK_CFG_2%"&&SET "PackName=Notification_Center_Diable"&&SET "PackDesc=Disable Notification Center"
CALL:PACK_CONFIG
ECHO;Reg.exe add "%%HIVE_USER%%\SOFTWARE\Policies\Microsoft\Windows\Explorer" /v "DisableNotificationCenter" /t REG_DWORD /d "%PACK_ENT_1%" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
EXIT /B
:PACKEX_BT_VISIBILITY
SET "PackType=SCRIPTED"&&SET "PACK_CFG_1=1111"&&SET "PACK_CFG_2=0000"&&ECHO   - Bluetooth Advertising -&&ECHO {1}Enable&&ECHO {2}Disable&&CALL:MENU_SELECT
IF "%SELECT%"=="1" SET "PACK_CONFIG=%PACK_CFG_1%"&&SET "PackName=BT_Visibility_On"&&SET "PackDesc=Enable Bluetooth Advertising"
IF "%SELECT%"=="2" SET "PACK_CONFIG=%PACK_CFG_2%"&&SET "PackName=BT_Visibility_Off"&&SET "PackDesc=Disable Bluetooth Advertising"
CALL:PACK_CONFIG
ECHO;Reg.exe add "%%HIVE_SOFTWARE%%\Microsoft\PolicyManager\current\device\Bluetooth" /v "AllowAdvertising" /t REG_DWORD /d "%PACK_ENT_1%" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Reg.exe add "%%HIVE_SOFTWARE%%\Microsoft\PolicyManager\current\device\Browser" /v "AllowAddressBarDropdown" /t REG_DWORD /d "%PACK_ENT_2%" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Reg.exe add "%%HIVE_SOFTWARE%%\Microsoft\PolicyManager\current\device\SYSTEM" /v "AllowExperimentation" /t REG_DWORD /d "%PACK_ENT_3%" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Reg.exe add "%%HIVE_SOFTWARE%%\Microsoft\Windows\CurrentVersion\SmartGlass" /v "BluetoothPolicy" /t REG_DWORD /d "%PACK_ENT_4%" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
EXIT /B
:PACKEX_LLT_DISCOVERY_RSPNDR
SET "PackType=SCRIPTED"&&SET "PACK_CFG_1=1110"&&SET "PACK_CFG_2=0001"&&ECHO  - Link-Layer-Topology Discovery Responder Driver -&&ECHO {1}Enable&&ECHO {2}Disable&&CALL:MENU_SELECT
IF "%SELECT%"=="1" SET "PACK_CONFIG=%PACK_CFG_1%"&&SET "PackName=LLT_Enable"&&SET "PackDesc=Enable Link-Layer-Topology Discovery Responder Driver"
IF "%SELECT%"=="2" SET "PACK_CONFIG=%PACK_CFG_2%"&&SET "PackName=LLT_Disable"&&SET "PackDesc=Disable Link-Layer-Topology Discovery Responder Driver"
CALL:PACK_CONFIG
ECHO;Reg.exe add "%%HIVE_SOFTWARE%%\Policies\Microsoft\Windows\LLTD" /v "EnableRspndr" /t REG_DWORD /d "%PACK_ENT_1%" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Reg.exe add "%%HIVE_SOFTWARE%%\Policies\Microsoft\Windows\LLTD" /v "AllowRspndrOnDomain" /t REG_DWORD /d "%PACK_ENT_2%" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Reg.exe add "%%HIVE_SOFTWARE%%\Policies\Microsoft\Windows\LLTD" /v "AllowRspndrOnPublicNet" /t REG_DWORD /d "%PACK_ENT_3%" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Reg.exe add "%%HIVE_SOFTWARE%%\Policies\Microsoft\Windows\LLTD" /v "ProhibitRspndrOnPrivateNet" /t REG_DWORD /d "%PACK_ENT_4%" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
EXIT /B
:PACKEX_VBS
SET "PackType=SCRIPTED"&&SET "PACK_CFG_1=110101"&&SET "PACK_CFG_2=000002"&&ECHO  - Virtualization Based Security -&&ECHO {1}Enable&&ECHO {2}Disable&&CALL:MENU_SELECT
IF "%SELECT%"=="1" SET "PACK_CONFIG=%PACK_CFG_1%"&&SET "PackName=VBS_Enable"&&SET "PackDesc=Enable Virtualization Based Security"
IF "%SELECT%"=="2" SET "PACK_CONFIG=%PACK_CFG_2%"&&SET "PackName=VBS_Disable"&&SET "PackDesc=Disable Virtualization Based Security"
CALL:PACK_CONFIG
ECHO;Reg.exe add "%%HIVE_SYSTEM%%\ControlSet001\Control\DeviceGuard" /v "EnableVirtualizationBasedSecurity" /t REG_DWORD /d "%PACK_ENT_1%" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Reg.exe add "%%HIVE_SYSTEM%%\ControlSet001\Control\DeviceGuard" /v "RequirePlatformSecurityFeatures" /t REG_DWORD /d "%PACK_ENT_2%" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Reg.exe add "%%HIVE_SYSTEM%%\ControlSet001\Control\DeviceGuard" /v "Locked" /t REG_DWORD /d "%PACK_ENT_3%" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Reg.exe add "%%HIVE_SYSTEM%%\ControlSet001\Control\DeviceGuard\Scenarios\HypervisorEnforcedCodeIntegrity" /v "Enabled" /t REG_DWORD /d "%PACK_ENT_4%" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Reg.exe add "%%HIVE_SYSTEM%%\ControlSet001\Control\DeviceGuard\Scenarios\HypervisorEnforcedCodeIntegrity" /v "Locked" /t REG_DWORD /d "%PACK_ENT_5%" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Reg.exe add "%%HIVE_SYSTEM%%\ControlSet001\Control\LSA" /v "LsaCfgFlags " /t REG_DWORD /d "%PACK_ENT_6%" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
EXIT /B
:PACKEX_DCOM
SET "PackType=SCRIPTED"&&SET "PACK_CFG_1=Y"&&SET "PACK_CFG_2=N"&&ECHO         - DCOM -&&ECHO {1}Enable&&ECHO {2}Disable&&CALL:MENU_SELECT
IF "%SELECT%"=="1" SET "PACK_CONFIG=%PACK_CFG_1%"&&SET "PackName=DCOM_Enable"&&SET "PackDesc=Enable DCOM"
IF "%SELECT%"=="2" SET "PACK_CONFIG=%PACK_CFG_2%"&&SET "PackName=DCOM_Disable"&&SET "PackDesc=Disable DCOM"
CALL:PACK_CONFIG
ECHO;Reg.exe add "%%HIVE_SOFTWARE%%\Microsoft\Ole" /v "EnableDCOM" /t REG_SZ /d "%PACK_ENT_1%" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
EXIT /B
:PACKEX_WINLOGON_VERBOSE
SET "PackType=SCRIPTED"&&SET "PACK_CFG_1=1"&&SET "PACK_CFG_2=0"&&ECHO          - WinLogon Full Verbosity -&&ECHO {1}Enable&&ECHO {2}Disable&&CALL:MENU_SELECT
IF "%SELECT%"=="1" SET "PACK_CONFIG=%PACK_CFG_1%"&&SET "PackName=WinLogonVerbose_Enable"&&SET "PackDesc=WinLogonVerbose Enable"
IF "%SELECT%"=="2" SET "PACK_CONFIG=%PACK_CFG_2%"&&SET "PackName=WinLogonVerbose_Disable"&&SET "PackDesc=WinLogonVerbose Disable"
CALL:PACK_CONFIG
ECHO;Reg.exe add "%%HIVE_SOFTWARE%%\Microsoft\Windows\CurrentVersion\Policies\SYSTEM" /v "VerboseStatus" /t REG_DWORD /d "%PACK_ENT_1%" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
EXIT /B
:PACKEX_DISABLE_HELLO
SET "PackType=SCRIPTED"&&SET "PackName=Hello_Disable"&&SET "PackDesc=Disable creepy sentient logon hello -view notes"
ECHO;::TIME-MANDATORY: NEEDS TO BE APPLIED DURING IMAGE-APPLY STAGE($PK LIST)>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;::SETUPCOMPLETE/RUNONCE IS TOO LATE>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Reg.exe add "%%HIVE_SOFTWARE%%\Microsoft\Windows\CurrentVersion\Policies\SYSTEM" /v "EnableFirstLogonAnimation" /t REG_DWORD /d "0" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
EXIT /B
:PACKEX_SHORTEN_PREPARING
SET "PackType=SCRIPTED"&&SET "PackName=Quicker_Preparing"&&SET "PackDesc=Shortens the spinning-circle preparing Windows bit -view notes"
ECHO;::TIME-MANDATORY: NEEDS TO BE APPLIED DURING IMAGE-APPLY STAGE($PK LIST)>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;::SETUPCOMPLETE/RUNONCE IS TOO LATE>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Reg.exe add "%%HIVE_SOFTWARE%%\Microsoft\Windows\CurrentVersion\Policies\SYSTEM" /v "DelayedDesktopSwitchTimeout" /t REG_DWORD /d 0 /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
EXIT /B
:PACKEX_DELAY_DESKTOP
SET "PackType=SCRIPTED"&&SET "PackName=Desktop_Delay_1stBoot"&&SET "PackDesc=Delay explorer.exe until RunOnce/ActiveSetup completes -view notes"
ECHO;::TIME-MANDATORY: NEEDS TO BE APPLIED DURING IMAGE-APPLY STAGE($PK LIST)>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;::SETUPCOMPLETE/RUNONCE IS TOO LATE>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Reg.exe add "%%HIVE_SOFTWARE%%\Microsoft\Windows\CurrentVersion\Explorer" /v "AsyncRunOnce" /t REG_DWORD /d "0" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
EXIT /B
:PACKEX_SCRIPTHOST
SET "PackType=SCRIPTED"&&SET "PackName=VBS_Exec_Disable"&&SET "PackDesc=Disable Visual Basic Shell-Script Execution"
ECHO;Reg.exe add "%%HIVE_SOFTWARE%%\Microsoft\Windows Script Host\Settings" /v "Enabled" /t REG_DWORD /d "0" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Reg.exe add "%%HIVE_SOFTWARE%%\Classes\PROTOCOLS\Handler\vbscript" /v "DISABLED_CLSID" /t REG_SZ /d "{3050F3B2-98B5-11CF-BB82-00AA00BDCE0B}" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
EXIT /B
:EXPLORER_URL_ACCESS
SET "PackType=SCRIPTED"&&SET "PackName=ExplorerRestrictNet"&&SET "PackDesc=No Internet For Explorer.exe or driver Updates"
ECHO;Reg.exe add "%%HIVE_USER%%\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\Explorer" /v "NoInternetOpenWith" /t REG_DWORD /d "1" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Reg.exe add "%%HIVE_USER%%\SOFTWARE\Policies\Microsoft\Assistance\Client\1.0" /v "NoOnlineAssist" /t REG_DWORD /d "1" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Reg.exe add "%%HIVE_SOFTWARE%%\Microsoft\Windows\CurrentVersion\DriverSearching" /v "SearchOrderConfig" /t REG_DWORD /d "0" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
EXIT /B
:PACKEX_LOCAL_ACCOUNT
SET "PackType=SCRIPTED"&&SET "PackName=Online_Accounts_Disabled"&&SET "PackDesc=Only Allow Local Accounts to login"
ECHO;Reg.exe add "%%HIVE_SOFTWARE%%\Microsoft\Windows\CurrentVersion\Policies\SYSTEM" /v "NoConnectedUser" /t REG_DWORD /d "3" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
EXIT /B
:PACKEX_PRIORITIZE_ETHERNET
SET "PackType=SCRIPTED"&&SET "PackName=Prioritize_Ethernet"&&SET "PackDesc=Prioritize Ethernet Traffic Over Wi-Fi"
ECHO;::LIVE COMMAND, NEEDS TO BE APPLIED LIVE, SETUPCOMPLETE, OR RUNONCE>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;NETSH interface ipv4 SET interface "Wi-Fi" metric=5 >>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;NETSH interface ipv4 SET interface "Ethernet" metric=10 >>"%MAKER_FOLDER%\PACKAGE.CMD"
EXIT /B
:PACKEX_PRIORITIZE_WIFI
SET "PackType=SCRIPTED"&&SET "PackName=Prioritize_WiFi"&&SET "PackDesc=Prioritize Wi-Fi Traffic Over Ethernet"
ECHO;::LIVE COMMAND, NEEDS TO BE APPLIED LIVE, SETUPCOMPLETE, OR RUNONCE>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;NETSH interface ipv4 SET interface "Wi-Fi" metric=10 >>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;NETSH interface ipv4 SET interface "Ethernet" metric=5 >>"%MAKER_FOLDER%\PACKAGE.CMD"
EXIT /B
:PACKEX_DEBUG
ECHO  - DEBUG -&&ECHO {1}Pause&&ECHO {2}Echo On {3}Echo Off&&CALL:MENU_SELECT
IF "%SELECT%"=="1" SET "PackType=SCRIPTED"&&SET "PackName=Pause"&&SET "PackDesc=Place in PackageList, PAUSES EXECUTION"
IF "%SELECT%"=="1" ECHO;PAUSE>>"%MAKER_FOLDER%\PACKAGE.CMD"
IF "%SELECT%"=="2" SET "PackType=SCRIPTED"&&SET "PackName=Echo_on"&&SET "PackDesc=Place in PackageList, Turns ECHO ON"
IF "%SELECT%"=="2" ECHO;@ECHO ON>>"%MAKER_FOLDER%\PACKAGE.CMD"
IF "%SELECT%"=="3" SET "PackType=SCRIPTED"&&SET "PackName=Echo_off"&&SET "PackDesc=Place in PackageList, Turns ECHO OFF"
IF "%SELECT%"=="3" ECHO;@ECHO OFF>>"%MAKER_FOLDER%\PACKAGE.CMD"
EXIT /B
:PACKEX_TASKMGR_PREF
SET "PackType=SCRIPTED"&&SET "PackName=TaskManager_Prefs"&&SET "PackDesc=TaskManager Prefs"
ECHO;::LIVE COMMAND, NEEDS TO BE APPLIED LIVE, SETUPCOMPLETE, OR RUNONCE>>"%MAKER_FOLDER%\PACKAGE.CMD"
Reg.exe EXPORT "%HIVE_USER%\Software\Microsoft\Windows\CurrentVersion\TaskManager" "%MAKER_FOLDER%\TASKMGR_PREF.REG"
ECHO;Reg.exe IMPORT TASK_PREF.REG>>"%MAKER_FOLDER%\PACKAGE.CMD"
EXIT /B
:PACKEX_COLOR_MODE_TOGGLE
SET "PackType=SCRIPTED"&&SET "PACK_CFG_1=11"&&SET "PACK_CFG_2=00"&&ECHO {1}Light {2}Dark&&CALL:MENU_SELECT
IF "%SELECT%"=="1" SET "PACK_CONFIG=%PACK_CFG_1%"&&SET "PackName=Color_Light"&&SET "PackDesc=Use Light Mode"
IF "%SELECT%"=="2" SET "PACK_CONFIG=%PACK_CFG_2%"&&SET "PackName=Color_Dark"&&SET "PackDesc=Use Dark Mode"
CALL:PACK_CONFIG
ECHO;Reg.exe add "%%HIVE_USER%%\SOFTWARE\Microsoft\Windows\CurrentVersion\Themes\Personalize" /v "AppsUseLightTheme" /t REG_DWORD /d "%PACK_ENT_1%" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Reg.exe add "%%HIVE_USER%%\SOFTWARE\Microsoft\Windows\CurrentVersion\Themes\Personalize" /v "SYSTEMUsesLightTheme" /t REG_DWORD /d "%PACK_ENT_2%" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
EXIT /B
:PACKEX_PACK_PERMIT_EXAMPLE
SET "PackType=SCRIPTED"&&SET "PackName=PACK_PERMIT_DEMO"&&SET "PackDesc=PACK PERMIT DEMO"&&SET "REG_KEY=%%HIVE_USER%%\TEST_KEY"&&SET "REG_VAL=TEST_VAL"&&SET "RUN_MOD=EQU"&&SET "REG_DAT=1"
CALL:PAD_LINE&&ECHO CLOSE REGEDIT IF ALREADY OPEN. PRESS A KEY, REGEDIT WILL REOPEN @ KEY:HKCU\TEST_KEY.
CALL:PAD_LINE&&ECHO.                         Press {X} to proceed&&CALL:PAD_LINE&&CALL:PAD_PREV&&SET "PROMPT_SET=CONFIRM"&&CALL:PROMPT_SET
IF "%CONFIRM%"=="X" Reg.exe add "%HIVE_USER%\TEST_KEY" /v "TEST_VAL" /t REG_SZ /d "1" /f>NUL 2>&1
IF "%CONFIRM%"=="X" Reg.exe add "%HIVE_USER%\Software\Microsoft\Windows\CurrentVersion\Applets\Regedit" /v "LastKey" /t REG_SZ /d "Computer\%HIVE_USER%\TEST_KEY" /f>NUL 2>&1
IF "%CONFIRM%"=="X" START REGEDIT.EXE
ECHO ~ Change or delete TEST_VAL DATA(1), the pack is denied, and test key remains ~
ECHO   ~ Leave TEST_VAL DATA(1), pack is permitted, and test key will be deleted ~
ECHO     ~ next, press {C} to create the pack, put in a package list and test ~
IF "%CONFIRM%"=="X" CALL:PAUSED
ECHO;@ECHO OFF>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Reg.exe delete "%%HIVE_USER%%\TEST_KEY" /f^>NUL >>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;START REGEDIT.EXE>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;ECHO TEST_KEY DELETED, PACK PERMITTED^&PAUSE>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;::MUST USE EXTRA SET OF PERCENTS IN PERMIT REG-KEY FIELD (ex. %%%%HIVE_USER%%%%\XYZ)>>%MAKER_FOLDER%\PACKAGE.CMD"
EXIT /B
:PACKEX_MSI_EXAMPLE
SET "PackType=SCRIPTED"&&SET "PackName=MSI_INSTALLER_EXAMPLE"&&SET "PackDesc=Example of a Scripted Pack MSI Installer"
ECHO;::LIVE COMMAND, NEEDS TO BE APPLIED LIVE, SETUPCOMPLETE, OR RUNONCE>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;::PUT MSI IN PACK FOLDER.>>%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;"EXAMPLE.msi" /qn>>"%MAKER_FOLDER%\PACKAGE.CMD"
EXIT /B
:PACKEX_DRIVER_UPDATE
SET "PackType=SCRIPTED"&&SET "PACK_CFG_1=10"&&SET "PACK_CFG_2=01"&&ECHO - Driver Updates -&&ECHO {1}Enable {2}Disable&&CALL:MENU_SELECT
IF "%SELECT%"=="1" SET "PACK_CONFIG=%PACK_CFG_1%"&&SET "PackName=Driver_Update_Enable"&&SET "PackDesc=Driver Update Enable"
IF "%SELECT%"=="2" SET "PACK_CONFIG=%PACK_CFG_2%"&&SET "PackName=Driver_Update_Disable"&&SET "PackDesc=Driver Update Disable"
CALL:PACK_CONFIG
ECHO;Reg.exe add "%%HIVE_SOFTWARE%%\Policies\Microsoft\Windows\DriverSearching" /v "DriverUpdateWizardWuSearchEnabled" /t REG_DWORD /d "%PACK_ENT_1%" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Reg.exe add "%%HIVE_SOFTWARE%%\Policies\Microsoft\Windows\WindowsUpdate" /v "ExcludeWUDriversInQualityUpdate" /t REG_DWORD /d "%PACK_ENT_2%" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
EXIT /B
:PACKEX_FEATURE_UPDATE_THRESHOLD
SET "PackType=SCRIPTED"&&SET "PackName=Feature_Threshold"&&SET "EDIT_MANIFEST=1"&&SET "EDIT_SETUP=1"
SET "GET_VER="&&FOR /F "TOKENS=1-9 DELIMS= " %%a IN ('REG QUERY "%HIVE_SOFTWARE%\Microsoft\Windows NT\CurrentVersion" /f "DisplayVersion" /c /e') DO (IF "%%a"=="DisplayVersion" SET "GET_VER=%%c")
IF NOT DEFINED GET_VER SET "GET_VER=22H2"
SET "PackDesc=Stop Updates at Release Threshold %GET_VER%"
ECHO;Reg.exe add "%%HIVE_SOFTWARE%%\Policies\Microsoft\Windows\WindowsUpdate" /v "TargetReleaseVersion" /t REG_DWORD /d "1" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Reg.exe add "%%HIVE_SOFTWARE%%\Policies\Microsoft\Windows\WindowsUpdate" /v "TargetReleaseVersionInfo" /t REG_SZ /d "%GET_VER%" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
EXIT /B
:PACKEX_DISM
SET "PackType=SCRIPTED"&&SET "PackName=DISM_Special"&&SET "PackDesc=DISM special pack"&&SET "PackTag=DISM"
ECHO;DISM /%%APPLY_TARGET%% /ABC:DEF /123:456>>"%MAKER_FOLDER%\PACKAGE.CMD"
EXIT /B
:PACKEX_ANSWER_FILE
SET "PackType=SCRIPTED"&&SET "PackName=Unattended"&&SET "PackDesc=Generate Unattended Answer File"&&SET "EDIT_CUSTOM=unattend.xml"&&SET "PackTag=DISM"
ECHO;::TIME-MANDATORY: NEEDS TO BE APPLIED DURING IMAGE-APPLY STAGE($PK LIST)>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;::NOTE: WHEN SWITCHING TO A DIFFERENT LOCALE, UNATTEND MAY SKIP SETUPCOMPLETE.CMD>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO        - USERNAME? -&&ECHO     - ENTER USERNAME -&&ECHO   - 0-9 A-Z - NO SPACES -&&ECHO      (ENTER) FOR DEFAULT&&SET "PROMPT_SET=NEWUSER2"&&CALL:PROMPT_SET_ANY
SET "CHAR_STR=%NEWUSER2%"&&SET "CHAR_CHK= "&&CALL:CHAR_CHK
IF DEFINED CHAR_FLG SET "NEWUSER2="
IF NOT DEFINED NEWUSER2 SET "NEWUSER2=UserName"
ECHO.&&ECHO       - PRODUCT KEY? -&&ECHO XXXXX-XXXXX-XXXXX-XXXXX-XXXXX&&ECHO      (ENTER) FOR DEFAULT
IF "%EXAMPLE_MODE%"=="CREATE" SET "PROMPT_SET=PRODUCT_KEY"&&CALL:PROMPT_SET_ANY
IF NOT DEFINED PRODUCT_KEY SET "PRODUCT_KEY=92NFX-8DJQP-P6BBQ-THF9C-7CG2H"
SET "ANSWER_FILE=%MAKER_FOLDER%\unattend.xml"
ECHO;REM DISM /%%APPLY_TARGET%% /APPLY-UNATTEND:"%%CD%%\UNATTEND.XML">>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;MD "%%WINTAR%%\PANTHER">>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;COPY /Y "%%~DP0unattend.xml" "%%WINTAR%%\PANTHER">>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;^<?xml version="1.0" encoding="utf-8"?^>>"%ANSWER_FILE%"
ECHO;^<unattend xmlns="urn:schemas-microsoft-com:unattend"^>>>"%ANSWER_FILE%"
ECHO;	^<settings pass="oobeSystem"^>>>"%ANSWER_FILE%"
ECHO;		^<component name="Microsoft-Windows-International-Core" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS" xmlns:wcm="http://schemas.microsoft.com/WMIConfig/2002/State" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"^>>>"%ANSWER_FILE%"
ECHO;			^<InputLocale^>0409:00000409^</InputLocale^>>>"%ANSWER_FILE%"
ECHO;			^<SystemLocale^>en-US^</SystemLocale^>>>"%ANSWER_FILE%"
ECHO;			^<UILanguage^>en-US^</UILanguage^>>>"%ANSWER_FILE%"
ECHO;			^<UILanguageFallback^>en-US^</UILanguageFallback^>>>"%ANSWER_FILE%"
ECHO;			^<UserLocale^>en-US^</UserLocale^>>>"%ANSWER_FILE%"
ECHO;		^</component^>>>"%ANSWER_FILE%"
ECHO;		^<component name="Microsoft-Windows-Shell-Setup" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS" xmlns:wcm="http://schemas.microsoft.com/WMIConfig/2002/State" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"^>>>"%ANSWER_FILE%"
ECHO;			^<TimeZone^>Mountain Standard Time^</TimeZone^>>>"%ANSWER_FILE%"
ECHO;			^<AutoLogon^>>>"%ANSWER_FILE%"
ECHO;				^<Enabled^>true^</Enabled^>>>"%ANSWER_FILE%"
ECHO;				^<LogonCount^>9999999^</LogonCount^>>>"%ANSWER_FILE%"
ECHO;				^<Username^>%NEWUSER2%^</Username^>>>"%ANSWER_FILE%"
ECHO;				^<Password^>>>"%ANSWER_FILE%"
ECHO;					^<PlainText^>true^</PlainText^>>>"%ANSWER_FILE%"
ECHO;					^<Value^>^</Value^>>>"%ANSWER_FILE%"
ECHO;				^</Password^>>>"%ANSWER_FILE%"
ECHO;			^</AutoLogon^>>>"%ANSWER_FILE%"
ECHO;			^<OOBE^>>>"%ANSWER_FILE%"
ECHO;				^<HideEULAPage^>true^</HideEULAPage^>>>"%ANSWER_FILE%"
ECHO;				^<HideLocalAccountScreen^>true^</HideLocalAccountScreen^>>>"%ANSWER_FILE%"
ECHO;				^<HideOnlineAccountScreens^>true^</HideOnlineAccountScreens^>>>"%ANSWER_FILE%"
ECHO;				^<HideWirelessSetupInOOBE^>true^</HideWirelessSetupInOOBE^>>>"%ANSWER_FILE%"
ECHO;				^<NetworkLocation^>Other^</NetworkLocation^>>>"%ANSWER_FILE%"
ECHO;				^<ProtectYourPC^>3^</ProtectYourPC^>>>"%ANSWER_FILE%"
ECHO;				^<SkipMachineOOBE^>true^</SkipMachineOOBE^>>>"%ANSWER_FILE%"
ECHO;				^<SkipUserOOBE^>true^</SkipUserOOBE^>>>"%ANSWER_FILE%"
ECHO;			^</OOBE^>>>"%ANSWER_FILE%"
ECHO;			^<UserAccounts^>>>"%ANSWER_FILE%"
ECHO;				^<LocalAccounts^>>>"%ANSWER_FILE%"
ECHO;					^<LocalAccount wcm:action="add"^>>>"%ANSWER_FILE%"
ECHO;						^<Group^>Administrators^</Group^>>>"%ANSWER_FILE%"
ECHO;						^<Name^>%NEWUSER2%^</Name^>>>"%ANSWER_FILE%"
ECHO;						^<Password^>>>"%ANSWER_FILE%"
ECHO;							^<PlainText^>true^</PlainText^>>>"%ANSWER_FILE%"
ECHO;							^<Value^>^</Value^>>>"%ANSWER_FILE%"
ECHO;						^</Password^>>>"%ANSWER_FILE%"
ECHO;					^</LocalAccount^>>>"%ANSWER_FILE%"
ECHO;				^</LocalAccounts^>>>"%ANSWER_FILE%"
ECHO;			^</UserAccounts^>>>"%ANSWER_FILE%"
ECHO;		^</component^>>>"%ANSWER_FILE%"
ECHO;	^</settings^>>>"%ANSWER_FILE%"
ECHO;	^<settings pass="specialize"^>>>"%ANSWER_FILE%"
ECHO;		^<component name="Microsoft-Windows-Security-SPP-UX" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS" xmlns:wcm="http://schemas.microsoft.com/WMIConfig/2002/State" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"^>>>"%ANSWER_FILE%"
ECHO;			^<SkipAutoActivation^>true^</SkipAutoActivation^>>>"%ANSWER_FILE%"
ECHO;		^</component^>>>"%ANSWER_FILE%"
ECHO;		^<component name="Microsoft-Windows-Shell-Setup" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS" xmlns:wcm="http://schemas.microsoft.com/WMIConfig/2002/State" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"^>>>"%ANSWER_FILE%"
ECHO;			^<ComputerName^>Computer^</ComputerName^>>>"%ANSWER_FILE%"
ECHO;			^<CopyProfile^>false^</CopyProfile^>>>"%ANSWER_FILE%"
ECHO;			^<ProductKey^>%PRODUCT_KEY%^</ProductKey^>>>"%ANSWER_FILE%"
ECHO;		^</component^>>>"%ANSWER_FILE%"
ECHO;	^</settings^>>>"%ANSWER_FILE%"
ECHO;	^<settings pass="windowsPE"^>>>"%ANSWER_FILE%"
ECHO;		^<component name="Microsoft-Windows-International-Core-WinPE" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS" xmlns:wcm="http://schemas.microsoft.com/WMIConfig/2002/State" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"^>>>"%ANSWER_FILE%"
ECHO;			^<InputLocale^>0409:00000409^</InputLocale^>>>"%ANSWER_FILE%"
ECHO;			^<SystemLocale^>en-US^</SystemLocale^>>>"%ANSWER_FILE%"
ECHO;			^<UILanguage^>en-US^</UILanguage^>>>"%ANSWER_FILE%"
ECHO;			^<UILanguageFallback^>en-US^</UILanguageFallback^>>>"%ANSWER_FILE%"
ECHO;			^<UserLocale^>en-US^</UserLocale^>>>"%ANSWER_FILE%"
ECHO;			^<SetupUILanguage^>>>"%ANSWER_FILE%"
ECHO;				^<UILanguage^>en-US^</UILanguage^>>>"%ANSWER_FILE%"
ECHO;			^</SetupUILanguage^>>>"%ANSWER_FILE%"
ECHO;		^</component^>>>"%ANSWER_FILE%"
ECHO;		^<component name="Microsoft-Windows-Setup" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS" xmlns:wcm="http://schemas.microsoft.com/WMIConfig/2002/State" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"^>>>"%ANSWER_FILE%"
ECHO;			^<Diagnostics^>>>"%ANSWER_FILE%"
ECHO;				^<OptIn^>false^</OptIn^>>>"%ANSWER_FILE%"
ECHO;			^</Diagnostics^>>>"%ANSWER_FILE%"
ECHO;			^<DynamicUpdate^>>>"%ANSWER_FILE%"
ECHO;				^<Enable^>false^</Enable^>>>"%ANSWER_FILE%"
ECHO;				^<WillShowUI^>OnError^</WillShowUI^>>>"%ANSWER_FILE%"
ECHO;			^</DynamicUpdate^>>>"%ANSWER_FILE%"
ECHO;			^<ImageInstall^>>>"%ANSWER_FILE%"
ECHO;				^<OSImage^>>>"%ANSWER_FILE%"
ECHO;					^<Compact^>true^</Compact^>>>"%ANSWER_FILE%"
ECHO;					^<WillShowUI^>OnError^</WillShowUI^>>>"%ANSWER_FILE%"
ECHO;					^<InstallFrom^>>>"%ANSWER_FILE%"
ECHO;						^<MetaData wcm:action="add"^>>>"%ANSWER_FILE%"
ECHO;							^<Key^>/IMAGE/INDEX^</Key^>>>"%ANSWER_FILE%"
ECHO;							^<Value^>1^</Value^>>>"%ANSWER_FILE%"
ECHO;						^</MetaData^>>>"%ANSWER_FILE%"
ECHO;					^</InstallFrom^>>>"%ANSWER_FILE%"
ECHO;				^</OSImage^>>>"%ANSWER_FILE%"
ECHO;			^</ImageInstall^>>>"%ANSWER_FILE%"
ECHO;			^<UserData^>>>"%ANSWER_FILE%"
ECHO;				^<AcceptEula^>true^</AcceptEula^>>>"%ANSWER_FILE%"
ECHO;				^<ProductKey^>>>"%ANSWER_FILE%"
ECHO;					^<Key^>%PRODUCT_KEY%^</Key^>>>"%ANSWER_FILE%"
ECHO;					^<WillShowUI^>OnError^</WillShowUI^>>>"%ANSWER_FILE%"
ECHO;				^</ProductKey^>>>"%ANSWER_FILE%"
ECHO;			^</UserData^>>>"%ANSWER_FILE%"
ECHO;		^</component^>>>"%ANSWER_FILE%"
ECHO;	^</settings^>>>"%ANSWER_FILE%"
ECHO;^</unattend^>>>"%ANSWER_FILE%"
EXIT /B
:RESTART
CALL:SETS_HANDLER>NUL 2>&1
IF EXIST "U:\EFI" CALL:EFI_UNMOUNT>NUL 2>&1
IF EXIST "V:\" CALL:VDISK_DETACH>NUL 2>&1
"shutdown.exe" -r -f -t 0
:QUIT
CALL:SETS_HANDLER>NUL 2>&1
IF EXIST "U:\EFI" CALL:EFI_UNMOUNT>NUL 2>&1
IF EXIST "V:\" CALL:VDISK_DETACH>NUL 2>&1
:CLEAN_EXIT
COLOR 07&&TITLE C:\Windows\system32\CMD.exe&&CD /D "%ORIG_CD%"
IF "%PROG_MODE%"=="RAMDISK" EXIT 0&&EXIT 0

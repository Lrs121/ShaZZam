::$haZZam! A native Windows image deployment tool. (C) Joshua Cline - All rights reserved
::Build, administrate and backup your Windows in a native WinPE recovery environment.
@ECHO OFF&&SETLOCAL ENABLEDELAYEDEXPANSION&&SET "ORIG_CD=%CD%"&&CD /D "%~DP0"&&SET $VER_CUR=1111
Reg.exe query "HKU\S-1-5-19\Environment">NUL
IF NOT %ERRORLEVEL% EQU 0 ECHO Right-Click ^& Run As Administrator&&PAUSE&&GOTO:CLEAN_EXIT
::FOR %%a in (1 2 3 4 5 6 7 8 9) DO (CALL SET "ARG%%a=%%%%a")
SET "ARGUE=%*"&&SET "DELIMS= "&&CALL:ARGUE&&FOR %%a in (1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20) DO (IF DEFINED A%%a CALL SET "ARG%%a=%%A%%a%%")
FOR /F "tokens=*" %%a in ('ECHO %CD%') DO (SET "PROG_FOLDER=%%a")
FOR %%G in (A B C D E F G H I J K L M N O P Q R S T U V W X Y Z) DO (CALL SET "PROG_FOLDER=%%PROG_FOLDER:%%G=%%G%%")
FOR /F "delims=" %%G in ('CMD.EXE /D /U /C ECHO %PROG_FOLDER%^| FIND /V ""') do (IF "%%G"==" " ECHO Remove the space from the folder's name, then launch again&&PAUSE&&GOTO:CLEAN_EXIT)
SET "DRVTAR=%SYSTEMDRIVE%"&&SET "WINTAR=%WINDIR%"&&SET "USRTAR=%USERPROFILE%"&&SET "HIVE_USER=HKCU"&&SET "HIVE_SOFTWARE=HKLM\SOFTWARE"&&SET "HIVE_SYSTEM=HKLM\SYSTEM"
IF DEFINED ARG1 FOR %%G in (A B C D E F G H I J K L M N O P Q R S T U V W X Y Z) DO (FOR %%1 in (1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20) DO (IF DEFINED ARG%%1 CALL SET "ARG%%1=%%ARG%%1:%%G=%%G%%"))
IF DEFINED ARG1 SET "PROG_MODE=COMMAND"&&GOTO:COMMAND_MODE
IF "%PROG_FOLDER%"=="X:\$" IF "%SystemDrive%"=="X:" SET "PROG_MODE=RAMDISK"&&COLOR 0B&&CALL:TITLECARD
IF NOT "%PROG_FOLDER%"=="X:\$" SET "PROG_MODE=PORTABLE"&&COLOR 0A&&CALL:TITLECARD
IF "%PROG_MODE%"=="RAMDISK" REG.EXE DELETE "HKEY_LOCAL_MACHINE\SYSTEM\ControlSet001\Control\MiniNT" /f>NUL 2>&1
IF "%PROG_MODE%"=="RAMDISK" CALL:HOME_AUTO&&CALL:SETS_HANDLER&&CALL:FOLDER_LOCATE
IF "%PROG_MODE%"=="RAMDISK" IF "%AUTOPILOT%"=="ENABLED" SET "BOOT_TARGET=VHDX"&&CALL:BOOT_TARGET_TOGGLE&&CALL:AUTOPILOT_COUNT
IF "%PROG_MODE%"=="RAMDISK" IF "%AUTOPILOT%"=="ENABLED" GOTO:CLEAN_EXIT
REM PROG_MAIN_PROG_MAIN_PROG_MAIN_PROG_MAIN_PROG_MAIN_PROG_MAIN_PROG_MAIN_
:PROG_MAIN
REM PROG_MAIN_PROG_MAIN_PROG_MAIN_PROG_MAIN_PROG_MAIN_PROG_MAIN_PROG_MAIN_
SET "MOUNT="&&IF "%PROG_MODE%"=="RAMDISK" IF "%PROG_SOURCE%"=="X:\$" CALL:HOME_AUTO
@ECHO OFF&&CLS&&CALL:TITLEGEN&&CALL:SETS_HANDLER&&CALL:FOLDER_LOCATE&&CALL:OBJ_EXIST&&CALL:IMAGE_EXIST&&CALL:PAD_LINE&&CALL:COLOR_CHK
IF NOT "%PROG_MODE%"=="RAMDISK" ECHO                          $haZZam^^! Image-Deploy&&CALL:PAD_LINE
IF "%PROG_MODE%"=="RAMDISK" ECHO                 $haZZam^^! Image-Deploy Boot-Environment&&CALL:PAD_LINE
ECHO  {1} Image Management
ECHO  {2} Image Processor
ECHO  {3} Package Creator
ECHO  {4} File Management
ECHO  {5} Disk Management
ECHO  {6} Tasks
ECHO  {.} Settings                                         [MODE[%PROG_MODE%]&&CALL:PAD_LINE
IF EXIST "%PROG_SOURCE%\DISK_TARGET" IF "%PROG_SOURCE%"=="%PROG_FOLDER%" ECHO   [Disk[ERROR{@@}Attempt Home-ReAssign [ID[%DISK_TARGET%]
IF DEFINED DISK_TARGET IF "%HOME_MOUNT%"=="YES" IF "%PROG_SOURCE%"=="S:\$" ECHO   [Disk[%DISK_NUMBER%] [ID[%DISK_TARGET%]&&CALL:PAD_LINE
IF "%MACRO_TOGGLE%"=="ENABLED" ECHO  {Q}uit {%HOTKEY_1%} {%HOTKEY_2%} {%HOTKEY_3%} {%HOTKEY_4%} {%HOTKEY_5%} {%HOTKEY_6%} {%HOTKEY_7%} {%HOTKEY_8%} {%HOTKEY_9%}&&CALL:PAD_LINE
IF NOT "%MACRO_TOGGLE%"=="ENABLED" ECHO  {Q}uit {?}Info&&CALL:PAD_LINE
IF NOT "%PROG_MODE%"=="RAMDISK" IF "%PAD_STYLE%"=="9" CALL:PAD_LINE >NUL
CALL:MENU_SELECT
IF "%SELECT%"=="~" SET&&CALL:PAUSED
IF "%SELECT%"=="Q" GOTO:QUIT
IF "%SELECT%"=="?" CALL:PROG_MAIN_HELP
IF "%SELECT%"=="RESTART" GOTO:RESTART
IF "%MACRO_TOGGLE%"=="ENABLED" CALL:MACRO_RUN
IF "%SELECT%"=="." GOTO:$ETTINGS_START
IF "%SELECT%"=="2" GOTO:IMAGEPROC_START
IF "%SELECT%"=="1" GOTO:IMAGEMGR_START
IF "%SELECT%"=="3" GOTO:MAKER_START
IF "%SELECT%"=="4" GOTO:FILEMGR_START
IF "%SELECT%"=="5" IF NOT DEFINED DISCLAIMER CALL:DISCLAIMER
IF "%SELECT%"=="5" IF DEFINED DISCLAIMER GOTO:DISKMGR_START
IF "%SELECT%"=="6" SET "EXAMPLE_MODE=INSTANT"&&CALL:PACKEX_MENU_START
IF "%SELECT%"=="TEST" CALL:TEST_SELECT
IF "%SELECT%"=="@@" IF "%PROG_MODE%"=="RAMDISK" CALL:HOME_MANUAL
GOTO:PROG_MAIN
:PAD_STYLE
SET /A PAD_STYLE+=1
IF "%PAD_STYLE%"=="10" SET "PAD_STYLE=1"
EXIT /B
:PAD_LINE
IF NOT DEFINED CHCP_OLD FOR /F "tokens=2 delims=:" %%a IN ('CHCP') DO SET "CHCP_OLD=%%a"
IF NOT DEFINED PAD_STYLE SET "PAD_STYLE=1"
IF NOT DEFINED PAD_SIZE SET "PAD_SIZE=7"
FOR %%a in (1 2 3) DO (IF "%PAD_STYLE%"=="%%a" CHCP 65001 >NUL)
IF "%PAD_STYLE%"=="1" SET "PAD_CHNK=■■■■■■■■■■"
IF "%PAD_STYLE%"=="2" SET "PAD_CHNK=▒▒▒▒▒▒▒▒▒▒"
IF "%PAD_STYLE%"=="3" SET "PAD_CHNK=□□□□□□□□□□"
IF "%PAD_STYLE%"=="4" SET "PAD_CHNK=::::::::::"
IF "%PAD_STYLE%"=="5" SET "PAD_CHNK==========="
IF "%PAD_STYLE%"=="6" SET "PAD_CHNK=##########"
IF "%PAD_STYLE%"=="7" SET "PAD_CHNK=~~~~~~~~~~"
IF "%PAD_STYLE%"=="8" CALL:PAD_RAIN
IF "%PAD_STYLE%"=="9" CALL:PAD_CHA
IF "%PAD_SIZE%"=="10" ECHO;%PAD_CHNK%%PAD_CHNK%%PAD_CHNK%%PAD_CHNK%%PAD_CHNK%%PAD_CHNK%%PAD_CHNK%%PAD_CHNK%%PAD_CHNK%%PAD_CHNK%
IF "%PAD_SIZE%"=="7" ECHO;%PAD_CHNK%%PAD_CHNK%%PAD_CHNK%%PAD_CHNK%%PAD_CHNK%%PAD_CHNK%%PAD_CHNK%
IF "%PAD_SIZE%"=="4" ECHO;%PAD_CHNK%%PAD_CHNK%%PAD_CHNK%%PAD_CHNK%
IF "%PAD_SIZE%"=="2" ECHO;%PAD_CHNK%%PAD_CHNK%
FOR %%a in (1 2 3) DO (IF "%PAD_STYLE%"=="%%a" CHCP %CHCP_OLD% >NUL)
SET "PAD_SIZE="
EXIT /B
:PAD_CHA
IF NOT DEFINED TRIPPY SET "TRIPPY=1"&&SET "PAD_CHNK=//////////"&&EXIT /B
IF DEFINED TRIPPY SET "TRIPPY="&&SET "PAD_CHNK=\\\\\\\\\\"&&EXIT /B
EXIT /B
:PAD_RAIN
SET /A PAD_RAIN+=1
IF NOT DEFINED WIND_DIR SET "WIND_DIR=5"
SET "FORECAST=%RANDOM%%RANDOM%"&&SET "FORECAST=!FORECAST:~5,5!"&&SET "FORECAST=!FORECAST:~1,1!"
IF "%FORECAST%"=="%WIND_DIR%" CALL:RAIN_DIAL
IF "%PAD_RAIN%" GEQ "%WIND_DIR%" SET "PAD_RAIN=0"
IF "%PAD_RAIN%"=="0" SET "PAD_CHNK=/~~~~~~~~~"&EXIT /B
IF "%PAD_RAIN%"=="1" SET "PAD_CHNK=~~/~~~~~~~"&EXIT /B
IF "%PAD_RAIN%"=="2" SET "PAD_CHNK=~~~~/~~~~~"&EXIT /B
IF "%PAD_RAIN%"=="3" SET "PAD_CHNK=~~~~~~/~~~"&EXIT /B
IF "%PAD_RAIN%"=="4" SET "PAD_CHNK=~~~~~~~~/~"&EXIT /B
IF "%PAD_RAIN%"=="5" SET "PAD_CHNK=~/~~~~~~~~"&EXIT /B
IF "%PAD_RAIN%"=="6" SET "PAD_CHNK=~~~/~~~~~~"&EXIT /B
IF "%PAD_RAIN%"=="7" SET "PAD_CHNK=~~~~~/~~~~"&EXIT /B
IF "%PAD_RAIN%"=="8" SET "PAD_CHNK=~~~~~~~/~~"&EXIT /B
IF "%PAD_RAIN%"=="9" SET "PAD_CHNK=~~~~~~~~~/"&EXIT /B
EXIT /B
:RAIN_DIAL
SET "RAIN_FLAG="
SET "DOUBLER=%RANDOM%%RANDOM%"&&SET "DOUBLER=!DOUBLER:~5,5!"&&SET "DOUBLER=!DOUBLER:~1,1!"
IF "%DOUBLER%"=="%WIND_DIR%" SET "RAIN_FLAG=1"
IF DEFINED RAIN_FLAG IF "%WIND_DIR%" GEQ "6" SET "WIND_DIR="
IF DEFINED RAIN_FLAG IF "%WIND_DIR%"=="4" SET "WIND_DIR=6"
IF DEFINED RAIN_FLAG IF "%WIND_DIR%"=="5" SET "WIND_DIR=4"
IF DEFINED RAIN_FLAG IF NOT DEFINED WIND_DIR SET "WIND_DIR=5"
EXIT /B
:TITLEGEN
TITLE $haZZam^^! A native Windows image deployment tool. v%$VER_CUR%
EXIT /B
:COLOR_CHK
IF "%COLOR_SLOT%"=="8" COLOR 0B&&EXIT /B
IF "%COLOR_SLOT%"=="9" COLOR 0E&&EXIT /B
IF DEFINED COLOR_SLOT COLOR %COLOR_SLOT%&&EXIT /B
IF NOT DEFINED COLOR_SLOT SET "CLRTMP=%RANDOM%%RANDOM%"&&SET "CLRTMP=!CLRTMP:~5,5!"&&SET "CLRTMP=!CLRTMP:~1,1!"
IF "%CLRTMP%"=="8" COLOR 0B&&EXIT /B
IF "%CLRTMP%"=="9" COLOR 0E&&EXIT /B
IF "%CLRTMP%"=="0" GOTO:COLOR_CHK
IF "%CLRTMP%"==" " GOTO:COLOR_CHK
IF "%CLRTMP%"=="" GOTO:COLOR_CHK
COLOR %CLRTMP%
EXIT /B
:PAD_PREV
ECHO                Press (Enter) to return to previous menu
EXIT /B
:ARG_VIEW
IF "%TEST%"=="-ARG" FOR %%a in (1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20) DO (IF DEFINED ARG%%a CALL ECHO [ARG%%a]=[%%ARG%%a%%])
EXIT /B
:ARGUE
IF NOT DEFINED ARGUE EXIT /B
IF NOT DEFINED DELIMS SET "DELIMS= "
IF DEFINED FOR_REF FOR /F "TOKENS=1-9 DELIMS=<>()" %%A IN ("%ARGUE%") DO (CALL SET "ARGUE=%%A%%B%%C%%D%%E%%F%%G"&&CALL ECHO *REF* [%%A])
FOR %%1 in (1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20) DO (CALL SET "C%%1="&&CALL SET "A%%1=")
SET "C="&&IF NOT "%DELIMS%"==" " FOR /F "DELIMS=" %%G IN ('CMD.EXE /D /U /C ECHO %DELIMS%^| FIND /V ""') do (CALL SET /A "C+=1"&&SET "V=%%G"&&CALL:DELIMS)
SET "X="&&SET "A=1"&&FOR /F "DELIMS=" %%1 in ('CMD.EXE /D /U /C ECHO %ARGUE%^| FIND /V ""') DO (CALL SET "V=%%1"&&CALL:ARGUEX)
CALL SET /A "ROW+=1"&&IF DEFINED ARG_ONE CALL:ARG_SHIFT
IF DEFINED GET_ROW IF DEFINED ROW_EXT IF "%ROW%"=="%ROW_TGT%" CALL SET "ROW_DSP={1A{%A1%}-{2B{%A2%}-{3C{%A3%}-{4D{%A4%}-{5E{%A5%}-{6F{%A6%}-{7G{%A7%}-{8H{%A8%}-{9I{%A9%}-{10J{%A10%}-{11K{%A11%}-{12L{%A12%}-{13M{%A13%}-{14N{%A14%}-{15O{%A15%}-{16P{%A16%}-{17Q{%A17%}-{18R{%A18%}-{19S{%A19%}-{20T{%A20%}"
IF DEFINED GET_ROW IF DEFINED ROW_EXT IF DEFINED ROW CALL ECHO  {%ROW%} {1A{%A1%}-{2B{%A2%}-{3C{%A3%}-{4D{%A4%}-{5E{%A5%}-{6F{%A6%}-{7G{%A7%}-{8H{%A8%}-{9I{%A9%}-{10J{%A10%}-{11K{%A11%}-{12L{%A12%}-{13M{%A13%}-{14N{%A14%}-{15O{%A15%}-{16P{%A16%}-{17Q{%A17%}-{18R{%A18%}-{19S{%A19%}-{20T{%A20%}&&CALL:PAD_LINE
IF DEFINED GET_ROW IF NOT DEFINED ROW_EXT IF "%ROW%"=="%ROW_TGT%" CALL SET "ROW_DSP={1A{%A1%}-{2B{%A2%}-{3C{%A3%}-{4D{%A4%}-{5E{%A5%}-{6F{%A6%}-{7G{%A7%}-{8H{%A8%}-{9I{%A9%}"
IF DEFINED GET_ROW IF NOT DEFINED ROW_EXT IF DEFINED ROW CALL ECHO  {%ROW%} {1A{%A1%}-{2B{%A2%}-{3C{%A3%}-{4D{%A4%}-{5E{%A5%}-{6F{%A6%}-{7G{%A7%}-{8H{%A8%}-{9I{%A9%}&&CALL:PAD_LINE
IF DEFINED MARK IF "%ROW%"=="%ROW_TGT%" IF "%FOR_SAV%"=="FRESH" IF EXIST FOR.CMD DEL /F FOR.CMD>NUL
IF DEFINED MARK IF "%ROW%"=="%ROW_TGT%" CALL SET CLM_DAT=%%A%CLM_TGT%%%&&IF NOT EXIST FOR.CMD ECHO @ECHO OFF>FOR.CMD
IF DEFINED MARK IF "%ROW%"=="%ROW_TGT%" CALL SET FS_LAST=[SKIP[%SKIPPER%] [DELIM[%DELIMS%] [IN[CMD] [IF[%%%%%CLM_TGT%]==[%CLM_DAT%]
IF DEFINED MARK IF "%ROW%"=="%ROW_TGT%" ECHO FOR /F "TOKENS=1-9 %SKIPPER% DELIMS=<>()%DELIMS%" %%%%1 IN ('%CUR_CMD%') DO (IF "%%%%%CLM_TGT%"=="%CLM_DAT%" ECHO [%CLM_DAT%] FOUND^&PAUSE)>>FOR.CMD
SET "ARGUE="&&SET "ARG_ONE="&&EXIT /B
:DELIMS
CALL SET "C%C%=%V%"&&EXIT /B
:ARGUEX
IF "%DELIMS%"==" " SET "C1= "
IF "%V%"=="%C1%" IF DEFINED X IF DEFINED C1 CALL SET "A%A%=%X%"&&CALL SET /A "A+=1"&&CALL SET "X="
IF "%V%"=="%C2%" IF DEFINED X IF DEFINED C2 CALL SET "A%A%=%X%"&&CALL SET /A "A+=1"&&CALL SET "X="
IF "%V%"=="%C3%" IF DEFINED X IF DEFINED C3 CALL SET "A%A%=%X%"&&CALL SET /A "A+=1"&&CALL SET "X="
IF "%V%"=="%C4%" IF DEFINED X IF DEFINED C4 CALL SET "A%A%=%X%"&&CALL SET /A "A+=1"&&CALL SET "X="
IF "%V%"=="%C5%" IF DEFINED X IF DEFINED C5 CALL SET "A%A%=%X%"&&CALL SET /A "A+=1"&&CALL SET "X="
IF NOT "%V%"=="%C1%" IF NOT "%V%"=="%C2%" IF NOT "%V%"=="%C3%" IF NOT "%V%"=="%C4%" IF NOT "%V%"=="%C5%" CALL SET "X=%X%%V%"
IF DEFINED X SET "A%A%=%X%"
EXIT /B
:ARG_SHIFT
IF NOT DEFINED ARG_ONE EXIT /B
SET "A#="&&FOR %%a in (%ARG_ONE%) DO (CALL SET /A "A#+=1")
SET "SHIFT="&&FOR /F "TOKENS=1-9 DELIMS= " %%a IN ("%ARG_ONE%") DO (
IF "%A#%"=="1" IF "%%a"=="%A1%" SET A1=%A1%&&SET A2=%A2%&&SET A3=%A3%&&SET A4=%A4%&&SET A5=%A5%&&SET A6=%A6%&&SET A7=%A7%&&SET A8=%A8%&&SET A9=%A9%&&SET "SHIFT=0"
IF "%A#%"=="1" IF "%%a"=="%A2%" SET A1=%A2%&&SET A2=%A3%&&SET A3=%A4%&&SET A4=%A5%&&SET A5=%A6%&&SET A6=%A7%&&SET A7=%A8%&&SET A8=%A9%&&SET A9=%A10%&&SET "SHIFT=1"
IF "%A#%"=="1" IF "%%a"=="%A3%" SET A1=%A3%&&SET A2=%A4%&&SET A3=%A5%&&SET A4=%A6%&&SET A5=%A7%&&SET A6=%A8%&&SET A7=%A9%&&SET A8=%A10%&&SET A9=%A11%&&SET "SHIFT=2"
IF "%A#%"=="1" IF "%%a"=="%A4%" SET A1=%A4%&&SET A2=%A5%&&SET A3=%A6%&&SET A4=%A7%&&SET A5=%A8%&&SET A6=%A9%&&SET A7=%A10%&&SET A8=%A11%&&SET A9=%A12%&&SET "SHIFT=3"
IF "%A#%"=="1" IF "%%a"=="%A5%" SET A1=%A5%&&SET A2=%A6%&&SET A3=%A7%&&SET A4=%A8%&&SET A5=%A9%&&SET A6=%A10%&&SET A7=%A11%&&SET A8=%A12%&&SET A9=%A13%&&SET "SHIFT=4"
IF "%A#%"=="1" IF "%%a"=="%A6%" SET A1=%A6%&&SET A2=%A7%&&SET A3=%A8%&&SET A4=%A9%&&SET A5=%A10%&&SET A6=%A11%&&SET A7=%A12%&&SET A8=%A13%&&SET A9=%A14%&&SET "SHIFT=5"
IF "%A#%"=="1" IF "%%a"=="%A7%" SET A1=%A7%&&SET A2=%A8%&&SET A3=%A9%&&SET A4=%A10%&&SET A5=%A11%&&SET A6=%A12%&&SET A7=%A13%&&SET A8=%A14%&&SET A9=%A15%&&SET "SHIFT=6"
IF "%A#%"=="1" IF "%%a"=="%A8%" SET A1=%A8%&&SET A2=%A9%&&SET A3=%A10%&&SET A4=%A11%&&SET A5=%A12%&&SET A6=%A13%&&SET A7=%A14%&&SET A8=%A15%&&SET A9=%A16%&&SET "SHIFT=7"
IF "%A#%"=="1" IF "%%a"=="%A9%" SET A1=%A9%&&SET A2=%A10%&&SET A3=%A11%&&SET A4=%A12%&&SET A5=%A13%&&SET A6=%A14%&&SET A7=%A15%&&SET A8=%A16%&&SET A9=%A17%&&SET "SHIFT=8")
FOR %%1 in (A10 A11 A12 A13 A14 A15 A16 A17) DO (CALL SET %%1=)
EXIT /B
:COMMAND_HELP
SET "PAD_SIZE=10"&&CALL:PAD_LINE&&ECHO                $HAZZAM COMMAND-LINE PARAMETERS:&&SET "PAD_SIZE=10"&&CALL:PAD_LINE
SET "PAD_SIZE=10"&&CALL:PAD_LINE&&ECHO        NOTE: YOU CAN ADDRESS DISKS BY DISK-ID OR DISK #.&&SET "PAD_SIZE=10"&&CALL:PAD_LINE
ECHO    -help                                                 (This Menu)
ECHO    -arg                                                  (1st arg=arguement test. Last arg=exec+test)
ECHO    -listmgr -install -list {NAME.LST}                    (Live-Install Package-List)
SET "PAD_SIZE=10"&&CALL:PAD_LINE
ECHO     The specified boot-media and VHDX must be in the main program folder or the operation will fail.
ECHO    -bootmaker -create -disk {#} / -diskid {ID} -src {BOOT.WIM}   (Erase + Create Boot-Media on Specified Disk)
ECHO  Examples:
ECHO    -bootmaker -create -disk 0 -src BOOT123.WIM -vhdx 123.VHDX
ECHO    -bootmaker -create -diskid 12345678-1234-1234-1234-123456781234 -src BOOT-MEDIA.SAV -vhdx 123.VHDX
SET "PAD_SIZE=10"&&CALL:PAD_LINE
ECHO    -diskmgr -list                                           (Condensed list of Disks)
ECHO    -diskmgr -getdisk -disk {#} /or/ -diskid {ID}            (Query Disk # / Disk ID)
ECHO    -diskmgr -inspect -disk {#} /or/ -diskid {ID}            (Full DiskPart Inquiry on Specified Disk)
ECHO    -diskmgr -erase -disk {#} /or/ -diskid {ID}              (Delete All Partitions on Specified Disk)
ECHO    -diskmgr -changeid -disk {#} /or/ -diskid {ID} {NEW ID}  (Change Disk ID of Specified Disk)
ECHO    -diskmgr -create -disk {#} /or/ -diskid {ID} -size {MB}  (Create NTFS Partition on Specified Disk)
ECHO    -diskmgr -format -disk {#} /or/ -diskid {ID} -part {#}   (Format Partition w/NTFS on Specified Disk)
ECHO    -diskmgr -delete -disk {#} /or/ -diskid {ID} -part {#}   (Delete Partition on Specified Disk)
ECHO    -diskmgr -lock -disk {#} /or/ -diskid {ID} -part {#}     (Mark Partition GUID as "Do Not Mount")
ECHO    -diskmgr -unmount -letter {LTR}                          (Remove Drive Letter)
ECHO    -diskmgr -mount -disk {#} /or/ -diskid {ID} -part {#} -letter {LTR} (Assign Drive Letter + unlock)
ECHO  Examples:
ECHO    -diskmgr -create -disk 0 -size 25600
ECHO    -diskmgr -mount -disk 0 -part 1 -letter e
ECHO    -diskmgr -mount -diskid 12345678-1234-1234-1234-123456781234 -part 1 -letter e
SET "PAD_SIZE=10"&&CALL:PAD_LINE
ECHO     WIM/VHDX Source Images must be placed in their respective folders (UNIFIED/ISOLATED) or the operation will fail.
ECHO    -imageproc -wim {ABC.WIM} -index {INDEX} -vhdx {XYZ.VHDX} -size {MB}
ECHO    -imageproc -wim  {ABC.WIM} -index {INDEX} -wim {ABC.WIM} -xlvl {FAST/MAX}
ECHO    -imageproc -vhdx {XYZ.VHDX} -index {INDEX} -wim {ABC.WIM} -xlvl {FAST/MAX}
ECHO  Examples:
ECHO    -imageproc -wim ABC.WIM -index 1 -vhdx 123.VHDX -size 25600
ECHO    -imageproc -wim ABC.WIM -index 1 -wim ABC.WIM -xlvl fast
ECHO    -imageproc -vhdx XYZ.VHDX -index 1 -wim ABC.WIM -xlvl fast
SET "PAD_SIZE=10"&&CALL:PAD_LINE&&ECHO                                            END OF CMD HELP&&SET "PAD_SIZE=10"&&CALL:PAD_LINE
EXIT /B
REM COMMAND_MODE_COMMAND_MODE_COMMAND_MODE_COMMAND_MODE_COMMAND_MODE
:COMMAND_MODE
REM COMMAND_MODE_COMMAND_MODE_COMMAND_MODE_COMMAND_MODE_COMMAND_MODE
ECHO.&&SET "CAME_FROM=COMMAND"&&SET "PROG_SOURCE=%PROG_FOLDER%"&&SET "PROG_TARGET=%PROG_FOLDER%"&&CALL:FOLDER_LOCATE
SET "EXIT_FLAG="&&CALL:COMMAND_ERROR
IF "%EXIT_FLAG%"=="1" GOTO:CLEAN_EXIT
IF "%ARG1%"=="-HELP" CALL:COMMAND_HELP
IF "%ARG1%"=="-BOOTMAKER" IF DEFINED ARG2 IF "%ARG3%"=="-DISKID" IF DEFINED ARG4 SET "DISK_TARGET=%ARG4%"&&CALL:DISK_QUERY>NUL
IF "%ARG1%"=="-BOOTMAKER" IF DEFINED ARG2 IF "%ARG3%"=="-DISKID" IF DEFINED ARG4 SET "ARG3=-DISK"&&SET "ARG4=%DISK_NUMBER%"
IF "%ARG1%"=="-DISKMGR" IF DEFINED ARG2 IF "%ARG3%"=="-DISKID" IF DEFINED ARG4 SET "DISK_TARGET=%ARG4%"&&CALL:DISK_QUERY>NUL
IF "%ARG1%"=="-DISKMGR" IF DEFINED ARG2 IF "%ARG3%"=="-DISKID" IF DEFINED ARG4 SET "ARG3=-DISK"&&SET "ARG4=%DISK_NUMBER%"
IF "%ARG1%"=="-IMAGEPROC" IF "%ARG2%"=="-WIM" IF DEFINED ARG3 IF EXIST "%IMAGE_FOLDER%\%ARG3%" IF "%ARG4%"=="-INDEX" IF DEFINED ARG5 IF "%ARG6%"=="-VHDX" IF DEFINED ARG7 IF "%ARG8%"=="-SIZE" IF DEFINED ARG9 SET "SOURCE_SLOT_COMMAND=WIM"&&SET "TARGET_SLOT_COMMAND=VHDX"&&SET "WIM_SOURCE_COMMAND=%ARG3%"&&SET "WIM_INDEX_COMMAND=%ARG5%"&&SET "VHDX_TARGET_COMMAND=%ARG7%"&&SET "VHDX_SIZE_COMMAND=%ARG9%"&&CALL:IMAGEPROC
IF "%ARG1%"=="-IMAGEPROC" IF "%ARG2%"=="-WIM" IF DEFINED ARG3 IF EXIST "%IMAGE_FOLDER%\%ARG3%" IF "%ARG4%"=="-INDEX" IF DEFINED ARG5 IF "%ARG6%"=="-WIM" IF DEFINED ARG7 IF "%ARG8%"=="-XLVL" IF DEFINED ARG9 SET "SOURCE_SLOT_COMMAND=WIM"&&SET "TARGET_SLOT_COMMAND=WIM"&&SET "WIM_SOURCE_COMMAND=%ARG3%"&&SET "WIM_INDEX_COMMAND=%ARG5%"&&SET "WIM_TARGET_COMMAND=%ARG7%"&&SET "WIM_COMPRESS_COMMAND=%ARG9%"&&CALL:IMAGEPROC
IF "%ARG1%"=="-IMAGEPROC" IF "%ARG2%"=="-VHDX" IF DEFINED ARG3 IF EXIST "%IMAGE_FOLDER%\%ARG3%" IF "%ARG4%"=="-INDEX" IF DEFINED ARG5 IF "%ARG6%"=="-WIM" IF DEFINED ARG7 IF "%ARG8%"=="-XLVL" IF DEFINED ARG9 SET "SOURCE_SLOT_COMMAND=VHDX"&&SET "TARGET_SLOT_COMMAND=WIM"&&SET "VHDX_SOURCE_COMMAND=%ARG3%"&&SET "WIM_INDEX_COMMAND=%ARG5%"&&SET "WIM_TARGET_COMMAND=%ARG7%"&&SET "WIM_COMPRESS_COMMAND=%ARG9%"&&CALL:IMAGEPROC
IF "%ARG1%"=="-LISTMGR" IF "%ARG2%"=="-INSTALL" IF "%ARG3%"=="-LIST" FOR /F "TOKENS=1 SKIP=1 DELIMS={}" %%1 in (%CACHE_FOLDER%\%ARG4%) DO (CALL SET LIVE_APPLY=1&&CALL SET "IMAGEFILE_PACK=%PACK_FOLDER%\%%1"&&CALL:PACK_INSTALL)
IF "%ARG1%"=="-BOOTMAKER" IF "%ARG2%"=="-CREATE" IF "%ARG3%"=="-DISK" IF DEFINED ARG4 IF "%ARG5%"=="-SRC" IF DEFINED ARG6 IF EXIST "%PROG_SOURCE%\%ARG6%" SET "DISK_NUMBER=%ARG4%"&&CALL:DISK_QUERY>NUL 2>&1
IF "%ARG1%"=="-BOOTMAKER" IF "%ARG2%"=="-CREATE" IF "%ARG3%"=="-DISK" IF DEFINED ARG4 IF "%ARG5%"=="-SRC" IF DEFINED ARG6 IF EXIST "%PROG_SOURCE%\%ARG6%" SET "DISK_NUMBER=%ARG4%"&&FOR %%a in (0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15) DO (IF "%ARG4%"=="%%a" CALL SET "DISK_TARGET=%%DISKID_%%a%%"&&CALL ECHO.%%DISKID_%%a%%>"%TEMP%\DISK_TARGET")
IF "%ARG1%"=="-BOOTMAKER" IF "%ARG2%"=="-CREATE" IF "%ARG3%"=="-DISK" IF DEFINED ARG4 IF "%ARG5%"=="-SRC" IF DEFINED ARG6 IF EXIST "%PROG_SOURCE%\%ARG6%" SET "BOOT_IMAGE=%PROG_SOURCE%\%ARG6%"&&SET "VHDX_SOURCE_$ETUP=%ARG8%"&&CALL:BOOT_MAKER
IF "%ARG1%"=="-DISKMGR" IF "%ARG2%"=="-LIST" CALL:DISK_QUERY
IF "%ARG1%"=="-DISKMGR" IF "%ARG2%"=="-INSPECT" IF "%ARG3%"=="-DISK" IF DEFINED ARG4 SET "DISK_NUMBER=%ARG4%"&&CALL:DISKMGR_INSPECT
IF "%ARG1%"=="-DISKMGR" IF "%ARG2%"=="-GETDISK" IF "%ARG3%"=="-DISK" IF DEFINED ARG4 SET "DISK_NUMBER=%ARG4%"&&CALL:DISK_QUERY>NUL
IF "%ARG1%"=="-DISKMGR" IF "%ARG2%"=="-GETDISK" IF "%ARG3%"=="-DISK" IF DEFINED DISKID_%DISK_NUMBER% CALL ECHO [DISK [%DISK_NUMBER%] [DISK ID[%%DISKID_%DISK_NUMBER%%%]
IF "%ARG1%"=="-DISKMGR" IF "%ARG2%"=="-GETDISK" IF "%ARG3%"=="-DISK" IF NOT DEFINED DISKID_%DISK_NUMBER% CALL ECHO DISK #/ID DOES NOT EXIST
IF "%ARG1%"=="-DISKMGR" IF "%ARG2%"=="-ERASE" IF "%ARG3%"=="-DISK" IF DEFINED ARG4 CALL:DISK_QUERY>NUL
IF "%ARG1%"=="-DISKMGR" IF "%ARG2%"=="-ERASE" IF "%ARG3%"=="-DISK" IF DEFINED ARG4 SET "DISK_NUMBER=%ARG4%"&&FOR %%a in (0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15) DO (IF "%ARG4%"=="%%a" CALL SET "DISK_TARGET=%%DISKID_%%a%%"&&CALL:DISKMGR_ERASE)
IF "%ARG1%"=="-DISKMGR" IF "%ARG2%"=="-CHANGEID" IF "%ARG3%"=="-DISK" IF DEFINED ARG4 SET "DISK_NUMBER=%ARG4%"&&SET "GET_DISK_ID=%ARG5%"&&CALL:DISKMGR_CHANGEID
IF "%ARG1%"=="-DISKMGR" IF "%ARG2%"=="-CREATE" IF "%ARG3%"=="-DISK" IF DEFINED ARG4 SET "DISK_NUMBER=%ARG4%"&&IF "%ARG5%"=="-SIZE"  SET "PART_SIZE=%ARG6%"&&CALL:DISKMGR_CREATE
IF "%ARG1%"=="-DISKMGR" IF "%ARG2%"=="-FORMAT" IF "%ARG3%"=="-DISK" IF DEFINED ARG4 SET "DISK_NUMBER=%ARG4%"&&IF "%ARG5%"=="-PART" SET "PART_NUMBER=%ARG6%"&&CALL:DISKMGR_FORMAT
IF "%ARG1%"=="-DISKMGR" IF "%ARG2%"=="-DELETE" IF "%ARG3%"=="-DISK" IF DEFINED ARG4 SET "DISK_NUMBER=%ARG4%"&&IF "%ARG5%"=="-PART" SET "PART_NUMBER=%ARG6%"&&CALL:DISKMGR_DELETE
IF "%ARG1%"=="-DISKMGR" IF "%ARG2%"=="-LOCK" IF "%ARG3%"=="-DISK" IF DEFINED ARG4 SET "DISK_NUMBER=%ARG4%"&&IF "%ARG5%"=="-PART" SET "PART_NUMBER=%ARG6%"&&CALL:DISKMGR_LOCK
IF "%ARG1%"=="-DISKMGR" IF "%ARG2%"=="-MOUNT" IF "%ARG3%"=="-DISK" IF DEFINED ARG4 SET "DISK_NUMBER=%ARG4%"&&IF "%ARG5%"=="-PART" SET "PART_NUMBER=%ARG6%"&&IF "%ARG7%"=="-LETTER" SET "DISK_LETTER=%ARG8%"&&CALL:DISKMGR_MOUNT
IF "%ARG1%"=="-DISKMGR" IF "%ARG2%"=="-UNMOUNT" IF "%ARG3%"=="-LETTER" IF DEFINED ARG4 SET "DISK_LETTER=%ARG4%"&&CALL:DISKMGR_UNMOUNT
IF EXIST "%PROG_SOURCE%\ScratchPack" RD /S /Q "\\?\%PROG_SOURCE%\ScratchPack">NUL 2>&1
IF EXIST "%PROG_SOURCE%\SCRATCH" RD /S /Q "\\?\%PROG_SOURCE%\SCRATCH">NUL 2>&1
IF EXIST "%TEMP%\DISK_TARGET" DEL /Q /F "%TEMP%\DISK_TARGET">NUL 2>&1
GOTO:CLEAN_EXIT
:COMMAND_ERROR
SET "TEST="&&FOR %%a in (1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20) DO (CALL SET "TEST=%%ARG%%a%%"&&CALL:ARG_VIEW)
ECHO.&&IF DEFINED ARG1 IF NOT "%ARG1%"=="-HELP" IF NOT "%ARG1%"=="-BOOTMAKER" IF NOT "%ARG1%"=="-DISKMGR" IF NOT "%ARG1%"=="-FILEMGR" IF NOT "%ARG1%"=="-IMAGEPROC" IF NOT "%ARG1%"=="-LISTMGR" CALL:PAD_LINE&&ECHO                          TYPE $HAZZAM.CMD -HELP&&CALL:PAD_LINE&&SET "EXIT_FLAG=1"
IF "%ARG1%"=="-BOOTMAKER" IF "%ARG2%"=="-CREATE" IF DEFINED ARG6 IF NOT EXIST "%PROG_SOURCE%\%ARG6%" ECHO BOOT-MEDIA %PROG_SOURCE%\%ARG6% IS MISSING&&SET "EXIT_FLAG=1"
IF "%ARG1%"=="-BOOTMAKER" IF "%ARG2%"=="-CREATE" IF DEFINED ARG8 IF NOT EXIST "%IMAGE_FOLDER%\%ARG8%" ECHO VHDX %IMAGE_FOLDER%\%ARG8% IS MISSING&&SET "EXIT_FLAG=1"
IF "%ARG1%"=="-IMAGEPROC" IF "%ARG2%"=="-WIM" IF DEFINED ARG3 IF NOT EXIST "%IMAGE_FOLDER%\%ARG3%" ECHO WIM %IMAGE_FOLDER%\%ARG3% IS MISSING&&SET "EXIT_FLAG=1"
IF "%ARG1%"=="-IMAGEPROC" IF "%ARG2%"=="-VHDX" IF DEFINED ARG3 IF NOT EXIST "%IMAGE_FOLDER%\%ARG3%" ECHO VHDX %IMAGE_FOLDER%\%ARG3% IS MISSING&&SET "EXIT_FLAG=1"
IF "%ARG1%"=="-LISTMGR" IF "%ARG2%"=="-INSTALL" IF "%ARG3%"=="-PACK" IF DEFINED ARG4 IF NOT EXIST "%PACK_FOLDER%\%ARG4%" ECHO PACKAGE %PACK_FOLDER%\%ARG4% IS MISSING&&SET "EXIT_FLAG=1"
IF "%ARG1%"=="-IMAGEMGR" IF "%ARG2%"=="-MOUNT" IF "%ARG3%"=="-ISO" IF DEFINED ARG4 IF NOT EXIST "%IMAGE_FOLDER%\%ARG4%" ECHO PACKAGE %IMAGE_FOLDER%\%ARG4% IS MISSING&&SET "EXIT_FLAG=1"
EXIT /B
:MENU_HEAD_GENERIC
CALL:PAD_LINE&&ECHO                         $haZZam^^! Image-Deploy&&CALL:PAD_LINE
EXIT /B
:PROG_MAIN_HELP
CLS&&COLOR 0B
CALL:PAD_LINE&&ECHO;::                        ~ MAIN MENU HELP ~                        ::&&CALL:PAD_LINE
ECHO;::                                                                  ::
ECHO;:: {1}Image Management     [Perform image related tasks]            ::
ECHO;:: {2}Image Processor      [Convert/isolate WIM/VHDX images]        ::
ECHO;:: {3}Package Creator      [Create driver/scripted $PK packages]    ::
ECHO;:: {4}File Management      [Simple file manager, file-picker]       ::
ECHO;:: {5}Disk Management      [Basic disk partitioning]                ::
ECHO;::  *{B}oot^^!               [Create bootable-deployment environment] ::
ECHO;:: {6}Tasks                [Admin tasks, instant-packs, etc]        ::
ECHO;:: {0}Settings             [Settings-backup, misc]                  ::
ECHO;::                                                                  ::
ECHO;::                                                                  ::
ECHO;::    *Appears once boot-media is imported via Image-Management     ::
CALL:PAD_LINE&&CALL:PAD_LINE
CALL:PAUSED
EXIT /B
:DISCLAIMER
CLS&&ECHO &&COLOR 0C
ECHO.
ECHO  ----------------------- DISCLAIMER -------------------------
ECHO                   THIS PROGRAM IS DANGEROUS
ECHO         DO NOT PROCEED UNLESS YOUR DATA IS BACKED UP.
ECHO     DO NOT PROCEED UNLESS YOU HAVE AN ALTERNATIVE METHOD
ECHO    TO RESTORE YOUR DATA IN THE EVENT SOMETHING GOES WRONG.
ECHO       By using this tool, you accept full liability for 
ECHO   any loss that occurs resulting from or relating to the use
ECHO  of this tool. So no guarantees, anything can happen, anytime.
ECHO  ------------------------------------------------------------
ECHO                         Kapeesh? (Y/N)&&ECHO.&&CALL:MENU_SELECT
IF "%SELECT%"=="Y" SET "DISCLAIMER=ACCEPTED"&&SET "SELECT=5"
COLOR 0B
EXIT /B
REM MENU_SELECT_MENU_SELECT_MENU_SELECT_MENU_SELECT_MENU_SELECT
:MENU_SELECT
REM MENU_SELECT_MENU_SELECT_MENU_SELECT_MENU_SELECT_MENU_SELECT
SET "SELECT="&&SET /P "SELECT=$>>"&&FOR %%G in (A B C D E F G H I J K L M N O P Q R S T U V W X Y Z) DO (CALL SET "SELECT=%%SELECT:%%G=%%G%%")
EXIT /B
:MENU_SELECT_ANY
SET "SELECT="&&SET /P "SELECT=$>>"
EXIT /B
:PROMPT_SET_UPPER
SET "PROMPT_VAR="&&SET /P "PROMPT_VAR=$>>"&&FOR %%G in (A B C D E F G H I J K L M N O P Q R S T U V W X Y Z) DO (CALL SET "PROMPT_VAR=%%PROMPT_VAR:%%G=%%G%%")
CALL SET "%PROMPT_SET%=%PROMPT_VAR%"&&SET "PROMPT_SET="&&SET "PROMPT_VAR="
EXIT /B
:PROMPT_SET_LOWER
SET "PROMPT_VAR="&&SET /P "PROMPT_VAR=$>>"&&FOR %%G in (a b c d e f g h i j k l m n o p q r s t u v w x y z) DO (CALL SET "PROMPT_VAR=%%PROMPT_VAR:%%G=%%G%%")
CALL SET "%PROMPT_SET%=%PROMPT_VAR%"&&SET "PROMPT_SET="&&SET "PROMPT_VAR="
EXIT /B
:PROMPT_SET_ANY
SET "PROMPT_VAR="&&SET /P "PROMPT_VAR=$>>"
CALL SET "%PROMPT_SET%=%PROMPT_VAR%"&&SET "PROMPT_SET="&&SET "PROMPT_VAR="
EXIT /B
:PROMPT_SET
ECHO.&&SET "PROMPT_VAR="&&SET /P "PROMPT_VAR=$>>"&&FOR %%G in (A B C D E F G H I J K L M N O P Q R S T U V W X Y Z) DO (CALL SET "PROMPT_VAR=%%PROMPT_VAR:%%G=%%G%%")
CALL SET "%PROMPT_SET%=%PROMPT_VAR%"&&SET "PROMPT_SET="&&SET "PROMPT_VAR="
EXIT /B
:FILE_LIST
ECHO.&&IF "%LIST_FMT%"=="PLAIN" FOR %%a in (1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20) DO (IF DEFINED TEMP_NAME%%a SET TEMP_NAME%%a=)
IF DEFINED LIST_PAD0 CALL:PAD_LINE&&ECHO.
IF DEFINED LIST_INSERTA ECHO %LIST_INSERTA%&&IF DEFINED LIST_INSERTB ECHO %LIST_INSERTB%&&IF DEFINED LIST_INSERTC ECHO %LIST_INSERTC%&&IF DEFINED LIST_INSERTD ECHO %LIST_INSERTD%&&IF DEFINED LIST_INSERTE ECHO %LIST_INSERTE%&&IF DEFINED LIST_INSERTF ECHO %LIST_INSERTF%&&IF DEFINED LIST_INSERTG ECHO %LIST_INSERTG%
IF DEFINED LIST_PAD1 ECHO.&&CALL:PAD_LINE&&ECHO.
IF DEFINED LIST_INSERTJ ECHO %LIST_INSERTJ%&&IF DEFINED LIST_INSERTK ECHO %LIST_INSERTK%&&IF DEFINED LIST_INSERTL ECHO %LIST_INSERTL%&&IF DEFINED LIST_INSERTM ECHO %LIST_INSERTM%
IF DEFINED LIST_DIR IF EXIST "%LIST_DIR%" SET "LIST_CNT=0"&&DIR "%LIST_DIR%" /A: /B /O:GN>%TEMP%\$HZ.TXT&&FOR /F "TOKENS=*" %%a in (%TEMP%\$HZ.TXT) DO (CALL SET /A LIST_CNT+=1&&CALL SET "OBJ_NAME=%%a"&&CALL:FILE_LIST_OUTSIDE)
IF EXIST "%TEMP%\$HZ.TXT" DEL /Q /F "%TEMP%\$HZ.TXT">NUL 2>&1
IF DEFINED LIST_PAD2 ECHO.&&CALL:PAD_LINE&&ECHO.
IF DEFINED LIST_DIR IF NOT EXIST "%LIST_DIR%" ECHO  [CRICKETS..]
IF DEFINED LIST_TXT IF NOT EXIST "%LIST_TXT%" ECHO  [CRICKETS..]
IF DEFINED LIST_PAD3 ECHO.&&CALL:PAD_LINE&&ECHO.
IF DEFINED LIST_INSERTX ECHO %LIST_INSERTX%&&IF DEFINED LIST_INSERTY ECHO %LIST_INSERTY%&&IF DEFINED LIST_INSERTZ ECHO %LIST_INSERTZ%
IF DEFINED LIST_PAD4 ECHO.&&CALL:PAD_LINE
ECHO.&&SET "LIST_DIR="&&SET "LIST_TXT="&&SET "LIST_FMT="&&SET "LIST_INSERTA="&&SET "LIST_INSERTB="&&SET "LIST_INSERTC="&&SET "LIST_INSERTD="&&SET "LIST_INSERTE="&&SET "LIST_INSERTF="&&SET "LIST_INSERTG="&&SET "LIST_INSERTX="&&SET "LIST_INSERTY="&&SET "LIST_INSERTZ="&&SET "LIST_INSERTJ="&&SET "LIST_INSERTK="&&SET "LIST_INSERTL="&&SET "LIST_INSERTM="&&SET "LIST_PAD0="&&SET "LIST_PAD1="&&SET "LIST_PAD2="&&SET "LIST_PAD3="&&SET "LIST_PAD4="&&SET "FILE_LIST_EXT="
IF "%SELECT%"=="\" CALL:MENU_SELECT&&EXIT /B
IF "%SELECT%"=="/" CALL:MENU_SELECT&&EXIT /B
CALL SET "SELECT=%%TEMP_NAME%SELECT%%%"
CALL SET "LIST_OUTPUT=%%TEMP_NAME%SELECT%%%"
EXIT /B
:FILE_LIST_OUTSIDE
CALL SET "TEMP_NAME%LIST_CNT%=%OBJ_NAME%"
IF "%LIST_FMT%"=="NUMERAL" ECHO  [ %LIST_CNT% ]\[%OBJ_NAME%]
IF "%LIST_FMT%"=="PLAIN" ECHO  [SRC]\[%OBJ_NAME%]
EXIT /B
:VAR_SET
IF NOT DEFINED VAR_SET SET "VAR_SET=NULL"
FOR %%1 in (%VAR_SET%) DO (SET "%%1=")
SET "VAR_SET="
EXIT /B
REM SETS_CREATE_SETS_CREATE_SETS_CREATE_SETS_CREATE_SETS_CREATE_SETS_CREATE  BCD_SYSTEM 
:SETS_CREATE
REM SETS_CREATE_SETS_CREATE_SETS_CREATE_SETS_CREATE_SETS_CREATE_SETS_CREATE 
(ECHO.$haZZam^^! Configuration File&&ECHO.VHDX_BACKUP=ORIG&&ECHO.SOURCE_SLOT_IMAGE=&&ECHO.TARGET_SLOT_IMAGE=&&ECHO.VHDX_SOURCE_$ETUP=&&ECHO.VHDX_SLOT_$ETUP=&&ECHO.BCDSLOT_CNT=&&ECHO.WIM_SOURCE_IMAGE=&&ECHO.WIM_TARGET_IMAGE=&&ECHO.VHDX_SOURCE_IMAGE=&&ECHO.VHDX_TARGET_IMAGE=123.VHDX&&ECHO.VHDX_SIZE_IMAGE=25600&&ECHO.WIM_DESC_IMAGE=NULL&&ECHO.WIM_INDEX_IMAGE=NULL&&ECHO.WIM_COMPRESS=FAST&&ECHO.PACK_COMPRESS=FAST&&ECHO.COLOR_SLOT=&&ECHO.MAKER_SLOT=&&ECHO.MACRO_TOGGLE=&&ECHO.MACRO_1=START CMD.EXE&&ECHO.MACRO_2=START NOTEPAD.EXE&&ECHO.MACRO_3=START REGEDIT.EXE&&ECHO.MACRO_4=&&ECHO.MACRO_5=&&ECHO.MACRO_6=&&ECHO.MACRO_7=&&ECHO.MACRO_8=&&ECHO.MACRO_9=&&ECHO.HOTKEY_1=CMD&&ECHO.HOTKEY_2=NOTE&&ECHO.HOTKEY_3=REG&&ECHO.HOTKEY_4=&&ECHO.HOTKEY_5=&&ECHO.HOTKEY_6=&&ECHO.HOTKEY_7=&&ECHO.HOTKEY_8=&&ECHO.HOTKEY_9=&&ECHO.NEWUSER1=&&ECHO.NEWUSER2=&&ECHO.PAD_STYLE=&&ECHO.DISCLAIMER=&&ECHO.AUTOPILOT=&&ECHO.$VER_SET=%$VER_CUR%&&ECHO.$ETTINGS=LOADED
)>"%PROG_SOURCE%\$ETTINGS.PRO"&&CALL:SETS_LOAD>NUL 2>&1
EXIT /B
:SETS_LOAD
COPY /Y "%PROG_SOURCE%\$ETTINGS.PRO" "0001">NUL 2>&1
FOR /F "eol=- TOKENS=1-2 delims==" %%a in (0001) DO (IF NOT "%%a"=="   " SET "%%a=%%b")
DEL /Q /F "0001">NUL 2>&1
EXIT /B
:SETS_HANDLER
IF NOT EXIST "%PROG_SOURCE%" SET "PROG_SOURCE=%PROG_FOLDER%"
IF NOT EXIST "%PROG_TARGET%" SET "PROG_TARGET=%PROG_FOLDER%"
IF NOT EXIST "%PROG_SOURCE%\$ETTINGS.PRO" IF EXIST "%PROG_SOURCE%\$haZZam.CMD" CALL:SETS_CREATE
MOVE /Y "%PROG_SOURCE%\$ETTINGS.PRO" "0001">NUL 2>&1
IF NOT "%$ETTINGS%"=="LOADED" FOR /F "eol=- TOKENS=1-2 delims==" %%a in (0001) DO (IF NOT "%%a"=="   " SET "%%a=%%b")
FOR /F "eol=- TOKENS=1-2 delims==" %%a in (0001) DO (CALL ECHO %%a=%%%%a%%>>"%PROG_SOURCE%\$ETTINGS.PRO")
IF EXIST "%PROG_SOURCE%\$ETTINGS.PRO" IF "%$VER_SET%" LSS "%$VER_CUR%" DEL /Q /F "%PROG_SOURCE%\$ETTINGS.PRO">NUL 2>&1
DEL /Q /F "0001">NUL 2>&1
EXIT /B
:OBJ_EXIST
FOR %%a in (VHDX_SOURCE_$ETUP VHDX_SOURCE_IMAGE WIM_SOURCE_IMAGE) DO (SET "OBJ_FLD=%IMAGE_FOLDER%"&&CALL SET "OBJ_CHK=%%a"&&CALL:OBJ_CLEAR)
FOR %%a in (VHDX_SOURCE_$ETUP VHDX_SOURCE_IMAGE WIM_SOURCE_IMAGE WIM_TARGET_IMAGE VHDX_TARGET_IMAGE) DO (IF NOT DEFINED %%a SET "%%a=-SELECT-")
EXIT /B
:OBJ_CLEAR
CALL SET ABC_CHK=%%%OBJ_CHK%%%
IF NOT EXIST "%OBJ_FLD%\%ABC_CHK%" CALL SET %OBJ_CHK%=-SELECT-
EXIT /B
:FOLDER_LOCATE
IF NOT DEFINED MAKER_SLOT SET "MAKER_SLOT=1"
SET "MAKER_FOLDER=%PROG_SOURCE%\Project%MAKER_SLOT%"
IF "%FOLDER_MODE%"=="ISOLATED" IF NOT EXIST "%PROG_SOURCE%\PACK" MD "%PROG_SOURCE%\PACK">NUL 2>&1
IF "%FOLDER_MODE%"=="ISOLATED" IF NOT EXIST "%PROG_SOURCE%\IMAGE" MD "%PROG_SOURCE%\IMAGE">NUL 2>&1
IF "%FOLDER_MODE%"=="ISOLATED" IF NOT EXIST "%PROG_SOURCE%\CACHE" MD "%PROG_SOURCE%\CACHE">NUL 2>&1
IF "%FOLDER_MODE%"=="UNIFIED" SET "PACK_FOLDER=%PROG_SOURCE%"&&SET "IMAGE_FOLDER=%PROG_SOURCE%"&&SET "CACHE_FOLDER=%PROG_SOURCE%"
SET "FOLDER_MODE=UNIFIED"&&IF EXIST "%PROG_SOURCE%\IMAGE" IF EXIST "%PROG_SOURCE%\PACK" IF EXIST "%PROG_SOURCE%\CACHE" SET "FOLDER_MODE=ISOLATED"
IF "%FOLDER_MODE%"=="UNIFIED" SET "PACK_FOLDER=%PROG_SOURCE%"&&SET "IMAGE_FOLDER=%PROG_SOURCE%"&&SET "CACHE_FOLDER=%PROG_SOURCE%"
IF "%FOLDER_MODE%"=="ISOLATED" SET "PACK_FOLDER=%PROG_SOURCE%\PACK"&&SET "IMAGE_FOLDER=%PROG_SOURCE%\IMAGE"&&SET "CACHE_FOLDER=%PROG_SOURCE%\CACHE"
EXIT /B
:IMAGE_EXIST
SET "SOURCE_LOCATION="&&FOR %%a in (A B C D E F G H I J K L N O P Q R S T U W Y Z) DO (IF EXIST "%%a:\sources" SET "SOURCE_LOCATION=%%a:\sources")
IF "%WIM_SOURCE_IMAGE%"=="-SELECT-" SET "WIM_DESC_IMAGE=NULL"&&SET "WIM_INDEX_IMAGE=NULL"
IF NOT "%WIM_SOURCE_IMAGE%"=="-SELECT-" IF "%WIM_INDEX_IMAGE%"=="NULL" SET "WIM_INDEX_IMAGE=1"
IF NOT "%PROG_MODE%"=="RAMDISK" IF NOT EXIST "%PROG_SOURCE%\BOOT-MEDIA.SAV" SET "BOOT_IMAGE=NONE"
IF NOT "%PROG_MODE%"=="RAMDISK" IF EXIST "%PROG_SOURCE%\BOOT-MEDIA.SAV" SET "BOOT_IMAGE=%PROG_SOURCE%\BOOT-MEDIA.SAV"
IF EXIST "%TEMP%\$WIM.TMP" DEL /Q /F "\\?\%TEMP%\$WIM.TMP">NUL 2>&1
IF "%PROG_MODE%"=="RAMDISK" SET "BOOT_IMAGE=U:\$.WIM"
EXIT /B
:FOLDER_MODE
ECHO.The folder structure will be regenerated&&ECHO.If a file is open or mounted and cannot be moved, it's possible you could lose that data.&&ECHO.CLI folder check (CACHE/PACK/IMAGE) will be affected.&&ECHO.ARE YOU SURE?&&ECHO.PRESS{Z}TO PROCEED&&CALL:MENU_SELECT
IF NOT "%SELECT%"=="Z" EXIT /B
IF "%FOLDER_MODE%"=="UNIFIED" SET "FOLDER_MODE=ISOLATED"&&GOTO:FOLDER_ISOLATED
IF "%FOLDER_MODE%"=="ISOLATED" SET "FOLDER_MODE=UNIFIED"&&GOTO:FOLDER_UNIFIED
:FOLDER_UNIFIED
IF EXIST "%PROG_SOURCE%\IMAGE" MOVE /Y "%PROG_SOURCE%\IMAGE\*.*" "%PROG_SOURCE%">NUL 2>&1
IF EXIST "%PROG_SOURCE%\PACK" MOVE /Y "%PROG_SOURCE%\PACK\*.*" "%PROG_SOURCE%">NUL 2>&1
IF EXIST "%PROG_SOURCE%\CACHE" MOVE /Y "%PROG_SOURCE%\CACHE\*.*" "%PROG_SOURCE%">NUL 2>&1
IF EXIST "%PROG_SOURCE%\IMAGE" XCOPY /S /C /Y "%PROG_SOURCE%\IMAGE" "%PROG_SOURCE%">NUL 2>&1
IF EXIST "%PROG_SOURCE%\PACK" XCOPY /S /C /Y "%PROG_SOURCE%\PACK" "%PROG_SOURCE%">NUL 2>&1
IF EXIST "%PROG_SOURCE%\CACHE" XCOPY /S /C /Y "%PROG_SOURCE%\CACHE" "%PROG_SOURCE%">NUL 2>&1
IF EXIST "%PROG_SOURCE%\IMAGE" RD /Q /S "\\?\%PROG_SOURCE%\IMAGE">NUL 2>&1
IF EXIST "%PROG_SOURCE%\PACK" RD /Q /S "\\?\%PROG_SOURCE%\PACK">NUL 2>&1
IF EXIST "%PROG_SOURCE%\CACHE" RD /Q /S "\\?\%PROG_SOURCE%\CACHE">NUL 2>&1
EXIT /B
:FOLDER_ISOLATED
IF NOT EXIST "%PROG_SOURCE%\IMAGE" MD "%PROG_SOURCE%\IMAGE">NUL 2>&1
IF NOT EXIST "%PROG_SOURCE%\PACK" MD "%PROG_SOURCE%\PACK">NUL 2>&1
IF NOT EXIST "%PROG_SOURCE%\CACHE" MD "%PROG_SOURCE%\CACHE">NUL 2>&1
IF EXIST "%PROG_SOURCE%\*.$PK" MOVE /Y "%PROG_SOURCE%\*.$PK" "%PROG_SOURCE%\PACK">NUL 2>&1
IF EXIST "%PROG_SOURCE%\*.CAB" MOVE /Y "%PROG_SOURCE%\*.CAB" "%PROG_SOURCE%\PACK">NUL 2>&1
IF EXIST "%PROG_SOURCE%\*.MSU" MOVE /Y "%PROG_SOURCE%\*.MSU" "%PROG_SOURCE%\PACK">NUL 2>&1
IF EXIST "%PROG_SOURCE%\*.ISO" MOVE /Y "%PROG_SOURCE%\*.ISO" "%PROG_SOURCE%\IMAGE">NUL 2>&1
IF EXIST "%PROG_SOURCE%\*.VHDX" MOVE /Y "%PROG_SOURCE%\*.VHDX" "%PROG_SOURCE%\IMAGE">NUL 2>&1
IF EXIST "%PROG_SOURCE%\*.WIM" MOVE /Y "%PROG_SOURCE%\*.WIM" "%PROG_SOURCE%\IMAGE">NUL 2>&1
IF EXIST "%PROG_SOURCE%\*.LST" MOVE /Y "%PROG_SOURCE%\*.LST" "%PROG_SOURCE%\CACHE">NUL 2>&1
IF EXIST "%PROG_SOURCE%\*.MLB" MOVE /Y "%PROG_SOURCE%\*.MLB" "%PROG_SOURCE%\CACHE">NUL 2>&1
IF EXIST "%PROG_SOURCE%\*.$BK" MOVE /Y "%PROG_SOURCE%\*.$BK" "%PROG_SOURCE%\CACHE">NUL 2>&1
EXIT /B
:EMPTY_TRASH
ICACLS "S:\$Recycle.Bin" /grant %username%:(D,WDAC)>NUL 2>&1
TAKEOWN /f "S:\$Recycle.Bin" /r /d y>NUL 2>&1
ICACLS "V:\$Recycle.Bin" /grant %username%:(D,WDAC)>NUL 2>&1
TAKEOWN /f "V:\$Recycle.Bin" /r /d y>NUL 2>&1
DEL /Q /F "S:\$Recycle.Bin\*.*">NUL 2>&1
RD /Q /S "S:\$Recycle.Bin">NUL 2>&1
DEL /Q /F "V:\$Recycle.Bin\*.*">NUL 2>&1
RD /Q /S "V:\$Recycle.Bin">NUL 2>&1
EXIT /B
:RESTART
CALL:SETS_HANDLER>NUL 2>&1
IF EXIST "U:\EFI" CALL:EFI_UNMOUNT>NUL 2>&1
IF EXIST "V:\" CALL:VDISK_DETACH>NUL 2>&1
"shutdown.exe" -r -f -t 0
:QUIT
CALL:SETS_HANDLER>NUL 2>&1
IF EXIST "U:\EFI" CALL:EFI_UNMOUNT>NUL 2>&1
IF EXIST "V:\" CALL:VDISK_DETACH>NUL 2>&1
GOTO:CLEAN_EXIT
REM TEST_SELECT_TEST_SELECT_TEST_SELECT_TEST_SELECT_TEST_SELECT
:TEST_SELECT
REM TEST_SELECT_TEST_SELECT_TEST_SELECT_TEST_SELECT_TEST_SELECT
ECHO TEST
ECHO (0) TO EXIT&&SET COMMAND99=&&SET /P "COMMAND99=$>>"
IF "%COMMAND99%"=="0" EXIT /B
%COMMAND99%
GOTO:TEST_SELECT
:EXIT_FLAGGER
SET "EXIT_FLAGGER="
IF "%SELECT%"=="" SET "EXIT_FLAGGER=1"
IF "%SELECT%"==" " SET "EXIT_FLAGGER=1"
IF "%SELECT%"=="  " SET "EXIT_FLAGGER=1"
IF "%SELECT%"=="   " SET "EXIT_FLAGGER=1"
IF NOT DEFINED SELECT SET "EXIT_FLAGGER=1"
EXIT /B
:PAUSED
SET /P PAUSED=.                     Press (Enter) to continue...
EXIT /B
:TITLECARD
SET TITLE=%RANDOM%%RANDOM%&&SET "TITLE=!TITLE:~5,5!"&&SET "TITLE=!TITLE:~1,1!"
IF "%TITLE%"=="1" TITLE  $haZZam^^! A native Windows image deployment tool.
IF "%TITLE%"=="2" TITLE  Export/import all current drivers, combine into a driver-pack.
IF "%TITLE%"=="3" TITLE  Only download from github.com/joshuacline
IF "%TITLE%"=="4" TITLE  Build, administrate and backup your Windows in a native WinPE recovery environment.
IF "%TITLE%"=="5" TITLE  In Slot-Mode VHDX's named between 0.VHDX and 9.VHDX are detected at boot.
IF "%TITLE%"=="6" TITLE  Only download from github.com/joshuacline
IF "%TITLE%"=="0" TITLE  $haZZam^^! The Mighty Batch
IF "%TITLE%"=="8" TITLE  Boot-media can be imported in Image Management.
IF "%TITLE%"=="9" TITLE  DISM can thrash disks pretty hard, some USB drives can freeze up.
IF "%TITLE%"=="0" TITLE  Boot-media can be imported in Image Management.
IF "%TITLE%"=="" GOTO:TITLECARD
EXIT /B
REM $ETTINGS_$ETTINGS_$ETTINGS_$ETTINGS_$ETTINGS_$ETTINGS_$ETTINGS_$ETTINGS
:$ETTINGS_START
REM $ETTINGS_$ETTINGS_$ETTINGS_$ETTINGS_$ETTINGS_$ETTINGS_$ETTINGS_$ETTINGS
@ECHO OFF&&CALL:SETS_HANDLER&&CALL:FOLDER_LOCATE&&CALL:OBJ_EXIST&&CALL:IMAGE_EXIST&&CALL:COLOR_CHK
CLS&&CALL:TITLEGEN&&IF DEFINED PROG_OPER CALL:TITLECARD
CALL:PAD_LINE&&ECHO                         Settings Configuration&&CALL:PAD_LINE
IF NOT DEFINED MACRO_SLOT SET "MACRO_SLOT=1"
IF NOT DEFINED MACRO_TOGGLE SET "MACRO_TOGGLE=DISABLED"
IF NOT DEFINED AUTOPILOT SET "AUTOPILOT=DISABLED"
IF NOT DEFINED PROG_OPER ECHO.
IF NOT DEFINED PROG_OPER IF NOT DEFINED COLOR_SLOT ECHO  {T}ext Color     [SHUFFLE]
IF NOT DEFINED PROG_OPER IF DEFINED COLOR_SLOT ECHO  {T}ext Color     [%COLOR_SLOT%]
IF NOT DEFINED PROG_OPER ECHO  {P}adding Style  [%PAD_STYLE%]
IF NOT DEFINED PROG_OPER ECHO  {F}older Layout  [%FOLDER_MODE%]
IF NOT DEFINED PROG_OPER IF "%MACRO_TOGGLE%"=="DISABLED" ECHO  {M}acros         [%MACRO_TOGGLE%]
IF NOT DEFINED PROG_OPER IF NOT "%MACRO_TOGGLE%"=="DISABLED" CALL ECHO  {M}acros [%MACRO_TOGGLE%] {X}Slot[%MACRO_SLOT%] {A}ssign [%%MACRO_%MACRO_SLOT%%%] {H}otKey [%%HOTKEY_%MACRO_SLOT%%%]
IF NOT DEFINED PROG_OPER ECHO.
IF "%PROG_OPER%"=="RESTORE_PRO" SET "LIST_FMT=NUMERAL"&&SET "LIST_DIR=%CACHE_FOLDER%\*.$BK"
IF DEFINED PROG_OPER CALL:FILE_LIST
IF NOT DEFINED PROG_OPER CALL:PAD_LINE&&ECHO  [Settings]  {C}reate {R}estore  {#}Clear Settings {@}Clear Macros
IF NOT DEFINED PROG_OPER CALL:PAD_LINE&&ECHO  [AutoPilot-%AUTOPILOT%]   {E}nable   {D}isable   {V}iew AutoPilot.cmd&&CALL:PAD_LINE
IF DEFINED PROG_OPER CALL:PAD_LINE&&ECHO                          Enter File # {/}Type&&CALL:PAD_LINE
CALL:PAD_PREV&&CALL:MENU_SELECT&&IF DEFINED PROG_OPER CALL:FILE_LIST>NUL
IF NOT DEFINED PROG_OPER IF NOT DEFINED SELECT GOTO:PROG_MAIN
IF DEFINED PROG_OPER IF NOT DEFINED SELECT SET "PROG_OPER="
IF "%SELECT%"=="T" SET "PROG_OPER=COLOR_SLOT"
IF "%SELECT%"=="F" CALL:FOLDER_MODE&&GOTO:$ETTINGS_START
IF "%SELECT%"=="A" SET "PROG_OPER=ASSIGN_MACRO"
IF "%SELECT%"=="C" SET "PROG_OPER=CREATE_PRO"
IF "%SELECT%"=="R" SET "PROG_OPER=RESTORE_PRO"&&GOTO:$ETTINGS_START
IF "%SELECT%"=="H" SET "PROG_OPER=ASSIGN_HOTKEY"
IF "%SELECT%"=="$" SET "PROG_OPER=BOOT_RECOVERY"
IF "%SELECT%"=="E" SET "PROG_OPER=AUTOPILOT_ENABLE"
IF "%SELECT%"=="D" SET "PROG_OPER=AUTOPILOT_DISABLE"
IF "%SELECT%"=="V" SET "PROG_OPER=AUTOPILOT_VIEW"
IF "%SELECT%"=="P" CALL:PAD_STYLE&&GOTO:$ETTINGS_START
IF "%SELECT%"=="#" CALL:SETS_CREATE&&GOTO:$ETTINGS_START
IF "%SELECT%"=="@" CALL:MACRO_CLEAR&&GOTO:$ETTINGS_START
IF "%SELECT%"=="X" CALL:MACRO_SLOT&&GOTO:$ETTINGS_START
IF "%SELECT%"=="M" CALL:MACRO_TOGGLE&&GOTO:$ETTINGS_START
IF "%PROG_OPER%"=="AUTOPILOT_VIEW" IF NOT EXIST "%PROG_SOURCE%\AutoPilot.cmd" CALL:AUTOPILOT_EXAMPLE
IF "%PROG_OPER%"=="AUTOPILOT_VIEW" START NOTEPAD.EXE "%PROG_SOURCE%\AutoPilot.cmd"&&SET "PROG_OPER="&&GOTO:$ETTINGS_START
IF "%PROG_OPER%"=="AUTOPILOT_ENABLE" IF NOT EXIST "%PROG_SOURCE%\AutoPilot.cmd" ECHO No AutoPilot.cmd exists in the program folder. From menu press {V} to generate&&SET "PROG_OPER="&&CALL:PAUSED&&GOTO:$ETTINGS_START
IF "%PROG_OPER%"=="AUTOPILOT_ENABLE" SET "BOOT_TARGET=RECOVERY"&&SET "AUTOPILOT_TOGGLE=1"&&CALL:BOOT_TARGET_TOGGLE&&SET "PROG_OPER="&&GOTO:$ETTINGS_START
IF "%PROG_OPER%"=="AUTOPILOT_DISABLE" SET "BOOT_TARGET=VHDX"&&SET "AUTOPILOT_TOGGLE=1"&&CALL:BOOT_TARGET_TOGGLE&&SET "PROG_OPER="&&GOTO:$ETTINGS_START
IF "%PROG_OPER%"=="RESTORE_PRO" IF NOT DEFINED SELECT SET "PROG_OPER="&&GOTO:$ETTINGS_START
IF "%PROG_OPER%"=="RESTORE_PRO" IF NOT EXIST "%CACHE_FOLDER%\%SELECT%" GOTO:$ETTINGS_START
IF "%PROG_OPER%"=="COLOR_SLOT" CALL:COLOR_SLOT
IF "%PROG_OPER%"=="ASSIGN_HOTKEY" ECHO Type 2+ Digit Hotkey&&SET "PROMPT_SET=HOTKEY_%MACRO_SLOT%"&&CALL:PROMPT_SET
IF "%PROG_OPER%"=="ASSIGN_MACRO" ECHO. Set Macro With&&ECHO. {1}File Manager&&ECHO. {2}Command&&CALL:MENU_SELECT
IF "%PROG_OPER%"=="ASSIGN_MACRO" IF "%SELECT%"=="1" GOTO:FILEMGR_START&&GOTO:$ETTINGS_START
IF "%PROG_OPER%"=="ASSIGN_MACRO" IF "%SELECT%"=="2" SET "PROMPT_SET=MACRO_%MACRO_SLOT%"&&ECHO Type Command&&CALL:PROMPT_SET
IF "%PROG_OPER%"=="CREATE_PRO" ECHO.&&ECHO New Profile-Name?&&SET "PROMPT_SET=NEW_NAME"&&CALL:PROMPT_SET
IF "%PROG_OPER%"=="CREATE_PRO" IF NOT DEFINED NEW_NAME SET "PROG_OPER="&&GOTO:$ETTINGS_START
IF "%PROG_OPER%"=="CREATE_PRO" CALL:SETS_HANDLER>NUL 2>&1
IF "%PROG_OPER%"=="CREATE_PRO" RD /Q /S "\\?\%PROG_SOURCE%\SETTINGS_SAVE">NUL 2>&1
IF "%PROG_OPER%"=="CREATE_PRO" MD "%PROG_SOURCE%\SETTINGS_SAVE\CACHE">NUL 2>&1
IF "%PROG_OPER%"=="CREATE_PRO" IF EXIST "%PROG_SOURCE%\$ETTINGS.PRO" COPY /Y "%PROG_SOURCE%\$ETTINGS.PRO" "%PROG_SOURCE%\SETTINGS_SAVE">NUL 2>&1
IF "%PROG_OPER%"=="CREATE_PRO" IF EXIST "%PROG_SOURCE%\AutoPilot.cmd" COPY /Y "%PROG_SOURCE%\AutoPilot.cmd" "%PROG_SOURCE%\SETTINGS_SAVE">NUL 2>&1
IF "%PROG_OPER%"=="CREATE_PRO" IF EXIST "%CACHE_FOLDER%\*.MLB" COPY /Y "%CACHE_FOLDER%\*.MLB" "%PROG_SOURCE%\SETTINGS_SAVE\CACHE">NUL 2>&1
IF "%PROG_OPER%"=="CREATE_PRO" IF EXIST "%CACHE_FOLDER%\*.LST" COPY /Y "%CACHE_FOLDER%\*.LST" "%PROG_SOURCE%\SETTINGS_SAVE\CACHE">NUL 2>&1
IF "%PROG_OPER%"=="CREATE_PRO" DISM /CAPTURE-IMAGE /CAPTUREDIR:"%PROG_SOURCE%\SETTINGS_SAVE" /IMAGEFILE:"%CACHE_FOLDER%\%NEW_NAME%.$BK" /COMPRESS:FAST /NAME:"%NEW_NAME%" /CheckIntegrity /Verify>NUL 2>&1
IF "%PROG_OPER%"=="CREATE_PRO" RD /Q /S "\\?\%PROG_SOURCE%\SETTINGS_SAVE">NUL 2>&1
IF "%PROG_OPER%"=="RESTORE_PRO" DISM /APPLY-IMAGE /IMAGEFILE:"%CACHE_FOLDER%\%SELECT%" /INDEX:1 /APPLYDIR:"%PROG_SOURCE%">NUL 2>&1
IF "%PROG_OPER%"=="RESTORE_PRO" IF DEFINED SELECT CALL:SETS_LOAD>NUL 2>&1
IF DEFINED PROG_OPER SET "PROG_OPER="
GOTO:$ETTINGS_START
:COLOR_SLOT
SET /A COLOR_SLOT+=1&&IF "%COLOR_SLOT%"=="9" SET "COLOR_SLOT="
EXIT /B
:MACRO_CLEAR
SET "MACRO_TOGGLE=DISABLED"&&FOR %%a in (1 2 3 4 5 6 7 8 9) DO (SET "HOTKEY_%%a="&&SET "MACRO_%%a=")
EXIT /B
:MACRO_SLOT
IF NOT DEFINED MACRO_SLOT SET "MACRO_SLOT=1"
SET "SELECT="&&SET /A MACRO_SLOT+=1
IF "%MACRO_SLOT%"=="10" SET "MACRO_SLOT=1"
EXIT /B
:MACRO_TOGGLE
IF "%MACRO_TOGGLE%"=="DISABLED" IF NOT DEFINED MACRO_1 IF NOT DEFINED MACRO_2 IF NOT DEFINED MACRO_3 ECHO MACRO'S CAN GET BUGGY, CLEAR MACROS IF YOU HAVE ISSUES&&CALL:PAUSED
IF "%MACRO_TOGGLE%"=="DISABLED" SET "MACRO_TOGGLE=ENABLED"&&EXIT /B
IF "%MACRO_TOGGLE%"=="ENABLED" SET "MACRO_TOGGLE=DISABLED"&&EXIT /B
EXIT /B
:AUTOPILOT_EXAMPLE
(ECHO;:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
ECHO;:::::::::::::::::::::::::::START:OF:AUTO-PILOT:::::::::::::::::::::::::::
ECHO;:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
ECHO;::    VHDX BACKUP EXAMPLE                        HOME-FOLDER = S:\$    ::
ECHO;::       SCRIPT MUST BE OPEN-ENDED NO EXIT , CAN CAUSE BOOTLOOP        ::
ECHO;::AUTO-PILOT MUST BE ENABLED WITHIN THE HOST OS FOR REBOOT-TO-RECOVERY ::
ECHO;:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
ECHO.ECHO - AUTOPILOT - EXAMPLE - YOUR SCRIPT - GOES HERE -
ECHO.PAUSE
ECHO;:::::::::::::::::::AUTO-PILOT:ROUTINE:BACKUP:EXAMPLE:::::::::::::::::::::       
ECHO.REM $haZZam.cmd -diskmgr -mount -diskid 12345678-1234-1234-1234-123456781234 -part 1 -letter T
ECHO.REM COPY /Y S:\$\ACTIVE.VHDX T:\BACKUPS\LAST_CRASH.VHDX
ECHO.REM $haZZam.cmd -diskmgr -unmount -letter T
ECHO.REM $haZZam.cmd -imageproc -wim 22H2_AUTO.WIM -index 1 -vhdx ACTIVE.VHDX -size 25600
ECHO.REM DEL S:\$\ACTIVE.VHDX
ECHO.REM MOVE /Y S:\$\IMAGE\ACTIVE.VHDX S:\$
ECHO;:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
ECHO;::::::::::::::::::::::::::::END:OF:AUTO-PILOT::::::::::::::::::::::::::::
ECHO;:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
)>"%PROG_SOURCE%\AutoPilot.cmd"
EXIT /B
:AUTOPILOT_COUNT
IF EXIST "S:\$\ERR.TXT" DEL "S:\$\ERR.TXT"&&SET "AUTOPILOT=DISABLED"&&CALL:SETS_HANDLER&&EXIT /B
IF NOT EXIST "S:\$\AutoPilot.cmd" SET "AUTOPILOT=DISABLED"&&CALL:SETS_HANDLER&&EXIT /B
ECHO;@ECHO OFF>X:\COUNT.CMD
ECHO;FOR %%%%a in (20 19 18 17 16 15 14 13 13 12 11 10 9 8 7 6 5 4 3 2 1 0) DO (CLS^&^&ECHO AutoPilot starts in %%%%a seconds...^&^&PING -n 2 127.0.0.1^>NUL)>>X:\COUNT.CMD
ECHO;CD /D S:\$>>X:\COUNT.CMD
ECHO;CALL S:\$\AutoPilot.cmd>>X:\COUNT.CMD
ECHO;ECHO AutoPilot Finished. Restarting in 5 Seconds>>X:\COUNT.CMD
ECHO;PING -n 6 127.0.0.1^>NUL >>X:\COUNT.CMD
ECHO;DEL /Q /F S:\$\ERR.TXT>>X:\COUNT.CMD
ECHO;EXIT^&^&EXIT>>X:\COUNT.CMD	
CALL:PAD_LINE&&ECHO    To cancel AutoPilot close countdown window, then press {N}&&CALL:PAD_LINE
ECHO AUTOPILOT>S:\$\ERR.TXT
START /WAIT X:\COUNT.CMD
IF EXIST "S:\$\ERR.TXT" DEL "S:\$\ERR.TXT"&&SET "AUTOPILOT=DISABLED"&&CALL:SETS_HANDLER
EXIT /B
:BOOT_TARGET_TOGGLE
SET "GUID_TMP="&&SET "GUID_CUR="&&FOR /f "TOKENS=1-5 DELIMS= " %%a in ('BCDEDIT.EXE /V') do (
IF "%%a"=="displayorder" SET "GUID_CUR=%%b"
IF "%%a"=="identifier" CALL SET "GUID_TMP=%%b"
IF "%%a"=="description" IF "%%b"=="$haZZam!" IF "%BOOT_TARGET%"=="GET" CALL:BOOT_TARGET>NUL 2>&1
IF "%%a"=="description" IF "%%b"=="$haZZam!" IF "%BOOT_TARGET%"=="RECOVERY" CALL:BOOT_TARGET>NUL 2>&1
IF "%%a"=="description" IF "%%b"=="$haZZam!" IF "%BOOT_TARGET%"=="VHDX" CALL:BOOT_TARGET>NUL 2>&1)
EXIT /B
:BOOT_TARGET
IF DEFINED AUTOPILOT_TOGGLE IF "%BOOT_TARGET%"=="RECOVERY" SET "AUTOPILOT_TOGGLE="&&SET "AUTOPILOT=ENABLED"
IF DEFINED AUTOPILOT_TOGGLE IF "%BOOT_TARGET%"=="VHDX" SET "AUTOPILOT_TOGGLE="&&SET "AUTOPILOT=DISABLED"
IF "%BOOT_TARGET%"=="GET" IF "%GUID_TMP%"=="%GUID_CUR%" SET "BOOT_PRIORITY=RECOVERY"
IF "%BOOT_TARGET%"=="GET" IF NOT "%GUID_TMP%"=="%GUID_CUR%" SET "BOOT_PRIORITY=VHDX"
IF "%BOOT_TARGET%"=="RECOVERY" SET "BOOT_PRIORITY=RECOVERY"&&BCDEDIT.EXE /displayorder %GUID_TMP% /addfirst&&IF NOT "%PROG_MODE%"=="RAMDISK" SC CREATE AutoPilotStrap binpath="%WinDir%\SYSTEM32\CMD.EXE /C BCDEDIT.EXE /displayorder %GUID_TMP% /addfirst" start=auto
IF "%BOOT_TARGET%"=="VHDX" SET "BOOT_PRIORITY=VHDX"&&BCDEDIT.EXE /displayorder %GUID_TMP% /addlast&&IF NOT "%PROG_MODE%"=="RAMDISK" SC DELETE AutoPilotStrap
SET "BOOT_TARGET="
EXIT /B
:MACRO_RUN
SET MACRO_RUN=
CALL:EXIT_FLAGGER
IF "%EXIT_FLAGGER%"=="1" EXIT /B
IF "%SELECT%"=="%HOTKEY_1%" SET "MACRO_RUN=%MACRO_1%"
IF "%SELECT%"=="%HOTKEY_2%" SET "MACRO_RUN=%MACRO_2%"
IF "%SELECT%"=="%HOTKEY_3%" SET "MACRO_RUN=%MACRO_3%"
IF "%SELECT%"=="%HOTKEY_4%" SET "MACRO_RUN=%MACRO_4%"
IF "%SELECT%"=="%HOTKEY_5%" SET "MACRO_RUN=%MACRO_5%"
IF "%SELECT%"=="%HOTKEY_6%" SET "MACRO_RUN=%MACRO_6%"
IF "%SELECT%"=="%HOTKEY_7%" SET "MACRO_RUN=%MACRO_7%"
IF "%SELECT%"=="%HOTKEY_8%" SET "MACRO_RUN=%MACRO_8%"
IF "%SELECT%"=="%HOTKEY_9%" SET "MACRO_RUN=%MACRO_9%"
ECHO;@ECHO OFF >OUTER.BAT
ECHO;SET CRASHED=>>OUTER.BAT
ECHO;CMD /C INNER.BAT >>OUTER.BAT
ECHO;IF EXIST INNER.BAT SET CRASHED=1 >>OUTER.BAT
ECHO;IF EXIST INNER.BAT $HAZZAM.CMD >>OUTER.BAT
ECHO;@ECHO OFF >INNER.BAT
ECHO;%MACRO_RUN% >>INNER.BAT
ECHO;DEL /Q /F %%0 >>INNER.BAT
CMD /C OUTER.BAT>NUL 2>&1
DEL /Q /F OUTER.BAT>NUL 2>&1
EXIT /B
REM IMAGEMGR_IMAGEMGR_IMAGEMGR_IMAGEMGR_IMAGEMGR_IMAGEMGR_IMAGEMGR_
:IMAGEMGR_START
REM IMAGEMGR_IMAGEMGR_IMAGEMGR_IMAGEMGR_IMAGEMGR_IMAGEMGR_IMAGEMGR_
@ECHO OFF&&CALL:SETS_HANDLER&&CALL:FOLDER_LOCATE&&CALL:OBJ_EXIST&&CALL:IMAGE_EXIST&&CALL:COLOR_CHK&&SET "LIVE_APPLY="&&SET "SANDWICH_PARSE="&&SET "LOL_PARSE="&&SET "LIST_CREATE="&&SET "FILE_HEADER="&&SET "HEADER_TGT="&&SET "HEADER_TGT_LOL="&&SET "ERR_MSG="&&SET "TARGET_IMAGE="
CLS&&CALL:TITLEGEN&&IF DEFINED PROG_OPER CALL:TITLECARD
CALL:PAD_LINE&&ECHO                            Image Management&&CALL:PAD_LINE
IF NOT DEFINED PROG_OPER IF DEFINED SOURCE_LOCATION IF EXIST "%SOURCE_LOCATION%\INSTALL.WIM" ECHO                 {WINDOWS INSTALLATION-MEDIA DETECTED}&&CALL:PAD_LINE&&ECHO     {+}Import Windows-Installation-Media      {-}Import Boot-Media&&CALL:PAD_LINE
IF NOT DEFINED PROG_OPER IF NOT EXIST "%SOURCE_LOCATION%\INSTALL.WIM" IF NOT "%PROG_MODE%"=="RAMDISK" IF NOT EXIST "%PROG_SOURCE%\*.SAV" IF NOT EXIST "%IMAGE_FOLDER%\*.WIM" IF NOT DEFINED SOURCE_LOCATION ECHO    Insert a Windows Disc/ISO/USB to Import Installation/Boot-Media&&CALL:PAD_LINE
IF "%PROG_OPER%"=="COMPACT" SET "LIST_DIR=%IMAGE_FOLDER%\*.VHDX"&&SET "LIST_FMT=NUMERAL"&&ECHO   AVAILABLE VHDX'S:&&CALL:FILE_LIST&&CALL:PAD_LINE
IF "%PROG_OPER%"=="VHDXMOUNT" SET "LIST_DIR=%IMAGE_FOLDER%\*.VHDX"&&SET "LIST_FMT=NUMERAL"&&ECHO   AVAILABLE VHDX'S:&&CALL:FILE_LIST&&CALL:PAD_LINE
IF "%PROG_OPER%"=="VIEW" SET "LIST_DIR=%CACHE_FOLDER%\*.LST"&&SET "LIST_FMT=NUMERAL"&&ECHO   AVAILABLE LST'S:&&CALL:FILE_LIST&&CALL:PAD_LINE
IF "%PROG_OPER%"=="ISOMOUNT" SET "LIST_DIR=%IMAGE_FOLDER%\*.ISO"&&SET "LIST_FMT=NUMERAL"&&ECHO   AVAILABLE ISO'S:&&SET "LIST_INSERTA= [ U ] UNMOUNT"&&CALL:FILE_LIST&&CALL:PAD_LINE
IF NOT DEFINED PROG_OPER SET "LIST_DIR=%IMAGE_FOLDER%\*.VHDX"&&SET "LIST_FMT=PLAIN"&&ECHO   AVAILABLE VHDX'S:&&CALL:FILE_LIST&&CALL:PAD_LINE
IF NOT DEFINED PROG_OPER ECHO  [VHDX]   {I}nspect  {D}ISM  {M}ount/Unmount  {N}ew(empty)   {X}ISO&&CALL:PAD_LINE
IF NOT DEFINED PROG_OPER SET "LIST_DIR=%CACHE_FOLDER%\*.LST"&&SET "LIST_FMT=PLAIN"&&ECHO   AVAILABLE LST'S:&&CALL:FILE_LIST&&CALL:PAD_LINE
IF NOT DEFINED PROG_OPER ECHO  [LIST]    {C}reate    {V}iew    {G}o^^!          {A}pply to[%VHDX_BACKUP%-VHDX] &&CALL:PAD_LINE
IF DEFINED PROG_OPER ECHO                    Enter File # To [%PROG_OPER%] {/}Type&&CALL:PAD_LINE
CALL:PAD_PREV&&CALL:MENU_SELECT&&IF DEFINED PROG_OPER CALL:FILE_LIST>NUL
IF NOT DEFINED PROG_OPER IF NOT DEFINED SELECT GOTO:PROG_MAIN
IF DEFINED PROG_OPER IF NOT DEFINED SELECT SET "PROG_OPER="
IF "%SELECT%"=="N" SET "PROG_OPER=NEW"
IF "%SELECT%"=="U" SET "PROG_OPER=ISOUNMOUNT"
IF "%SELECT%"=="+" CALL:SOURCE_IMPORT&&CALL:PAUSED
IF "%SELECT%"=="-" CALL:BOOT_IMPORT&&CALL:PAUSED
IF "%SELECT%"=="D" CALL:IMAGEMGR_DISM_MENU
IF "%SELECT%"=="C" CALL:IMAGEMGR_LIST_MAIN
IF "%SELECT%"=="G" CALL:IMAGEMGR_RUN_LIST
IF "%SELECT%"=="I" CALL:IMAGEMGR_INSPECT
IF "%SELECT%"=="A" CALL:IMAGEMGR_VHDX_BACKUP
IF "%SELECT%"=="V" SET "PROG_OPER=VIEW"&&GOTO:IMAGEMGR_START
IF "%SELECT%"=="M" IF EXIST "V:\" CALL:VDISK_BRUTE&&GOTO:IMAGEMGR_START
IF "%SELECT%"=="M" SET "PROG_OPER=VHDXMOUNT"&&GOTO:IMAGEMGR_START
IF "%SELECT%"=="X" SET "PROG_OPER=ISOMOUNT"&&GOTO:IMAGEMGR_START
::IF "%SELECT%"=="" SET "PROG_OPER=COMPACT"&&GOTO:IMAGEMGR_START
IF "%PROG_OPER%"=="VIEW" IF NOT DEFINED SELECT SET "PROG_OPER="&&GOTO:IMAGEMGR_START
IF "%PROG_OPER%"=="VIEW" IF NOT EXIST "%CACHE_FOLDER%\%SELECT%" GOTO:IMAGEMGR_START
IF "%PROG_OPER%"=="COMPACT" IF NOT DEFINED SELECT SET "PROG_OPER="&&GOTO:IMAGEMGR_START
IF "%PROG_OPER%"=="COMPACT" IF NOT EXIST "%IMAGE_FOLDER%\%SELECT%" GOTO:IMAGEMGR_START
IF "%PROG_OPER%"=="ISOMOUNT" IF NOT DEFINED SELECT SET "PROG_OPER="&&GOTO:IMAGEMGR_START
IF "%PROG_OPER%"=="ISOMOUNT" IF NOT EXIST "%IMAGE_FOLDER%\%SELECT%" GOTO:IMAGEMGR_START
IF "%PROG_OPER%"=="ISOUNMOUNT" CALL:PAD_LINE&&ECHO                    Remove which ISO Drive Letter?&&CALL:PAD_LINE&&CALL SET "PROMPT_SET=ISO_LETTER"&&CALL:PROMPT_SET
IF "%PROG_OPER%"=="ISOUNMOUNT" IF NOT DEFINED ISO_LETTER SET "PROG_OPER="&&GOTO:IMAGEMGR_START
IF "%PROG_OPER%"=="ISOUNMOUNT" (ECHO.select VOLUME %ISO_LETTER%&&ECHO.Remove letter=%ISO_LETTER% noerr&&ECHO.Exit)>"DPQUERY"&&DISKPART /s "DPQUERY"&&SET "PROG_OPER="&&ECHO Drive letter %ISO_LETTER% removed&&CALL:PAUSED&&GOTO:IMAGEMGR_START&&ECHO 
IF "%PROG_OPER%"=="ISOMOUNT" "%IMAGE_FOLDER%\%SELECT%"&&CALL:IMAGE_EXIST
IF "%PROG_OPER%"=="VHDXMOUNT" IF NOT DEFINED SELECT SET "PROG_OPER="&&GOTO:IMAGEMGR_START
IF "%PROG_OPER%"=="VHDXMOUNT" IF NOT EXIST "%IMAGE_FOLDER%\%SELECT%" GOTO:IMAGEMGR_START
IF "%PROG_OPER%"=="VHDXMOUNT" SET "VDISK=%IMAGE_FOLDER%\%SELECT%"&&CALL:PAD_LINE&&ECHO  Attaching [%IMAGE_FOLDER%\%SELECT%]&&CALL:PAD_LINE&&CALL:VDISK_ATTACH
IF "%PROG_OPER%"=="VHDXMOUNT" IF NOT EXIST "V:\" ECHO  Error mounting [%IMAGE_FOLDER%\%SELECT%]&&CALL:PAD_LINE&&CALL:VDISK_DETACH
IF "%PROG_OPER%"=="VIEW" START NOTEPAD "%CACHE_FOLDER%\%SELECT%"
IF "%PROG_OPER%"=="COMPACT" SET "VDISK=%IMAGE_FOLDER%\%SELECT%"&&CALL:VDISK_COMPACT&&CALL:PAUSED
IF "%PROG_OPER%"=="NEW" SET "PROMPT_SET=NEW_VDISK"&&ECHO.&&ECHO New VHDX name?&&CALL:PROMPT_SET_ANY
IF "%PROG_OPER%"=="NEW" SET "PROMPT_SET=VHDX_SIZE"&&ECHO.&&ECHO VHDX size?&&CALL:PROMPT_SET
IF "%PROG_OPER%"=="NEW" IF DEFINED NEW_VDISK SET "VDISK=%IMAGE_FOLDER%\%NEW_VDISK%.VHDX"&&SET VHDX_LABEL=%NEW_VDISK%
IF "%PROG_OPER%"=="NEW" IF DEFINED NEW_VDISK IF DEFINED VHDX_SIZE CALL:PAD_LINE&&ECHO  CREATING [%VDISK%]&&CALL:PAD_LINE&&CALL:VDISK_CREATE
IF "%PROG_OPER%"=="NEW" IF DEFINED NEW_VDISK IF DEFINED VHDX_SIZE CALL:VDISK_DETACH&&ECHO 
IF EXIST "DPQUERY" DEL /F "DPQUERY">NUL 2>&1
IF DEFINED PROG_OPER SET "PROG_OPER="
GOTO:IMAGEMGR_START
:IMAGEMGR_VHDX_BACKUP
IF "%VHDX_BACKUP%"=="COPY" SET "VHDX_BACKUP=ORIG"&&EXIT /B
IF "%VHDX_BACKUP%"=="ORIG" SET "VHDX_BACKUP=COPY"&&EXIT /B
EXIT /B
:LIST_LOL_CREATE
CLS&&CALL:PAD_LINE&&ECHO                         $haZZam^^! File Picker&&CALL:PAD_LINE&&SET "LIST_FMT=NUMERAL"&&SET "LIST_DIR=%CACHE_FOLDER%\*.LST"&&ECHO   AVAILABLE LST'S:&&CALL:FILE_LIST&&CALL:PAD_LINE&&ECHO           Enter File # To Build List, Multiples OK(1 2 3)&&CALL:PAD_LINE&&CALL:PAD_PREV&&CALL:MENU_SELECT
CALL:EXIT_FLAGGER
IF "%EXIT_FLAGGER%"=="1" EXIT /B
CALL:PAD_LINE&&ECHO                           Name of the List?&&CALL:PAD_LINE&&ECHO.&&SET "PROMPT_SET=NEW_NAME"&&CALL:PROMPT_SET_ANY
IF NOT DEFINED NEW_NAME EXIT /B
SET "TMP_NAME=%NEW_NAME%"&&SET "NEW_NAME=$TMP0"
IF EXIST "%CACHE_FOLDER%\$TMP0.LST" DEL /F "%CACHE_FOLDER%\$TMP0.LST">NUL 2>&1
IF "%LIST_CREATE%"=="LOL" ECHO LIST-OF-LISTS>"%CACHE_FOLDER%\%NEW_NAME%.LST"
IF "%LIST_CREATE%"=="SANDWICH" ECHO SANDWICH-LIST>"%CACHE_FOLDER%\%NEW_NAME%.LST"
IF "%LIST_CREATE%"=="SANDWICH" ECHO {#} - CREATED - [%DATE%] [%TIME%]>>"%CACHE_FOLDER%\%NEW_NAME%.LST"
CLS&&CALL:PAD_LINE&&ECHO                  The List Contains The Following Lists: &&CALL:PAD_LINE&&CALL:TITLECARD
IF "%LIST_CREATE%"=="LOL" SET "PARSE_CNT=0"&&FOR %%a in (%SELECT%) DO (CALL SET TEMPTARGET=%%TEMP_NAME%%a%%&&CALL:LIST_LOL_CREATE_OUTSIDE)
IF "%LIST_CREATE%"=="SANDWICH" SET "PARSE_CNT=0"&&FOR %%a in (%SELECT%) DO (CALL SET TEMPTARGET=%%TEMP_NAME%%a%%&&CALL:LIST_SANDWICH_CREATE_1)
IF EXIST "%CACHE_FOLDER%\%TMP_NAME%.LST" DEL /F "%CACHE_FOLDER%\%TMP_NAME%.LST">NUL 2>&1
IF EXIST "%CACHE_FOLDER%\$TMP0.LST" REN "%CACHE_FOLDER%\$TMP0.LST" "%TMP_NAME%.LST">NUL 2>&1
CALL:PAD_LINE&&ECHO                        End of List Creation&&CALL:PAD_LINE&&CALL:TITLECARD&&CALL:PAUSED
EXIT /B
:LIST_LOL_CREATE_OUTSIDE
IF NOT DEFINED TEMPTARGET EXIT /B
IF NOT EXIST "%CACHE_FOLDER%\%TEMPTARGET%" EXIT /B
SET "HEADER_TGT=%CACHE_FOLDER%\%TEMPTARGET%"&&CALL:HEADER_PARSE
IF "%FILE_HEADER%"=="LIST-OF-LISTS" ECHO  [%TEMPTARGET%] [ERROR]Cannot contain a Lists-of-Lists^^!&&EXIT /B
IF "%FILE_HEADER%"=="SANDWICH-LIST" ECHO  [%TEMPTARGET%] [ERROR]Cannot contain a Sandwich-List^^!&&EXIT /B
IF NOT DEFINED PARSE_OK ECHO The list header [%FILE_HEADER%] of [%TEMPTARGET%] is malformed&&EXIT /B
CALL ECHO  [%TEMPTARGET%] Added&&CALL ECHO {%TEMPTARGET%}>>"%CACHE_FOLDER%\%NEW_NAME%.LST"
EXIT /B
:LIST_SANDWICH_CREATE_1
IF NOT DEFINED TEMPTARGET EXIT /B
IF NOT EXIST "%CACHE_FOLDER%\%TEMPTARGET%" EXIT /B
SET "HEADER_TGT=%CACHE_FOLDER%\%TEMPTARGET%"&&CALL:HEADER_PARSE
SET "SANDWICH_LAYER="&&SET "COMMENT=- [LAYER CHANGE TRIGGER]"&&FOR /F "TOKENS=*" %%a in (%HEADER_TGT%) DO (CALL SET "SANDWICH_MEAT="&&IF NOT "%%a"=="" IF NOT "%%a"==" " IF NOT "%%a"=="  " CALL SET "SANDWICH_MEAT=%%a"&&CALL:LIST_SANDWICH_CREATE_2)
EXIT /B
:LIST_SANDWICH_CREATE_2
IF "%SANDWICH_MEAT%"=="LIST-OF-LISTS" CALL SET "SANDWICH_LAYER=%SANDWICH_MEAT%"&&ECHO  [%HEADER_TGT%] [ERROR]Cannot contain a Lists-of-Lists^^!&&EXIT /B
IF "%SANDWICH_MEAT%"=="SANDWICH-LIST" CALL SET "SANDWICH_LAYER=%SANDWICH_MEAT%"&&ECHO  [%HEADER_TGT%] [ERROR]Cannot contain a Sandwich-List^^!&&EXIT /B
IF "%SANDWICH_MEAT%"=="SERVICES-AUTO" CALL SET "SANDWICH_LAYER=%SANDWICH_MEAT%"&&CALL:SANDWICH_PAD&&CALL ECHO {%SANDWICH_MEAT%} %COMMENT%>>"%CACHE_FOLDER%\%NEW_NAME%.LST" 
IF "%SANDWICH_MEAT%"=="SERVICES-MANUAL" CALL SET "SANDWICH_LAYER=%SANDWICH_MEAT%"&&CALL:SANDWICH_PAD&&CALL ECHO {%SANDWICH_MEAT%} %COMMENT%>>"%CACHE_FOLDER%\%NEW_NAME%.LST"
IF "%SANDWICH_MEAT%"=="SERVICES-DISABLE" CALL SET "SANDWICH_LAYER=%SANDWICH_MEAT%"&&CALL:SANDWICH_PAD&&CALL ECHO {%SANDWICH_MEAT%} %COMMENT%>>"%CACHE_FOLDER%\%NEW_NAME%.LST"
IF "%SANDWICH_MEAT%"=="SERVICES-DELETE" CALL SET "SANDWICH_LAYER=%SANDWICH_MEAT%"&&CALL:SANDWICH_PAD&&CALL ECHO {%SANDWICH_MEAT%} %COMMENT%>>"%CACHE_FOLDER%\%NEW_NAME%.LST"
IF "%SANDWICH_MEAT%"=="TASKS-DELETE" CALL SET "SANDWICH_LAYER=%SANDWICH_MEAT%"&&CALL:SANDWICH_PAD&&CALL ECHO {%SANDWICH_MEAT%} %COMMENT%>>"%CACHE_FOLDER%\%NEW_NAME%.LST"
IF "%SANDWICH_MEAT%"=="FEATURES-DISABLE" CALL SET "SANDWICH_LAYER=%SANDWICH_MEAT%"&&CALL:SANDWICH_PAD&&CALL ECHO {%SANDWICH_MEAT%} %COMMENT%>>"%CACHE_FOLDER%\%NEW_NAME%.LST"
IF "%SANDWICH_MEAT%"=="FEATURES-ENABLE" CALL SET "SANDWICH_LAYER=%SANDWICH_MEAT%"&&CALL:SANDWICH_PAD&&CALL ECHO {%SANDWICH_MEAT%} %COMMENT%>>"%CACHE_FOLDER%\%NEW_NAME%.LST"
IF "%SANDWICH_MEAT%"=="APPX-DELETE" CALL SET "SANDWICH_LAYER=%SANDWICH_MEAT%"&&CALL:SANDWICH_PAD&&CALL ECHO {%SANDWICH_MEAT%} %COMMENT%>>"%CACHE_FOLDER%\%NEW_NAME%.LST"
IF "%SANDWICH_MEAT%"=="PACKAGES-DELETE" CALL SET "SANDWICH_LAYER=%SANDWICH_MEAT%"&&CALL:SANDWICH_PAD&&CALL ECHO {%SANDWICH_MEAT%} %COMMENT%>>"%CACHE_FOLDER%\%NEW_NAME%.LST"
IF "%SANDWICH_MEAT%"=="IMAGE-APPLY" CALL SET "SANDWICH_LAYER=%SANDWICH_MEAT%"&&CALL:SANDWICH_PAD&&CALL ECHO {%SANDWICH_MEAT%} %COMMENT%>>"%CACHE_FOLDER%\%NEW_NAME%.LST"
IF "%SANDWICH_MEAT%"=="SETUP-COMPLETE" CALL SET "SANDWICH_LAYER=%SANDWICH_MEAT%"&&CALL:SANDWICH_PAD&&CALL ECHO {%SANDWICH_MEAT%} %COMMENT%>>"%CACHE_FOLDER%\%NEW_NAME%.LST"
IF "%SANDWICH_MEAT%"=="RUN-ONCE" CALL SET "SANDWICH_LAYER=%SANDWICH_MEAT%"&&CALL:SANDWICH_PAD&&CALL ECHO {%SANDWICH_MEAT%} %COMMENT%>>"%CACHE_FOLDER%\%NEW_NAME%.LST"
IF NOT DEFINED SANDWICH_LAYER ECHO The item [%SANDWICH_MEAT%] of [%HEADER_TGT%] is missing a list header^^!&&EXIT /B
IF "%SANDWICH_MEAT%"=="%FILE_HEADER%" CALL ECHO  [%HEADER_TGT%] Added&&EXIT /B
IF "%SANDWICH_LAYER%"=="LIST-OF-LISTS" EXIT /B
IF "%SANDWICH_LAYER%"=="SANDWICH-LIST" EXIT /B
CALL ECHO %SANDWICH_MEAT%>>"%CACHE_FOLDER%\%NEW_NAME%.LST"
EXIT /B
:SANDWICH_PAD
ECHO.>>"%CACHE_FOLDER%\%NEW_NAME%.LST" 
EXIT /B
:IMAGEMGR_LIST_MAIN
CLS&&CALL:PAD_LINE&&SET "CORRUPT_FLAG="&&ECHO                         $haZZam^^! List Creator&&CALL:PAD_LINE&&ECHO.&&ECHO  [ C ]\[ImageApply[CAB]&&ECHO  [ M ]\[ImageApply[MSU]&&ECHO  [ I ]\[ImageApply[$PK]&&ECHO  [ S ]\[SetupComplete[$PK]&&ECHO  [ R ]\[RunOnce[$PK]&&ECHO.&&CALL:PAD_LINE&&ECHO  [ - ]\[List-of-Lists]&&ECHO  [ + ]\[Sandwich-List]&&CALL:PAD_LINE&&SET "LIST_INSERTA= [ * ]\[Create List-Base[MLB]"
SET "LIST_FMT=NUMERAL"&&SET "LIST_DIR=%CACHE_FOLDER%\*.MLB"&&CALL:FILE_LIST&&CALL:PAD_LINE&&ECHO                    Select a {#} To Start a New List&&CALL:PAD_LINE&&CALL:PAD_PREV&&CALL:MENU_SELECT
IF "%SELECT%"=="*" SET "LIST_CREATE=LIST-BASE"&&CALL:LIST_BASE_CREATE
IF "%SELECT%"=="-" SET "LIST_CREATE=LOL"&&CALL:LIST_LOL_CREATE
IF "%SELECT%"=="+" SET "LIST_CREATE=SANDWICH"&&CALL:LIST_LOL_CREATE
IF "%SELECT%"=="C" SET "LIST_CREATE=IMAGE-APPLY"&&SET "PACK_TYPE=CAB"&&CALL:LIST_PACK_CREATE
IF "%SELECT%"=="M" SET "LIST_CREATE=IMAGE-APPLY"&&SET "PACK_TYPE=MSU"&&CALL:LIST_PACK_CREATE
IF "%SELECT%"=="I" SET "LIST_CREATE=IMAGE-APPLY"&&SET "PACK_TYPE=$PK"&&CALL:LIST_PACK_CREATE
IF "%SELECT%"=="S" SET "LIST_CREATE=SETUP-COMPLETE"&&SET "PACK_TYPE=$PK"&&CALL:LIST_PACK_CREATE
IF "%SELECT%"=="R" SET "LIST_CREATE=RUN-ONCE"&&SET "PACK_TYPE=$PK"&&CALL:LIST_PACK_CREATE
IF DEFINED LIST_CREATE EXIT /B
IF NOT EXIST "%CACHE_FOLDER%\%SELECT%" CALL:FILE_LIST >NUL
CALL:EXIT_FLAGGER
IF "%EXIT_FLAGGER%"=="1" EXIT /B
IF NOT EXIST "%CACHE_FOLDER%\%SELECT%" EXIT /B
IF EXIST "%CACHE_FOLDER%\%SELECT%" SET "MLB_NAME=%CACHE_FOLDER%\%SELECT%"
SET "MLB=%CACHE_FOLDER%\MLB"
IF EXIST "%MLB%" RD /Q /S "\\?\%MLB%">NUL 2>&1
MD "%MLB%">NUL 2>&1
DISM /APPLY-IMAGE /IMAGEFILE:"%MLB_NAME%" /INDEX:1 /APPLYDIR:"%MLB%">NUL 2>&1
IF NOT EXIST "%MLB%\*.MST" ECHO 1[%SELECT%] IS CORRUPT&&SET "CORRUPT_FLAG=1"&&RD /Q /S "\\?\%MLB%">NUL 2>&1
IF DEFINED CORRUPT_FLAG CALL:PAUSED&EXIT /B
CLS&&CALL:PAD_LINE&&ECHO                         $haZZam^^! List Creator&&CALL:PAD_LINE&&SET "LIST_FMT=NUMERAL"&&SET "LIST_DIR=%MLB%\*.MST"&&CALL:FILE_LIST&&CALL:PAD_LINE&&ECHO                    Select a {#} To Start a New List&&CALL:PAD_LINE&&CALL:PAD_PREV&&CALL:MENU_SELECT
IF NOT EXIST "%MLB%\%SELECT%" CALL:FILE_LIST >NUL
CALL:EXIT_FLAGGER
IF "%EXIT_FLAGGER%"=="1" EXIT /B
IF NOT EXIST "%MLB%\%SELECT%" EXIT /B
IF EXIST "%MLB%\%SELECT%" SET "MAST_NAME=%SELECT%"&&CALL:IMAGEMGR_LIST_CREATE
IF EXIST "%MLB%" RD /Q /S "\\?\%MLB%">NUL 2>&1
CALL:PAUSED
EXIT /B
:LIST_BASE_CREATE
CLS&&CALL:PAD_LINE&&ECHO                         $haZZam^^! File Picker&&CALL:PAD_LINE&&SET "LIST_FMT=NUMERAL"&&SET "LIST_DIR=%IMAGE_FOLDER%\*.VHDX"&&SET "LIST_INSERTA= [ @ ]\[Current-Environment]"
ECHO   AVAILABLE VHDX'S:&&CALL:FILE_LIST&&CALL:PAD_LINE&&ECHO                 Enter # To Use As Source For List-Base&&CALL:PAD_LINE&&CALL:PAD_PREV&&CALL:MENU_SELECT
IF "%SELECT%"=="@" IF NOT DEFINED DISCLAIMER CALL:DISCLAIMER&&GOTO:LIST_BASE_CREATE
CALL:EXIT_FLAGGER
IF "%EXIT_FLAGGER%"=="1" EXIT /B
CALL:PAD_LINE&&ECHO                         Name of the list-base?&&CALL:PAD_LINE&&ECHO.&&SET "PROMPT_SET=NEW_NAME"&&CALL:PROMPT_SET_ANY
IF NOT DEFINED NEW_NAME EXIT /B
IF "%SELECT%"=="@" SET "LIVE_APPLY=1"&&GOTO:LIVE_APPLY_BASE_SKIP
IF NOT EXIST "%IMAGE_FOLDER%\%SELECT%" CALL:FILE_LIST >NUL
CALL:EXIT_FLAGGER
IF "%EXIT_FLAGGER%"=="1" EXIT /B
IF NOT EXIST "%IMAGE_FOLDER%\%SELECT%" EXIT /B
IF EXIST "V:\" SET "ERR_MSG=Drive letter V:\ can NOT be in use. Unmount the Vdisk in use."&&GOTO:LIST_BASE_CLEANUP
SET "VDISK=%IMAGE_FOLDER%\%SELECT%"&&CALL:VDISK_ATTACH
IF NOT EXIST "V:\Windows" SET "ERR_MSG=Virtual Disk Error. If VHDX refuses mounting, reboot and try again."&&CALL:VDISK_DETACH&&GOTO:LIST_BASE_CLEANUP
:LIVE_APPLY_BASE_SKIP
CLS&&SET "MLB=%CACHE_FOLDER%\MLB"&&SET "BASEPRE="&&SET "BASEPRELST="&&CALL:PAD_LINE&&ECHO                        Extracting .MLB List-Base....&&CALL:PAD_LINE&&CALL:TITLECARD
IF EXIST "%MLB%" RD /Q /S "\\?\%MLB%">NUL 2>&1
MD "%MLB%">NUL 2>&1
ECHO.APPX-MASTER>"%MLB%\AppX.MST"
ECHO.FEATURES-MASTER>"%MLB%\Features.MST"
ECHO.PACKAGES-MASTER>"%MLB%\Components.MST"
ECHO.SERVICES-MASTER>"%MLB%\Services.MST"
ECHO.TASKS-MASTER>"%MLB%\Tasks.MST"
CALL:IF_LIVE2
DISM /%APPLY_TARGET% /GET-CURRENTEDITION>"$INFO.TXT"
SET "INFO_E="&&SET "INFO_V="&&FOR /F "TOKENS=1-9 DELIMS=: " %%a in ($INFO.TXT) DO (
IF "%%a %%b"=="Image Version" CALL SET "INFO_V=%%c"
IF "%%a %%b"=="Current Edition" IF NOT "%%c"=="is" CALL SET "INFO_E=%%c")
CALL:PAD_LINE&&ECHO Version[%INFO_V%] Edition[%INFO_E%]&&ECHO %INFO_V% %INFO_E% >"%MLB%\%INFO_V% %INFO_E%"
ECHO Version[%INFO_V%] Edition[%INFO_E%]>"%MLB%\PLAIN.TXT"
CALL:PAD_LINE&&ECHO Getting appx listing..&&DEL /F "$INFO.TXT">NUL 2>&1
SET "INFO_E="&&SET "INFO_V="&&ECHO {APPX-MASTER}>>"%MLB%\PLAIN.TXT"
SET "BASETMP=AppX"&&DISM /%APPLY_TARGET% /GET-Provisionedappxpackages>"$LST"
FOR /F "TOKENS=1-9 DELIMS=:_ " %%a in ($LST) DO (IF "%%a"=="PackageName" CALL SET "BASECAP=%%b"&&CALL:BASECAP)
ECHO [%BASETMP% DONE]&&CALL:PAD_LINE&&ECHO Getting feature listing..
ECHO {FEATURES-MASTER}>>"%MLB%\PLAIN.TXT"
SET "BASETMP=Features"&&DISM /%APPLY_TARGET% /GET-FEATURES>"$LST"
FOR /F "TOKENS=1-9 DELIMS=: " %%a in ($LST) DO (IF "%%a %%b"=="Feature Name" CALL SET "BASECAP=%%c%%d%%e%%f%%g%%h%%i"&&CALL:BASECAP)
ECHO [%BASETMP% DONE]&&CALL:PAD_LINE&&ECHO Getting component listing....&&CALL:IF_LIVE1
ECHO {PACKAGES-MASTER}>>"%MLB%\PLAIN.TXT"
REG QUERY "%HIVE_SOFTWARE%\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages" /f Visibility /c /e /s>"$REG2"
FOR /F "TOKENS=1-9 DELIMS= " %%a in ($REG2) DO (IF "%%b"=="Based" REG ADD "%%a %%b %%c" /V "Visibility" /T REG_DWORD /D "1" /F>NUL 2>&1)
CALL:IF_LIVE2
SET "BASETMP=Components"&&DISM /%APPLY_TARGET% /GET-PACKAGES>"$LST"
FOR /F "TOKENS=1-9 DELIMS= " %%a in ($REG2) DO (IF "%%b"=="Based" REG ADD "%%a %%b %%c" /V "Visibility" /T REG_DWORD /D "2" /F>NUL 2>&1)
FOR /F "TOKENS=1-9 DELIMS=:~ " %%a in ($LST) DO (IF "%%a %%b"=="Package Identity" CALL SET "BASECAP=%%c"&&CALL SET "BASEPRE=%%c"&&CALL:NULL&&CALL:BASECAP)
ECHO [%BASETMP% DONE]&&CALL:PAD_LINE&&ECHO Getting service listing..&&CALL:IF_LIVE1
ECHO {SERVICES-MASTER}>>"%MLB%\PLAIN.TXT"
SET "BASETMP=Services"&&REG QUERY "%HIVE_SYSTEM%\ControlSet001\Services" /f Type /c /e /s>"$LST"
FOR /F "TOKENS=1-9 DELIMS=\ " %%a in ($LST) DO (IF "%%a"=="HKEY_LOCAL_MACHINE" IF NOT "%%e"=="" CALL SET "BASECAP=%%e%%f%%g%%h%%i"
IF "%%a"=="Type" IF "%%c"=="0x10" CALL:BASECAP
IF "%%a"=="Type" IF "%%c"=="0x20" CALL:BASECAP
IF "%%a"=="Type" IF "%%c"=="0x60" CALL:BASECAP)
ECHO [%BASETMP% DONE]&&CALL:PAD_LINE&&ECHO Getting task listing..
ECHO {TASKS-MASTER}>>"%MLB%\PLAIN.TXT"
SET "BASETMP=Tasks"&&REG QUERY "%HIVE_SOFTWARE%\Microsoft\Windows NT\CurrentVersion\Schedule\TaskCache\Tasks" /f Path /c /e /s>"$LST"
FOR /F "TOKENS=1* DELIMS=\" %%a in ($LST) DO (IF "%%a"=="    Path    REG_SZ    " CALL SET "BASECAP=%%b"&&CALL:BASECAP)
DISM /CAPTURE-IMAGE /CAPTUREDIR:"%MLB%" /IMAGEFILE:"%CACHE_FOLDER%\%NEW_NAME%.MLB" /COMPRESS:FAST /NAME:"%NEW_NAME%" /CheckIntegrity /Verify>NUL 2>&1
ECHO [%BASETMP% DONE]&&RD /Q /S "\\?\%MLB%">NUL 2>&1
CALL:MOUNT_INT&&CALL:VDISK_DETACH&&CALL:TITLECARD
:LIST_BASE_CLEANUP
IF NOT DEFINED LIVE_APPLY CALL:SCRATCHDIR_DELETE
DEL /F $REG* >NUL 2>&1
IF DEFINED ERR_MSG ECHO %ERR_MSG%
CALL:PAD_LINE&&ECHO                         End of List-Base Creation&&CALL:PAD_LINE&&CALL:TITLECARD
DEL /F "$LST">NUL 2>&1
CALL:PAUSED
EXIT /B
:BASECAP
IF "%BASEPRELST%"=="%BASEPRE%" IF "%BASETMP%"=="Components" EXIT /B
CALL SET "BASEPRELST=%BASEPRE%"&&FOR %%G in (A B C D E F G H I J K L M N O P Q R S T U V W X Y Z) DO (CALL SET "BASECAP=%%BASECAP:%%G=%%G%%")
CALL ECHO %BASECAP%&&CALL ECHO {%BASECAP%}>>"%MLB%\%BASETMP%.MST"
CALL ECHO %BASECAP%>>"%MLB%\PLAIN.TXT"
EXIT /B
:NULL
EXIT /B
:IF_LIVE1
IF DEFINED LIVE_APPLY CALL:MOUNT_INT
IF NOT DEFINED LIVE_APPLY CALL:MOUNT_EXT
EXIT /B
:IF_LIVE2
IF DEFINED LIVE_APPLY CALL:MOUNT_INT
IF NOT DEFINED LIVE_APPLY CALL:MOUNT_MIX
EXIT /B
:IMAGEMGR_LIST_CREATE
SET "HEADER_TGT=%MLB%\%MAST_NAME%"&&CALL:HEADER_PARSE
IF NOT DEFINED PARSE_OK ECHO The List-Base header [%FILE_HEADER%] of [%HEADER_TGT%] is malformed&&PAUSE&&EXIT /B
CLS&&CALL:PAD_LINE
IF "%BASE_TYPE%"=="APPX" ECHO                          Which type of list?&&CALL:PAD_LINE&&ECHO  {1}Delete AppX Package&&SET "PROMPT_SET=BAT_SELECT"&&CALL:PROMPT_SET
IF "%BASE_TYPE%"=="SERVICES" ECHO                          Which type of list?&&CALL:PAD_LINE&&ECHO  {1}Service-Start Auto&&ECHO  {2}Service-Start Manual&&ECHO  {3}Disable Service&&ECHO  {4}Delete Service&&SET "PROMPT_SET=BAT_SELECT"&&CALL:PROMPT_SET
IF "%BASE_TYPE%"=="TASKS" ECHO                          Which type of list?&&CALL:PAD_LINE&&ECHO  {1}Delete Task&&SET "PROMPT_SET=BAT_SELECT"&&CALL:PROMPT_SET
IF "%BASE_TYPE%"=="FEATURES" ECHO                          Which type of list?&&CALL:PAD_LINE&&ECHO  {1}Enable %BASE_TYPE%&&ECHO  {2}Disable %BASE_TYPE%&&SET "PROMPT_SET=BAT_SELECT"&&CALL:PROMPT_SET
IF "%BASE_TYPE%"=="PACKAGES" ECHO                          Which type of list?&&CALL:PAD_LINE&&ECHO  {1}Delete %BASE_TYPE%&&SET "PROMPT_SET=BAT_SELECT"&&CALL:PROMPT_SET
IF NOT DEFINED BAT_SELECT EXIT /B
SET "FILE_HEADER="
IF "%BASE_TYPE%"=="APPX" IF "%BAT_SELECT%"=="1" SET "FILE_HEADER=APPX-DELETE"
IF "%BASE_TYPE%"=="FEATURES" IF "%BAT_SELECT%"=="1" SET "FILE_HEADER=FEATURES-ENABLE"
IF "%BASE_TYPE%"=="FEATURES" IF "%BAT_SELECT%"=="2" SET "FILE_HEADER=FEATURES-DISABLE"
IF "%BASE_TYPE%"=="PACKAGES" IF "%BAT_SELECT%"=="1" SET "FILE_HEADER=PACKAGES-DELETE"
IF "%BASE_TYPE%"=="SERVICES" IF "%BAT_SELECT%"=="1" SET "FILE_HEADER=SERVICES-AUTO"
IF "%BASE_TYPE%"=="SERVICES" IF "%BAT_SELECT%"=="2" SET "FILE_HEADER=SERVICES-MANUAL"
IF "%BASE_TYPE%"=="SERVICES" IF "%BAT_SELECT%"=="3" SET "FILE_HEADER=SERVICES-DISABLE"
IF "%BASE_TYPE%"=="SERVICES" IF "%BAT_SELECT%"=="4" SET "FILE_HEADER=SERVICES-DELETE"
::IF "%BASE_TYPE%"=="TASKS" IF "%BAT_SELECT%"=="1" SET "FILE_HEADER=TASKS-ENABLE"
::IF "%BASE_TYPE%"=="TASKS" IF "%BAT_SELECT%"=="2" SET "FILE_HEADER=TASKS-DISABLE"
IF "%BASE_TYPE%"=="TASKS" IF "%BAT_SELECT%"=="1" SET "FILE_HEADER=TASKS-DELETE"
IF NOT DEFINED FILE_HEADER EXIT /B
CALL:PAD_LINE&&ECHO                           Name of the List?&&CALL:PAD_LINE&&ECHO.&&SET "PROMPT_SET=LIST_NAME"&&CALL:PROMPT_SET_ANY
IF NOT DEFINED LIST_NAME EXIT /B
CALL:PAD_LINE&&ECHO                     %FILE_HEADER% List Creation&&CALL:PAD_LINE&&CALL:TITLECARD
SET "PackType=SCRIPTED"&&SET "PackName=%FILE_HEADER%"&&SET "PackDesc=%FILE_HEADER%"
COPY /Y "%MLB%\%MAST_NAME%" "$LST">NUL 2>&1
IF "%BASE_TYPE%"=="APPX" SET "PARSE_CNT="&&FOR /F "TOKENS=1-9 SKIP=1 DELIMS={}" %%a in ($LST) DO (CALL SET "%BASE_TYPE%_NAME=%%a"&&CALL:PARSE_QUERY)
IF "%BASE_TYPE%"=="FEATURES" SET "PARSE_CNT="&&FOR /F "TOKENS=1-9 SKIP=1 DELIMS={}" %%a in ($LST) DO (CALL SET "%BASE_TYPE%_NAME=%%a"&&CALL:PARSE_QUERY)
IF "%BASE_TYPE%"=="PACKAGES" SET "PARSE_CNT="&&FOR /F "TOKENS=1-9 SKIP=1 DELIMS={}" %%a in ($LST) DO (CALL SET "%BASE_TYPE%_NAME=%%a"&&CALL:PARSE_QUERY)
IF "%BASE_TYPE%"=="SERVICES" SET "PARSE_CNT="&&FOR /F "TOKENS=1-9 SKIP=1 DELIMS={}" %%a in ($LST) DO (CALL SET "%BASE_TYPE%_NAME=%%a"&&CALL:PARSE_QUERY)
IF "%BASE_TYPE%"=="TASKS" SET "PARSE_CNT="&&FOR /F "TOKENS=1-9 SKIP=1 DELIMS={}" %%a in ($LST) DO (CALL SET "%BASE_TYPE%_NAME=%%a"&&CALL:PARSE_QUERY)
DEL /F "$LST">NUL 2>&1
CALL:PAD_LINE&&ECHO                    Which %BASE_TYPE%? Multiples OK(1 2 3)&&CALL:PAD_LINE&&CALL:TITLECARD
ECHO.&&CALL:MENU_SELECT
CLS&&CALL:PAD_LINE&&ECHO                     The Following %BASE_TYPE% Were Added: &&CALL:PAD_LINE&&CALL:TITLECARD
ECHO %FILE_HEADER%>"%CACHE_FOLDER%\%LIST_NAME%.LST"
SET "PARSE_CNT="&&FOR %%a in (%SELECT%) DO (CALL SET "PARSE_CLEAN=%%%BASE_TYPE%_%%a%%"&&CALL:PARSE_CLEAN_LIST_CREATE)
SET "BASE_TYPE="
CALL:PAD_LINE&&ECHO                          End of List Creation&&CALL:PAD_LINE&&CALL:TITLECARD
EXIT /B
:PARSE_CLEAN_LIST_CREATE
IF NOT "%PARSE_CLEAN%"=="" CALL ECHO  {%PARSE_CLEAN%}&&CALL ECHO {%PARSE_CLEAN%}>>"%CACHE_FOLDER%\%LIST_NAME%.LST"
EXIT /B
:PARSE_QUERY
CALL SET /A PARSE_CNT+=1
CALL ECHO  {%PARSE_CNT%} %%%BASE_TYPE%_NAME%%&&CALL SET "%BASE_TYPE%_%PARSE_CNT%=%%%BASE_TYPE%_NAME%%"
EXIT /B
:LIST_PACK_CREATE
CLS&&CALL:PAD_LINE&&ECHO                         $haZZam^^! File Picker&&SET "LIST_FMT=PLAIN"&&CALL:FILE_LIST>NUL
CALL:PAD_LINE&&SET "LIST_FMT=NUMERAL"&&SET "LIST_DIR=%PACK_FOLDER%\*.%PACK_TYPE%"&&ECHO   AVAILABLE %PACK_TYPE%'S:&&CALL:FILE_LIST&&CALL:PAD_LINE&&ECHO           Enter File # To Build List, Multiples OK(1 2 3)&&CALL:PAD_LINE&&CALL:PAD_PREV&&CALL:MENU_SELECT
CALL:EXIT_FLAGGER
IF "%EXIT_FLAGGER%"=="1" EXIT /B
CALL:PAD_LINE&&ECHO                           Name of the List?&&CALL:PAD_LINE&&ECHO.&&SET "PROMPT_SET=NEW_NAME"&&CALL:PROMPT_SET_ANY
IF NOT DEFINED NEW_NAME SET "PROG_OPER="&&EXIT /B
IF "%LIST_CREATE%"=="IMAGE-APPLY" ECHO %LIST_CREATE%>"%CACHE_FOLDER%\%NEW_NAME%.LST"
IF "%LIST_CREATE%"=="RUN-ONCE" ECHO %LIST_CREATE%>"%CACHE_FOLDER%\%NEW_NAME%.LST"
IF "%LIST_CREATE%"=="SETUP-COMPLETE" ECHO %LIST_CREATE%>"%CACHE_FOLDER%\%NEW_NAME%.LST"
IF "%SELECT%"=="" DEL /F "%CACHE_FOLDER%\%NEW_NAME%.LST">NUL 2>&1
CLS&&CALL:PAD_LINE&&ECHO               The List Contains The Following Packages: &&CALL:PAD_LINE&&CALL:TITLECARD
SET "PARSE_CNT=0"&&FOR %%a in (%SELECT%) DO (CALL SET "TEMPTARGET=%%TEMP_NAME%%a%%"&&CALL:LIST_PACK_CREATE_OUTSIDE)
CALL:PAD_LINE&&ECHO                       *End of List Creation*&&CALL:PAD_LINE&&CALL:TITLECARD&&CALL:PAUSED
EXIT /B
:LIST_PACK_CREATE_OUTSIDE
IF DEFINED TEMPTARGET CALL ECHO   {%TEMPTARGET%}&&CALL ECHO {%TEMPTARGET%}>>"%CACHE_FOLDER%\%NEW_NAME%.LST"
EXIT /B
:HEADER_PARSE
IF DEFINED LOL_PARSE SET /P FILE_HEADER=<"%HEADER_TGT_LOL%"
IF NOT DEFINED LOL_PARSE SET /P FILE_HEADER=<"%HEADER_TGT%"
SET "PARSE_OK="&&FOR %%1 in (LIST-OF-LISTS SANDWICH-LIST APPX-MASTER FEATURES-MASTER PACKAGES-MASTER SERVICES-MASTER TASKS-MASTER APPX-DELETE FEATURES-ENABLE FEATURES-DISABLE PACKAGES-DELETE SERVICES-AUTO SERVICES-MANUAL SERVICES-DISABLE SERVICES-DELETE TASKS-DELETE IMAGE-APPLY SETUP-COMPLETE RUN-ONCE) DO (IF "%%1"=="%FILE_HEADER%" CALL SET "PARSE_OK=1")
IF "%FILE_HEADER%"=="FEATURES-MASTER" SET "BASE_TYPE=FEATURES"
IF "%FILE_HEADER%"=="PACKAGES-MASTER" SET "BASE_TYPE=PACKAGES"
IF "%FILE_HEADER%"=="SERVICES-MASTER" SET "BASE_TYPE=SERVICES"
IF "%FILE_HEADER%"=="TASKS-MASTER" SET "BASE_TYPE=TASKS"
IF "%FILE_HEADER%"=="APPX-MASTER" SET "BASE_TYPE=APPX"
EXIT /B
:IMAGEMGR_RUN_LIST
CLS&&CALL:PAD_LINE&&ECHO                         $haZZam^^! File Picker&&CALL:PAD_LINE&&SET "LIST_FMT=NUMERAL"&&SET "LIST_DIR=%CACHE_FOLDER%\*.LST"&&ECHO   AVAILABLE LST'S:&&CALL:FILE_LIST
IF NOT DEFINED VHDX_BACKUP SET "VHDX_BACKUP=ORIG"
CALL:PAD_LINE&&ECHO                     Enter File # To Select A List&&CALL:PAD_LINE&&CALL:PAD_PREV&&CALL:MENU_SELECT
IF NOT EXIST "%CACHE_FOLDER%\%SELECT%" CALL:FILE_LIST >NUL
CALL:EXIT_FLAGGER
IF "%EXIT_FLAGGER%"=="1" EXIT /B
IF NOT EXIST "%CACHE_FOLDER%\%SELECT%" EXIT /B
SET "HEADER_TGT=%CACHE_FOLDER%\%SELECT%"&&SET "HEADER_TGT_LOL=%CACHE_FOLDER%\%SELECT%"&&SET /P FILE_HEADER=<"%CACHE_FOLDER%\%SELECT%"
IF "%FILE_HEADER%"=="LIST-OF-LISTS" SET "LOL_PARSE=1"
IF "%FILE_HEADER%"=="SANDWICH-LIST" SET "SANDWICH_PARSE=1"
CALL:HEADER_PARSE>NUL 2>&1
IF NOT DEFINED PARSE_OK SET "ERR_MSG=Bad file-header, check file"&&GOTO:THE_ACTION_CLEANUP
CLS&&CALL:PAD_LINE&&ECHO                         $haZZam^^! File Picker&&CALL:PAD_LINE
SET "LIST_FMT=NUMERAL"&&SET "LIST_DIR=%IMAGE_FOLDER%\*.VHDX"&&SET "LIST_INSERTA= [ @ ]\[Current-Environment]"&&ECHO   AVAILABLE VHDX'S:&&CALL:FILE_LIST&&CALL:PAD_LINE&&ECHO                      Enter File # To Select Target&&CALL:PAD_LINE&&CALL:PAD_PREV&&CALL:MENU_SELECT
CLS&&CALL:PAD_LINE&&ECHO                            Image-Management&&CALL:PAD_LINE
IF "%SELECT%"=="@" IF NOT DEFINED DISCLAIMER CALL:DISCLAIMER&&GOTO:IMAGEMGR_RUN_LIST
IF "%SELECT%"=="@" SET "LIVE_APPLY=1"&&GOTO:THE_ACTION
IF NOT EXIST "%IMAGE_FOLDER%\%SELECT%" CALL:FILE_LIST >NUL
CALL:EXIT_FLAGGER
IF "%EXIT_FLAGGER%"=="1" EXIT /B
IF EXIST "V:\" SET "ERR_MSG=Drive letter V:\ can NOT be in use. Unmount the Vdisk in use."&&GOTO:THE_ACTION_CLEANUP
IF "%VHDX_BACKUP%"=="COPY" ECHO.&&ECHO Copying %IMAGE_FOLDER%\Copy_%SELECT% ...&&COPY /Y "%IMAGE_FOLDER%\%SELECT%" "%IMAGE_FOLDER%\Copy_%SELECT%"&&SET "SELECT=Copy_%SELECT%"&&ECHO.
SET "VDISK=%IMAGE_FOLDER%\%SELECT%"&&CALL:VDISK_ATTACH
IF NOT EXIST "V:\Windows" SET "ERR_MSG=Virtual Disk Error. If VHDX refuses mounting, reboot and try again."&&CALL:VDISK_DETACH&&GOTO:THE_ACTION_CLEANUP
:THE_ACTION
IF DEFINED SANDWICH_PARSE CALL:SANDWICH_RUNNER
IF DEFINED LOL_PARSE CALL:LOL_RUNNER
IF NOT DEFINED SANDWICH_PARSE IF NOT DEFINED LOL_PARSE CALL:IMAGEMGR_LIST_OPER
CALL:MOUNT_INT
IF NOT DEFINED LIVE_APPLY CALL:VDISK_DETACH
:THE_ACTION_CLEANUP
IF NOT DEFINED LIVE_APPLY CALL:SCRATCHDIR_DELETE
IF DEFINED ERR_MSG ECHO %ERR_MSG%
CALL:PAD_LINE&&ECHO                      Imaging operations complete&&CALL:PAD_LINE&&CALL:TITLECARD
CALL:PAUSED
EXIT /B
:LOL_RUNNER
FOR /F "TOKENS=1 SKIP=1 DELIMS={}" %%a in (%HEADER_TGT%) DO (CALL SET "HEADER_TGT_LOL=%CACHE_FOLDER%\%%a"&&CALL:HEADER_PARSE&&CALL:IMAGEMGR_LIST_OPER)
EXIT /B
:SANDWICH_RUNNER
CALL SET "SANDWICH_LAYER="&&FOR /F "TOKENS=1 SKIP=1 DELIMS={}" %%a in (%HEADER_TGT%) DO (
CALL SET "SANDWICH_MEAT="&&IF NOT "%%a"=="" IF NOT "%%a"==" " IF NOT "%%a"=="  " IF NOT "%%a"=="#" CALL SET "SANDWICH_MEAT=%%a"
FOR %%1 in (APPX-DELETE FEATURES-ENABLE FEATURES-DISABLE PACKAGES-DELETE SERVICES-AUTO SERVICES-MANUAL SERVICES-DISABLE SERVICES-DELETE TASKS-DELETE IMAGE-APPLY SETUP-COMPLETE RUN-ONCE) DO (IF "%%1"=="%%a" CALL SET "SANDWICH_LAYER=%%1")
IF NOT "%%a"=="" IF NOT "%%a"==" " IF NOT "%%a"=="  " IF NOT "%%a"=="#" CALL:SANDWICH_LIST_OPER)
IF EXIST "%PROG_SOURCE%\ScratchPack" DISM /cleanup-MountPoints>NUL 2>&1
IF EXIST "%PROG_SOURCE%\ScratchPack" ATTRIB -R -S -H "%PROG_SOURCE%\ScratchPack" /S /D /L>NUL 2>&1
IF EXIST "%PROG_SOURCE%\ScratchPack" RD /S /Q "\\?\%PROG_SOURCE%\ScratchPack">NUL 2>&1
ECHO [%SANDWICH_LAYER% END] [%DATE%] [%TIME%]&&SET "SANDWICH_MEAT="
EXIT /B
:SANDWICH_LIST_OPER
IF NOT DEFINED SANDWICH_MEAT EXIT /B
IF NOT DEFINED SANDWICH_LAYER EXIT /B
SET "ENDQ=End of search"&&CALL:IF_LIVE1
IF "%SANDWICH_MEAT%"=="SETUP-COMPLETE" CALL:SETUPCOMPLETE_CREATE
IF "%SANDWICH_MEAT%"=="RUN-ONCE" CALL:RUNONCE_CREATE
IF "%SANDWICH_MEAT%"=="%SANDWICH_LAYER%" CALL:PAD_LINE&&ECHO [%SANDWICH_LAYER% START] [%DATE%] [%TIME%]&&CALL:PAD_LINE&&CALL:COLOR_CHK&&EXIT /B
IF "%SANDWICH_LAYER%"=="IMAGE-APPLY" CALL SET "IMAGEFILE_PACK=%PACK_FOLDER%\%SANDWICH_MEAT%"&&CALL:PACK_INSTALL
IF "%SANDWICH_LAYER%"=="RUN-ONCE" IF EXIST "%PACK_FOLDER%\%SANDWICH_MEAT%" ECHO Copying Package [%SANDWICH_MEAT%] for RunOnce...&&CALL:PAD_LINE&&ECHO {%SANDWICH_MEAT%}>>"%APPLYDIR_MASTER%\$\RUNONCE.LST"&&CALL:PAD_LINE
IF "%SANDWICH_LAYER%"=="RUN-ONCE" IF EXIST "%PACK_FOLDER%\%SANDWICH_MEAT%" COPY /Y "%PACK_FOLDER%\%SANDWICH_MEAT%" "%APPLYDIR_MASTER%\$">NUL
IF "%SANDWICH_LAYER%"=="SETUP-COMPLETE" IF EXIST "%PACK_FOLDER%\%SANDWICH_MEAT%" ECHO Copying Package [%SANDWICH_MEAT%] for SetupComplete...&&CALL:PAD_LINE&&ECHO {%SANDWICH_MEAT%}>>"%APPLYDIR_MASTER%\$\SETUPCOMPLETE.LST"
IF "%SANDWICH_LAYER%"=="SETUP-COMPLETE" IF EXIST "%PACK_FOLDER%\%SANDWICH_MEAT%" COPY /Y "%PACK_FOLDER%\%SANDWICH_MEAT%" "%APPLYDIR_MASTER%\$">NUL
IF "%SANDWICH_LAYER%"=="SERVICES-AUTO" ECHO Changing Start to Auto for Service [%SANDWICH_MEAT%] ...&&CALL:PAD_LINE&&REG ADD "%HIVE_SYSTEM%\ControlSet001\Services\%SANDWICH_MEAT%" /V "Start" /T REG_DWORD /D "2" /F
IF "%SANDWICH_LAYER%"=="SERVICES-MANUAL" ECHO Changing Start to Manual for Service [%SANDWICH_MEAT%] ...&&CALL:PAD_LINE&&REG ADD "%HIVE_SYSTEM%\ControlSet001\Services\%SANDWICH_MEAT%" /V "Start" /T REG_DWORD /D "3" /F
IF "%SANDWICH_LAYER%"=="SERVICES-DISABLE" ECHO Disabling Service [%SANDWICH_MEAT%] ...&&CALL:PAD_LINE&&REG ADD "%HIVE_SYSTEM%\ControlSet001\Services\%SANDWICH_MEAT%" /V "Start" /T REG_DWORD /D "4" /F
IF "%SANDWICH_LAYER%"=="SERVICES-DELETE" ECHO Deleting Service [%SANDWICH_MEAT%] ...&&CALL:PAD_LINE&&REG DELETE "%HIVE_SYSTEM%\ControlSet001\Services\%SANDWICH_MEAT%" /F&&CALL:PAD_LINE&&REG ADD "%HIVE_SYSTEM%\ControlSet001\Services\%SANDWICH_MEAT%" /V "ImagePath" /T REG_EXPAND_SZ /D "NUL" /F>NUL 2>&1
IF "%SANDWICH_LAYER%"=="TASKS-DELETE" REG QUERY "%HIVE_SOFTWARE%\Microsoft\Windows NT\CurrentVersion\Schedule\TaskCache\Tree\%SANDWICH_MEAT%" /F Id /c /e /s>$REG1  2>&1
IF "%SANDWICH_LAYER%"=="TASKS-DELETE" FOR /F "TOKENS=1-9 DELIMS={}" %%a in ($REG1) DO (IF "%%a"=="    Id    REG_SZ    " REG DELETE "%HIVE_SOFTWARE%\Microsoft\Windows NT\CurrentVersion\Schedule\TaskCache\Tasks\{%%b}" /F >NUL 2>&1)
IF "%SANDWICH_LAYER%"=="TASKS-DELETE" ECHO Deleting Task [%SANDWICH_MEAT%] ...&&CALL:PAD_LINE&&REG DELETE "%HIVE_SOFTWARE%\Microsoft\Windows NT\CurrentVersion\Schedule\TaskCache\Tree\%SANDWICH_MEAT%" /F
IF "%SANDWICH_LAYER%"=="TASKS-DELETE" CALL:PAD_LINE
IF "%SANDWICH_LAYER%"=="FEATURES-ENABLE" CALL:IF_LIVE2&&DISM /%APPLY_TARGET% /ENABLE-FEATURE /PACKAGENAME:"%SANDWICH_MEAT%" /ALL>$DISM1
IF "%SANDWICH_LAYER%"=="FEATURES-ENABLE" SET "DISMSG="&&FOR /F "TOKENS=1-9* DELIMS=" %%a in ($DISM1) DO (SET "DISMSG="&&IF "%%a"=="The operation completed successfully." CALL ECHO                [%%a]&&CALL:PAD_LINE)
IF "%SANDWICH_LAYER%"=="FEATURES-DISABLE" CALL:IF_LIVE2&&ECHO Disabling Feature [%SANDWICH_MEAT%] ...&&CALL:PAD_LINE&&DISM /%APPLY_TARGET% /DISABLE-FEATURE /FEATURENAME:"%SANDWICH_MEAT%" /REMOVE>$DISM1
IF "%SANDWICH_LAYER%"=="FEATURES-DISABLE" SET "DISMSG="&&FOR /F "TOKENS=1-9* DELIMS=" %%a in ($DISM1) DO (SET "DISMSG="&&IF "%%a"=="The operation completed successfully." CALL ECHO                [%%a]&&CALL:PAD_LINE)
IF "%SANDWICH_LAYER%"=="APPX-DELETE" CALL:APPX_FINDER
IF "%SANDWICH_LAYER%"=="PACKAGES-DELETE" REG QUERY "%HIVE_SOFTWARE%\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages" /F "%SANDWICH_MEAT%">$REG1
IF "%SANDWICH_LAYER%"=="PACKAGES-DELETE" SET "COMP_CNT="&&FOR /F "TOKENS=1* DELIMS=:~" %%a IN ($REG1) DO (IF NOT "%%a"=="" CALL SET /A COMP_CNT+=1&&CALL SET "TX1=%%a"&&CALL SET "TX2=%%b"&&CALL SET "TARGET_MEAT=%SANDWICH_MEAT%"&&CALL:COMP_FINDER)
IF EXIST "$REG1" DEL /F "$REG1">NUL
IF EXIST "$DISM1" DEL /F "$DISM1">NUL
EXIT /B
:APPX_FINDER
SET "APPX_DONE="&&SET "APPX_ERR="&&CALL:IF_LIVE1
REG QUERY "%HIVE_SOFTWARE%\Microsoft\Windows\CurrentVersion\Appx\AppxAllUserStore\Applications" /F "%SANDWICH_MEAT%">$REG1
REG QUERY "%HIVE_SOFTWARE%\Microsoft\Windows\CurrentVersion\Appx\AppxAllUserStore\InboxApplications" /F "%SANDWICH_MEAT%">$REG2
SET "APPX_CNT="&&FOR /F "TOKENS=3* DELIMS=:_" %%a IN ($REG1) DO (IF NOT "%%a"=="" CALL SET /A APPX_CNT+=1&&CALL SET "TX1=%%a"&&CALL SET "TX2=%%b"&&SET "TARGET_MEAT=%SANDWICH_MEAT%"&&CALL:APPXBBQ)
SET "APPX_CNT="&&FOR /F "TOKENS=3* DELIMS=:_" %%a IN ($REG2) DO (IF NOT "%%a"=="" CALL SET /A APPX_CNT+=1&&CALL SET "TX1=%%a"&&CALL SET "TX2=%%b"&&SET "TARGET_MEAT=%SANDWICH_MEAT%"&&CALL:APPXBBQ)
IF DEFINED APPX_ERR ECHO           [AppX is either an empty stub or unable to remove]&&CALL:PAD_LINE
IF NOT DEFINED APPX_DONE IF NOT DEFINED APPX_ERR ECHO AppX [%SANDWICH_MEAT%] doesn't exist&&CALL:PAD_LINE
IF DEFINED APPX_DONE ECHO                [%DISMSG%]&&CALL:PAD_LINE
IF EXIST "$REG1" DEL /F "$REG1">NUL
IF EXIST "$REG2" DEL /F "$REG2">NUL
EXIT /B
:APPXBBQ
IF "%TX1%"=="%ENDQ%" EXIT /B
ECHO Removing AppX [%TARGET_MEAT%_%TX2%] ...&&CALL:PAD_LINE
IF NOT DEFINED LIVE_APPLY CALL:MOUNT_MIX
DISM /%APPLY_TARGET% /REMOVE-Provisionedappxpackage /PACKAGENAME:"%TARGET_MEAT%_%TX2%" >$DISM1
SET "DISMSG="&&FOR /F "TOKENS=1-9* DELIMS=" %%1 in ($DISM1) DO (SET "DISMSG="&&IF "%%1"=="The operation completed successfully." CALL SET DISMSG=%%1%%2%%3%%4)
IF NOT DEFINED DISMSG SET "APPX_ERR=1"
IF DEFINED DISMSG SET "APPX_DONE=1"
IF EXIST "$DISM1" DEL /F "$DISM1">NUL
EXIT /B
:COMP_FINDER
SET "X1LAST="&&IF "%COMP_CNT%"=="1" IF "%TX1%"=="%ENDQ%" ECHO Component [%TARGET_MEAT%] doesn't exist&&CALL:PAD_LINE
IF "%TX1%"=="%ENDQ%" EXIT /B
IF NOT DEFINED LIVE_APPLY CALL:MOUNT_EXT
REG QUERY "%HIVE_SOFTWARE%\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages" /F "%TARGET_MEAT%">$REG2
SET "NULL_CNT="&&FOR /F "TOKENS=1* DELIMS=:~" %%1 IN ($REG2) DO (IF NOT "%%1"=="" CALL SET /A NULL_CNT+=1&&CALL SET "X1=%%1"&&CALL SET "X2=%%2"&&CALL:WTFBBQ)
IF EXIST "$REG2" DEL /F "$REG2">NUL
EXIT /B
:WTFBBQ
SET "X1LAST=%TARGET_MEAT%~%X2%"
IF "%X1%"=="%ENDQ%" EXIT /B
IF "%X1%"=="%X1LAST%" EXIT /B
IF NOT DEFINED LIVE_APPLY CALL:MOUNT_EXT
ECHO Removing Component [%TARGET_MEAT%~%X2%] ...&&CALL:PAD_LINE
REG ADD "%X1%~%X2%" /V "Visibility" /T REG_DWORD /D "1" /F>NUL 2>&1
REG DELETE "%X1%~%X2%\Owners" /F>NUL 2>&1
IF NOT DEFINED LIVE_APPLY CALL:MOUNT_MIX
DISM /%APPLY_TARGET% /REMOVE-PACKAGE /PACKAGENAME:"%TARGET_MEAT%~%X2%" >$DISM1
SET "DISMSG="&&FOR /F "TOKENS=1-9* DELIMS=" %%1 in ($DISM1) DO (SET "DISMSG="&&IF "%%1"=="The operation completed successfully." CALL SET DISMSG=%%1%%2%%3%%4)
IF NOT DEFINED DISMSG ECHO                [Component leftover or unable to remove]&&CALL:PAD_LINE
IF DEFINED DISMSG ECHO                [%DISMSG%]&&CALL:PAD_LINE
IF EXIST "$DISM1" DEL /F "$DISM1">NUL
EXIT /B
:IMAGEMGR_LIST_OPER
IF DEFINED LOL_PARSE IF NOT EXIST "%HEADER_TGT_LOL%" CALL:PAD_LINE&&ECHO  The list [%HEADER_TGT_LOL%] is missing&&CALL:PAD_LINE&&EXIT /B
IF NOT DEFINED LOL_PARSE IF NOT EXIST "%HEADER_TGT%" CALL:PAD_LINE&&ECHO  The list [%HEADER_TGT%] is missing&&CALL:PAD_LINE&&EXIT /B
IF DEFINED LOL_PARSE IF NOT DEFINED PARSE_OK CALL:PAD_LINE&&ECHO  The list header [%FILE_HEADER%] of [%HEADER_TGT_LOL%] is malformed&&CALL:PAD_LINE&&EXIT /B
IF NOT DEFINED LOL_PARSE IF NOT DEFINED PARSE_OK CALL:PAD_LINE&&ECHO  The list header [%FILE_HEADER%] of [%HEADER_TGT%] is malformed&&CALL:PAD_LINE&&EXIT /B
:IMAGEMGR_LIST_OPER_JUMP
SET "ENDQ=End of search"&&CALL:PAD_LINE&&ECHO [%FILE_HEADER% START] [%DATE%] [%TIME%]&&CALL:PAD_LINE&&CALL:COLOR_CHK&&CALL:IF_LIVE1
IF DEFINED LOL_PARSE COPY /Y "%HEADER_TGT_LOL%" "$LST">NUL 2>&1
IF NOT DEFINED LOL_PARSE COPY /Y "%HEADER_TGT%" "$LST">NUL 2>&1
IF "%FILE_HEADER%"=="IMAGE-APPLY" FOR /F "TOKENS=1 SKIP=1 DELIMS={}" %%1 in ($LST) DO (CALL SET "IMAGEFILE_PACK=%PACK_FOLDER%\%%1"&&CALL:COLOR_CHK&&CALL:PACK_INSTALL)
IF "%FILE_HEADER%"=="RUN-ONCE" CALL:RUNONCE_CREATE&&FOR /F "TOKENS=1 SKIP=1 DELIMS={}" %%1 in ($LST) DO (CALL ECHO Copying Package [%%1] for RunOnce...&&CALL:PAD_LINE&&IF NOT "%%1"=="" IF EXIST "%PACK_FOLDER%\%%1" COPY /Y "%PACK_FOLDER%\%%1" "%APPLYDIR_MASTER%\$">NUL)
IF "%FILE_HEADER%"=="SETUP-COMPLETE" CALL:SETUPCOMPLETE_CREATE&&FOR /F "TOKENS=1 SKIP=1 DELIMS={}" %%1 in ($LST) DO (CALL ECHO Copying Package [%%1] for SetupComplete...&&CALL:PAD_LINE&&IF NOT "%%1"=="" IF EXIST "%PACK_FOLDER%\%%1" COPY /Y "%PACK_FOLDER%\%%1" "%APPLYDIR_MASTER%\$">NUL)
IF "%FILE_HEADER%"=="SERVICES-AUTO" FOR /F "TOKENS=1 SKIP=1 DELIMS={}" %%1 in ($LST) DO (CALL ECHO Changing Start to Auto for Service [%%1] ...&&CALL:PAD_LINE&&REG ADD "%HIVE_SYSTEM%\ControlSet001\Services\%%1" /V "Start" /T REG_DWORD /D "2" /F)
IF "%FILE_HEADER%"=="SERVICES-MANUAL" FOR /F "TOKENS=1 SKIP=1 DELIMS={}" %%1 in ($LST) DO (CALL ECHO Changing Start to Manual for Service [%%1] ...&&CALL:PAD_LINE&&REG ADD "%HIVE_SYSTEM%\ControlSet001\Services\%%1" /V "Start" /T REG_DWORD /D "3" /F)
IF "%FILE_HEADER%"=="SERVICES-DISABLE" FOR /F "TOKENS=1 SKIP=1 DELIMS={}" %%1 in ($LST) DO (CALL ECHO Disabling Service [%%1] ...&&CALL:PAD_LINE&&REG ADD "%HIVE_SYSTEM%\ControlSet001\Services\%%1" /V "Start" /T REG_DWORD /D "4" /F)
IF "%FILE_HEADER%"=="SERVICES-DELETE" FOR /F "TOKENS=1 SKIP=1 DELIMS={}" %%1 in ($LST) DO (CALL ECHO Deleting Service [%%1] ...&&CALL:PAD_LINE&&REG DELETE "%HIVE_SYSTEM%\ControlSet001\Services\%%1" /F&&CALL:PAD_LINE&&REG ADD "%HIVE_SYSTEM%\ControlSet001\Services\%%1" /V "ImagePath" /T REG_EXPAND_SZ /D "NUL" /F>NUL 2>&1)
IF "%FILE_HEADER%"=="TASKS-DELETE" FOR /F "TOKENS=1 SKIP=1 DELIMS={}" %%1 in ($LST) DO (FOR /F "TOKENS=1-9 DELIMS={}" %%a in ('REG QUERY "%HIVE_SOFTWARE%\Microsoft\Windows NT\CurrentVersion\Schedule\TaskCache\Tree\%%1" /F Id /c /e /s') DO (IF "%%a"=="    Id    REG_SZ    " REG DELETE "%HIVE_SOFTWARE%\Microsoft\Windows NT\CurrentVersion\Schedule\TaskCache\Tasks\{%%b}" /F>NUL 2>&1))
IF "%FILE_HEADER%"=="TASKS-DELETE" FOR /F "TOKENS=1 SKIP=1 DELIMS={}" %%1 in ($LST) DO (CALL ECHO Deleting Task [%%1] ...&&CALL:PAD_LINE&&REG DELETE "%HIVE_SOFTWARE%\Microsoft\Windows NT\CurrentVersion\Schedule\TaskCache\Tree\%%1" /F
 CALL:PAD_LINE)
IF "%FILE_HEADER%"=="FEATURES-ENABLE" CALL:IF_LIVE2&&FOR /F "TOKENS=1 SKIP=1 DELIMS={}" %%1 in ($LST) DO (CALL ECHO Enabling Feature [%%1] ...&&CALL:PAD_LINE&&DISM /%APPLY_TARGET% /ENABLE-FEATURE /PACKAGENAME:"%%1" /ALL>$DISM1
SET "DISMSG="&&FOR /F "TOKENS=1-9* DELIMS=" %%a in ($DISM1) DO (SET "DISMSG="&&IF "%%a"=="The operation completed successfully." CALL ECHO                [%%a]&&CALL:PAD_LINE&&DEL /F $DISM1>NUL))
IF "%FILE_HEADER%"=="FEATURES-DISABLE" CALL:IF_LIVE2&&FOR /F "TOKENS=1 SKIP=1 DELIMS={}" %%1 in ($LST) DO (CALL ECHO Disabling Feature [%%1] ...&&CALL:PAD_LINE&&DISM /%APPLY_TARGET% /DISABLE-FEATURE /FEATURENAME:"%%1" /REMOVE>$DISM1
SET "DISMSG="&&FOR /F "TOKENS=1-9* DELIMS=" %%a in ($DISM1) DO (SET "DISMSG="&&IF "%%a"=="The operation completed successfully." CALL ECHO                [%%a]&&CALL:PAD_LINE&&DEL /F $DISM1>NUL))
IF "%FILE_HEADER%"=="APPX-DELETE" FOR /F "TOKENS=1 SKIP=1 DELIMS={}" %%1 in ($LST) DO (CALL SET "SANDWICH_MEAT=%%1"&&CALL:APPX_FINDER)
IF "%FILE_HEADER%"=="PACKAGES-DELETE" FOR /F "TOKENS=1 SKIP=1 DELIMS={}" %%1 in ($LST) DO (CALL:IF_LIVE1&&REG QUERY "%HIVE_SOFTWARE%\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages" /F "%%1">$REG1
SET "COMP_CNT="&&FOR /F "TOKENS=1* DELIMS=:~" %%a IN ($REG1) DO (IF NOT "%%a"=="" CALL SET /A COMP_CNT+=1&&CALL SET "TX1=%%a"&&CALL SET "TX2=%%b"&&CALL SET "TARGET_MEAT=%%1"&&CALL:COMP_FINDER))
IF EXIST "%PROG_SOURCE%\ScratchPack" DISM /cleanup-MountPoints>NUL 2>&1
IF EXIST "%PROG_SOURCE%\ScratchPack" ATTRIB -R -S -H "%PROG_SOURCE%\ScratchPack" /S /D /L>NUL 2>&1
IF EXIST "%PROG_SOURCE%\ScratchPack" RD /S /Q "\\?\%PROG_SOURCE%\ScratchPack">NUL 2>&1
IF EXIST "$LST" DEL /F "$LST">NUL 2>&1
IF EXIST "$REG1" DEL /F "$REG1">NUL 2>&1
ECHO [%FILE_HEADER% END] [%DATE%] [%TIME%]&&CALL:PAD_LINE&&SET "FILE_HEADER="&&SET "HEADER_TGT_LOL="
EXIT /B
:SETUPCOMPLETE_CREATE
IF NOT EXIST "%APPLYDIR_MASTER%\$" MD "%APPLYDIR_MASTER%\$">NUL 2>&1
COPY /Y "%PROG_FOLDER%\$HAZZAM.CMD" "%APPLYDIR_MASTER%\$">NUL 2>&1
IF DEFINED SANDWICH_PARSE ECHO SETUP-COMPLETE>"%APPLYDIR_MASTER%\$\SETUPCOMPLETE.LST"
IF DEFINED LOL_PARSE COPY /Y "%HEADER_TGT_LOL%" "%APPLYDIR_MASTER%\$\SETUPCOMPLETE.LST">NUL 2>&1
IF NOT DEFINED LOL_PARSE IF NOT DEFINED SANDWICH_PARSE COPY /Y "%HEADER_TGT%" "%APPLYDIR_MASTER%\$\SETUPCOMPLETE.LST">NUL 2>&1
IF NOT EXIST "%APPLYDIR_MASTER%\WINDOWS\Setup\Scripts" MD "%WINTAR%\Setup\Scripts">NUL 2>&1
ECHO;%%SYSTEMDRIVE%%\$\$HAZZAM.CMD -LISTMGR -INSTALL -LIST SetupComplete.LST>"%WINTAR%\Setup\Scripts\SetupComplete.CMD"
ECHO;EXIT 0 >>"%WINTAR%\Setup\Scripts\SetupComplete.CMD"
CALL:PAD_LINE&&ECHO                       SetupComplete Preparation&&CALL:PAD_LINE
EXIT /B
:RUNONCE_CREATE
IF NOT EXIST "%APPLYDIR_MASTER%\$" MD "%APPLYDIR_MASTER%\$">NUL 2>&1
COPY /Y "%PROG_FOLDER%\$HAZZAM.CMD" "%APPLYDIR_MASTER%\$">NUL 2>&1
IF DEFINED SANDWICH_PARSE ECHO RUN-ONCE>"%APPLYDIR_MASTER%\$\RUNONCE.LST"
IF DEFINED LOL_PARSE COPY /Y "%HEADER_TGT_LOL%" "%APPLYDIR_MASTER%\$\RUNONCE.LST">NUL 2>&1
IF NOT DEFINED LOL_PARSE IF NOT DEFINED SANDWICH_PARSE COPY /Y "%HEADER_TGT%" "%APPLYDIR_MASTER%\$\RUNONCE.LST">NUL 2>&1
Reg.exe add "%HIVE_SOFTWARE%\Microsoft\Windows\CurrentVersion\RunOnce" /v "Runonce" /t REG_EXPAND_SZ /d "%%WINDIR%%\Setup\Scripts\Runonce.CMD" /f>NUL 2>&1
IF NOT EXIST "%APPLYDIR_MASTER%\WINDOWS\Setup\Scripts" MD "%WINTAR%\Setup\Scripts">NUL 2>&1
ECHO;%%SYSTEMDRIVE%%\$\$HAZZAM.CMD -LISTMGR -INSTALL -LIST RunOnce.LST>"%WINTAR%\Setup\Scripts\Runonce.CMD"
ECHO;EXIT 0 >>"%WINTAR%\Setup\Scripts\RUNONCE.CMD"
CALL:PAD_LINE&&ECHO                           RunOnce Preparation&&CALL:PAD_LINE
EXIT /B
:PACK_INSTALL
CALL:PAD_LINE&&ECHO.                         Package-Manager Start&&CALL:PAD_LINE
IF "%CAME_FROM%"=="COMMAND" IF NOT EXIST "%IMAGEFILE_PACK%" ECHO IMAGE-APPLY/RUN-ONCE/SETUP-COMPLETE LISTS ONLY
IF NOT EXIST "%IMAGEFILE_PACK%" CALL:PAD_LINE&&ECHO %IMAGEFILE_PACK% IS MISSING&&CALL:PAD_LINE&&GOTO:PACK_INSTALL_FINISH
SET "SCRATCHDIR_PACK=%PROG_SOURCE%\ScratchPack"
IF EXIST "%SCRATCHDIR_PACK%" DISM /cleanup-MountPoints>NUL 2>&1
IF EXIST "%SCRATCHDIR_PACK%" RD /S /Q "%SCRATCHDIR_PACK%">NUL 2>&1
IF NOT EXIST "%SCRATCHDIR_PACK%" MD "%SCRATCHDIR_PACK%">NUL 2>&1
FOR %%a in (PackName PackType PackDesc PackTag REG_KEY REG_VAL RUN_MOD REG_DAT) DO (CALL SET "%%a=")
For %%G in ("%IMAGEFILE_PACK%") DO SET "PackExt=%%~xG"
FOR %%G in (M A B U S C) DO (CALL SET "PackExt=%%PackExt:%%G=%%G%%")
IF "%PackExt%"==".CAB" SET "PackType=DRIVER"&&SET "PackName=%IMAGEFILE_PACK%"
IF "%PackExt%"==".MSU" SET "PackType=DRIVER"&&SET "PackName=%IMAGEFILE_PACK%"
IF NOT "%PackExt%"==".$PK" GOTO:PACK_JUMP
DISM /APPLY-IMAGE /IMAGEFILE:"%IMAGEFILE_PACK%" /INDEX:2 /APPLYDIR:"%SCRATCHDIR_PACK%" >NUL 2>&1
FOR /F "eol=- TOKENS=1-2 delims==" %%a in (%SCRATCHDIR_PACK%\PACKAGE.$HZ) DO (IF NOT "%%a"=="   " SET "%%a=%%b")
CALL:PACK_PERM
IF DEFINED PACK_PERM IF NOT DEFINED PACK_PASS GOTO:PACK_INSTALL_FINISH
IF "%GET_WIM_INFO%"=="1" GOTO:PACK_INSTALL_FINISH
ECHO Extracting %IMAGEFILE_PACK%..&&CALL:PAD_LINE
DISM /APPLY-IMAGE /IMAGEFILE:"%IMAGEFILE_PACK%" /INDEX:1 /APPLYDIR:"%SCRATCHDIR_PACK%">NUL
:PACK_JUMP
IF DEFINED LIVE_APPLY IF "%PackType%"=="DRIVER" CALL:MOUNT_INT
IF DEFINED LIVE_APPLY IF "%PackType%"=="SCRIPTED" CALL:MOUNT_INT
IF NOT DEFINED LIVE_APPLY IF "%PackType%"=="DRIVER" CALL:MOUNT_MIX
IF NOT DEFINED LIVE_APPLY IF "%PackType%"=="SCRIPTED" CALL:MOUNT_EXT
ECHO Running [NAME[%PackName%] [EXT[%PackExt%] [DESC[%PackDesc%]&&CALL:PAD_LINE
IF "%PackExt%"==".CAB" EXPAND "%IMAGEFILE_PACK%" -F:* "%SCRATCHDIR_PACK%" >NUL 2>&1
IF "%PackExt%"==".MSU" DISM /%APPLY_TARGET% /ADD-PACKAGE /PACKAGEPATH:"%IMAGEFILE_PACK%" >$DRVR
IF "%PackExt%"==".MSU" SET "DISMSG="&&FOR /F "TOKENS=1 DELIMS=." %%1 in ($DRVR) DO (IF "%%1"=="The operation completed successfully" CALL SET DISMSG=1)
IF "%PackExt%"==".MSU" GOTO:PACK_INSTALL_FINISH
IF "%PackType%"=="SCRIPTED" CD /D "%SCRATCHDIR_PACK%"&&CMD /C "%SCRATCHDIR_PACK%\PACKAGE.CMD"
IF "%PackType%"=="SCRIPTED" CD /D "%~DP0"&&ECHO.
IF "%PackType%"=="DRIVER" FOR /F "tokens=*" %%a in ('DIR/S/B "%SCRATCHDIR_PACK%\*.INF"') DO (
IF NOT EXIST "%%a\*" CALL:TITLECARD&&CALL:PAD_LINE&&ECHO Installing [NAME[%PackName%] [TYPE[%PackType%] [DESC[%PackDesc%]&&CALL:PAD_LINE&&CALL ECHO INF [%%a]&&CALL:PAD_LINE
IF NOT EXIST "%%a\*" IF NOT DEFINED LIVE_APPLY DISM /%APPLY_TARGET% /ADD-DRIVER /DRIVER:"%%a" /ForceUnsigned>$DRVR
IF NOT EXIST "%%a\*" IF DEFINED LIVE_APPLY pnputil.exe /add-driver "%%a" /install>$DRVR
IF NOT EXIST "%%a\*" SET "DISMSG="&&FOR /F "TOKENS=1 DELIMS=." %%1 in ($DRVR) DO (
IF "%%1"=="Driver package added successfully" CALL SET DISMSG=1
IF "%%1"=="The operation completed successfully" CALL SET DISMSG=1)
IF NOT EXIST "%%a\*" IF DEFINED DISMSG CALL ECHO                [The operation completed successfully.]
IF NOT EXIST "%%a\*" IF NOT DEFINED DISMSG CALL ECHO             [The operation did NOT complete successfully.])
:PACK_INSTALL_FINISH
CALL:MOUNT_INT>NUL 2>&1
IF EXIST $DRVR DEL /F $DRVR>NUL
IF EXIST "%SCRATCHDIR_PACK%" DISM /cleanup-MountPoints>NUL 2>&1
IF EXIST "%SCRATCHDIR_PACK%" RD /S /Q "%SCRATCHDIR_PACK%">NUL 2>&1
SET "GET_WIM_INFO="&&CALL:PAD_LINE&&ECHO.                          Package-Manager End&&CALL:PAD_LINE
EXIT /B
:PACK_PERM
SET "PACK_PERM="
IF NOT "%REG_KEY%"=="NULL" IF NOT "%REG_VAL%"=="NULL" IF NOT "%RUN_MOD%"=="NULL" IF NOT "%REG_DAT%"=="NULL" IF DEFINED REG_KEY IF DEFINED REG_VAL IF DEFINED RUN_MOD IF DEFINED REG_DAT SET "PACK_PERM=1"
IF NOT DEFINED PACK_PERM EXIT /B
IF DEFINED RUN_MOD IF NOT "%RUN_MOD%"=="NULL" IF NOT "%RUN_MOD%"=="EQU" IF NOT "%RUN_MOD%"=="NEQ" EXIT /B
CALL:MOUNT_INT>NUL 2>&1
IF DEFINED PACK_PERM CALL REG QUERY "%REG_KEY%" /V "%REG_VAL%" >$HZ.TXT
SET "COL1="&&IF DEFINED PACK_PERM IF EXIST $HZ.TXT FOR /F "TOKENS=* DELIMS=" %%1 in ($HZ.TXT) DO (SET COL1=%%1)
IF DEFINED PACK_PERM IF EXIST $HZ.TXT DEL $HZ.TXT>NUL 2>&1
IF "%RUN_MOD%"=="NULL" SET "RUN_MOD=EQU"
IF NOT DEFINED RUN_MOD SET "RUN_MOD=EQU"
SET "PACK_PASS="&&IF DEFINED PACK_PERM FOR %%a in (REG_SZ REG_DWORD REG_BINARY REG_EXPAND_SZ REG_MULTI_SZ REG_NONE) DO (IF "%COL1%" %RUN_MOD% "    %REG_VAL%    %%a    %REG_DAT%" SET "PACK_PASS=1")
EXIT /B
:IMAGEMGR_DISM_MENU
CLS&&SET "DISM_OPER="&&CALL:PAD_LINE&&ECHO                        DISM Image Maintainence&&CALL:PAD_LINE
ECHO  {1}RestoreHealth&&ECHO  {2}Cleanup&&ECHO  {3}ResetBase&&SET "PROMPT_SET=DISM_MENU"&&CALL:PAD_LINE&&CALL:PAD_PREV&&CALL:PROMPT_SET
IF "%DISM_MENU%"=="1" SET "DISM_OPER=RESTOREHEALTH"
IF "%DISM_MENU%"=="2" SET "DISM_OPER=CLEANUP"
IF "%DISM_MENU%"=="3" SET "DISM_OPER=RESETBASE"
IF NOT DEFINED DISM_OPER EXIT /B
CLS&&CALL:PAD_LINE&&ECHO                          $haZZam^^! File Picker&&CALL:PAD_LINE
SET "LIST_FMT=NUMERAL"&&SET "LIST_DIR=%IMAGE_FOLDER%\*.VHDX"&&SET "LIST_INSERTA= [ @ ]\[Current-Environment]"&&ECHO   AVAILABLE VHDX'S:&&CALL:FILE_LIST&&CALL:PAD_LINE&&ECHO                           Enter File # to Pick&&CALL:PAD_LINE&&CALL:PAD_PREV&&CALL:MENU_SELECT
IF "%SELECT%"=="@" IF NOT DEFINED DISCLAIMER CALL:DISCLAIMER&&GOTO:IMAGEMGR_DISM_MENU
IF "%SELECT%"=="@" SET "LIVE_APPLY=1"&&SET "APPLY_TARGET=ONLINE"&&GOTO:IMAGEMGR_DISM_OPER_JUMP
IF NOT EXIST "%IMAGE_FOLDER%\%SELECT%" CALL:FILE_LIST >NUL
CALL:EXIT_FLAGGER
IF "%EXIT_FLAGGER%"=="1" EXIT /B
IF NOT EXIST "%IMAGE_FOLDER%\%SELECT%" EXIT /B
IF EXIST "V:\" SET "ERR_MSG=Drive letter V:\ can NOT be in use. Unmount the Vdisk in use."&&GOTO:DISM_OPER_CLEANUP
SET "APPLY_TARGET=IMAGE:V:"&&SET "VDISK=%IMAGE_FOLDER%\%SELECT%"&&CALL:VDISK_ATTACH
IF NOT EXIST "V:\Windows" SET "ERR_MSG=Virtual Disk Error. If VHDX refuses mounting, reboot and try again."&&CALL:VDISK_DETACH&&GOTO:DISM_OPER_CLEANUP
:IMAGEMGR_DISM_OPER_JUMP
CALL:IMAGEMGR_DISM_OPER
IF NOT DEFINED LIVE_APPLY CALL:VDISK_DETACH
:DISM_OPER_CLEANUP
IF NOT DEFINED LIVE_APPLY CALL:SCRATCHDIR_DELETE
IF DEFINED ERR_MSG ECHO %ERR_MSG%
CALL:PAD_LINE&&ECHO                        End of DISM-Operations&&CALL:PAD_LINE&&CALL:TITLECARD&&CALL:COLOR_CHK
CALL:PAUSED
EXIT /B
:IMAGEMGR_DISM_OPER
IF "%DISM_OPER%"=="CLEANUP" CALL:PAD_LINE&&ECHO                Executing DISM StartComponentCleanup.....&&CALL:PAD_LINE&&CALL:TITLECARD&&CALL:COLOR_CHK
IF "%DISM_OPER%"=="CLEANUP" DISM /%APPLY_TARGET% /CLEANUP-IMAGE /StartComponentCleanup
IF "%DISM_OPER%"=="RESETBASE" CALL:PAD_LINE&&ECHO           Executing DISM StartComponentCleanup /RESETBASE.....&&CALL:PAD_LINE&&CALL:TITLECARD&&CALL:COLOR_CHK
IF "%DISM_OPER%"=="RESETBASE" DISM /%APPLY_TARGET% /CLEANUP-IMAGE /StartComponentCleanup
IF "%DISM_OPER%"=="RESETBASE" CALL:PAD_LINE&&ECHO                      Executing DISM ResetBase....&&CALL:PAD_LINE&&CALL:TITLECARD&&CALL:COLOR_CHK
IF "%DISM_OPER%"=="RESETBASE" DISM /%APPLY_TARGET% /CLEANUP-IMAGE /StartComponentCleanup /ResetBase
IF "%DISM_OPER%"=="RESTOREHEALTH" CALL:PAD_LINE&&ECHO                     Executing DISM Restorehealth...&&CALL:PAD_LINE&&CALL:TITLECARD&&CALL:COLOR_CHK
IF "%DISM_OPER%"=="RESTOREHEALTH" DISM /%APPLY_TARGET% /CLEANUP-IMAGE /Restorehealth
EXIT /B
:IMAGEMGR_INSPECT
CLS&&CALL:PAD_LINE&&ECHO                         $haZZam^^! File Picker&&CALL:PAD_LINE&&SET "LIST_FMT=NUMERAL"&&SET "LIST_DIR=%IMAGE_FOLDER%\*.VHDX"&&SET "LIST_INSERTA= [ @ ]\[Current-Environment]"&&ECHO   AVAILABLE VHDX'S:&&CALL:FILE_LIST&&CALL:PAD_LINE&&ECHO                        Enter File # To Inspect&&CALL:PAD_LINE&&CALL:PAD_PREV&&CALL:MENU_SELECT&&CLS
IF "%SELECT%"=="@" IF NOT DEFINED DISCLAIMER CALL:DISCLAIMER&&GOTO:IMAGEMGR_INSPECT
IF "%SELECT%"=="@" SET "LIVE_APPLY=1"&&SET "TARGET_IMAGE=LIVE"&&GOTO:INSPECT_JUMP_LIVE
IF NOT EXIST "%IMAGE_FOLDER%\%SELECT%" CALL:FILE_LIST >NUL
CALL:EXIT_FLAGGER
IF "%EXIT_FLAGGER%"=="1" EXIT /B
IF NOT EXIST "%IMAGE_FOLDER%\%SELECT%" EXIT /B
IF EXIST "V:\" SET "ERR_MSG=Drive letter V:\ can NOT be in use. Unmount the Vdisk in use."&&CALL:PAD_LINE&&ECHO.&&GOTO:INSPECT_CLEANUP
SET "TARGET_IMAGE=%SELECT%"&&CALL:MOUNT_EXT
CALL:PAD_LINE&&ECHO                          Windows Source Info&&CALL:PAD_LINE
CALL:SCRATCHDIR_CREATE
SET "VDISK=%IMAGE_FOLDER%\%TARGET_IMAGE%"&&CALL:VDISK_ATTACH
IF NOT EXIST "V:\Windows" SET "ERR_MSG=Virtual Disk Error. If VHDX refuses mounting, reboot and try again."&&CALL:VDISK_DETACH&&GOTO:INSPECT_CLEANUP
:INSPECT_JUMP_LIVE
ECHO.>"%PROG_SOURCE%\%TARGET_IMAGE%_REPORT.TXT"
CALL:PAD_LINE&&ECHO                         Performing Health Scan...&&CALL:PAD_LINE&&CALL:TITLECARD&&CALL:COLOR_CHK
CALL:PAD_LINE>>"%PROG_SOURCE%\%TARGET_IMAGE%_REPORT.TXT"
ECHO IMAGE HEALTH SCAN>>"%PROG_SOURCE%\%TARGET_IMAGE%_REPORT.TXT"
CALL:PAD_LINE>>"%PROG_SOURCE%\%TARGET_IMAGE%_REPORT.TXT"
IF DEFINED LIVE_APPLY CALL:MOUNT_INT
IF NOT DEFINED LIVE_APPLY CALL:MOUNT_MIX
DISM /%APPLY_TARGET% /CLEANUP-IMAGE /CHECKHEALTH>>"%PROG_SOURCE%\%TARGET_IMAGE%_REPORT.TXT"
CALL:PAD_LINE>>"%PROG_SOURCE%\%TARGET_IMAGE%_REPORT.TXT"
ECHO COMPONENT STORE HEALTH SCAN>>"%PROG_SOURCE%\%TARGET_IMAGE%_REPORT.TXT"
CALL:PAD_LINE>>"%PROG_SOURCE%\%TARGET_IMAGE%_REPORT.TXT"
DISM /%APPLY_TARGET% /CLEANUP-IMAGE /AnalyzeComponentStore>>"%PROG_SOURCE%\%TARGET_IMAGE%_REPORT.TXT"
CALL:PAD_LINE&&ECHO                         Getting Appx Info...&&CALL:PAD_LINE&&CALL:TITLECARD&&CALL:COLOR_CHK
CALL:PAD_LINE>>"%PROG_SOURCE%\%TARGET_IMAGE%_REPORT.TXT"
ECHO IMAGE APPX PACKAGE LIST>>"%PROG_SOURCE%\%TARGET_IMAGE%_REPORT.TXT"
CALL:PAD_LINE>>"%PROG_SOURCE%\%TARGET_IMAGE%_REPORT.TXT"
DISM /%APPLY_TARGET% /GET-Provisionedappxpackages>>"%PROG_SOURCE%\%TARGET_IMAGE%_REPORT.TXT"
CALL:PAD_LINE&&ECHO                         Getting Component Info...&&CALL:PAD_LINE&&CALL:TITLECARD&&CALL:COLOR_CHK
CALL:PAD_LINE>>"%PROG_SOURCE%\%TARGET_IMAGE%_REPORT.TXT"
ECHO IMAGE COMPONENT PACKAGE LIST>>"%PROG_SOURCE%\%TARGET_IMAGE%_REPORT.TXT"
CALL:PAD_LINE>>"%PROG_SOURCE%\%TARGET_IMAGE%_REPORT.TXT"
DISM /%APPLY_TARGET% /GET-PACKAGES>>"%PROG_SOURCE%\%TARGET_IMAGE%_REPORT.TXT"
CALL:PAD_LINE&&ECHO                         Getting Feature Info...&&CALL:PAD_LINE&&CALL:TITLECARD&&CALL:COLOR_CHK
CALL:PAD_LINE>>"%PROG_SOURCE%\%TARGET_IMAGE%_REPORT.TXT"
ECHO IMAGE FEATURE LIST>>"%PROG_SOURCE%\%TARGET_IMAGE%_REPORT.TXT"
CALL:PAD_LINE>>"%PROG_SOURCE%\%TARGET_IMAGE%_REPORT.TXT"
DISM /%APPLY_TARGET% /GET-FEATURES>>"%PROG_SOURCE%\%TARGET_IMAGE%_REPORT.TXT"
CALL:PAD_LINE&&ECHO                         Performing Multi-Scan...&&CALL:PAD_LINE&&CALL:TITLECARD&&CALL:COLOR_CHK
ECHO.>>"%PROG_SOURCE%\%TARGET_IMAGE%_REPORT.TXT"
CALL:PAD_LINE>>"%PROG_SOURCE%\%TARGET_IMAGE%_REPORT.TXT"
ECHO. SETUP FILES REPORT>>"%PROG_SOURCE%\%TARGET_IMAGE%_REPORT.TXT"
CALL:PAD_LINE>>"%PROG_SOURCE%\%TARGET_IMAGE%_REPORT.TXT"
IF EXIST "%APPLYDIR_MASTER%\WINDOWS\Setup\Scripts\SETUPCOMPLETE.CMD" ECHO.SetupComplete.CMD located in \WINDOWS\Setup\Scripts>>"%PROG_SOURCE%\%TARGET_IMAGE%_REPORT.TXT"
IF NOT EXIST "%APPLYDIR_MASTER%\WINDOWS\Setup\Scripts\SETUPCOMPLETE.CMD" ECHO.NO SetupComplete.CMD exists in image>>"%PROG_SOURCE%\%TARGET_IMAGE%_REPORT.TXT"
CALL:PAD_LINE>>"%PROG_SOURCE%\%TARGET_IMAGE%_REPORT.TXT"
IF EXIST "%APPLYDIR_MASTER%\WINDOWS\PANTHER\UNATTEND.XML" ECHO.Unattend.XML located in \WINDOWS\PANTHER>>"%PROG_SOURCE%\%TARGET_IMAGE%_REPORT.TXT"
IF NOT EXIST "%APPLYDIR_MASTER%\WINDOWS\PANTHER\UNATTEND.XML" ECHO.No Unattend.XML exists in image>>"%PROG_SOURCE%\%TARGET_IMAGE%_REPORT.TXT"
IF DEFINED LIVE_APPLY CALL:MOUNT_INT
IF NOT DEFINED LIVE_APPLY CALL:MOUNT_EXT
REG QUERY "%HIVE_SOFTWARE%\Microsoft\Windows NT\CurrentVersion\Schedule\TaskCache\Tasks" /f Path /c /e /s>"TASK.TXT"
REG QUERY "%HIVE_SYSTEM%\ControlSet001\Services" /f Type /c /e /s >"SVC.TXT"
CALL:PAD_LINE>>"%PROG_SOURCE%\%TARGET_IMAGE%_REPORT.TXT"
ECHO STARTUP ITEMS REPORT>>"%PROG_SOURCE%\%TARGET_IMAGE%_REPORT.TXT"
CALL:PAD_LINE>>"%PROG_SOURCE%\%TARGET_IMAGE%_REPORT.TXT"
ECHO Searching: [HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\Run]>>"%PROG_SOURCE%\%TARGET_IMAGE%_REPORT.TXT"
REG QUERY "%HIVE_USER%\Software\Microsoft\Windows\CurrentVersion\Run">>"%PROG_SOURCE%\%TARGET_IMAGE%_REPORT.TXT" 2>&1
ECHO Searching: [HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnce]>>"%PROG_SOURCE%\%TARGET_IMAGE%_REPORT.TXT"
REG QUERY "%HIVE_USER%\Software\Microsoft\Windows\CurrentVersion\RunOnce">>"%PROG_SOURCE%\%TARGET_IMAGE%_REPORT.TXT" 2>&1
ECHO Searching: [HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Run]>>"%PROG_SOURCE%\%TARGET_IMAGE%_REPORT.TXT"
REG QUERY "%HIVE_SOFTWARE%\Microsoft\Windows\CurrentVersion\Run">>"%PROG_SOURCE%\%TARGET_IMAGE%_REPORT.TXT" 2>&1
ECHO Searching: [HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnce]>>"%PROG_SOURCE%\%TARGET_IMAGE%_REPORT.TXT"
REG QUERY "%HIVE_SOFTWARE%\Microsoft\Windows\CurrentVersion\RunOnce">>"%PROG_SOURCE%\%TARGET_IMAGE%_REPORT.TXT" 2>&1
ECHO Searching: [HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnceEx]>>"%PROG_SOURCE%\%TARGET_IMAGE%_REPORT.TXT"
REG QUERY "%HIVE_SOFTWARE%\Microsoft\Windows\CurrentVersion\RunOnceEx">>"%PROG_SOURCE%\%TARGET_IMAGE%_REPORT.TXT" 2>&1
ECHO Searching: [HKLM\SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Run]>>"%PROG_SOURCE%\%TARGET_IMAGE%_REPORT.TXT"
REG QUERY "%HIVE_SOFTWARE%\Wow6432Node\Microsoft\Windows\CurrentVersion\Run">>"%PROG_SOURCE%\%TARGET_IMAGE%_REPORT.TXT" 2>&1
ECHO Searching: [HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon]>>"%PROG_SOURCE%\%TARGET_IMAGE%_REPORT.TXT"
REG QUERY "%HIVE_SOFTWARE%\Microsoft\Windows NT\CurrentVersion\Winlogon" /f Userinit /c /e /s>>"%PROG_SOURCE%\%TARGET_IMAGE%_REPORT.TXT" 2>&1
CALL:MOUNT_INT
IF NOT DEFINED LIVE_APPLY CALL:VDISK_DETACH
CALL:PAD_LINE>>"%PROG_SOURCE%\%TARGET_IMAGE%_REPORT.TXT"
ECHO SERVICE LIST REPORT>>"%PROG_SOURCE%\%TARGET_IMAGE%_REPORT.TXT"
CALL:PAD_LINE>>"%PROG_SOURCE%\%TARGET_IMAGE%_REPORT.TXT"
SET "SVC_CNT="&&FOR /F "TOKENS=1-9 DELIMS=\ " %%a in (SVC.TXT) DO (
IF "%%a"=="HKEY_LOCAL_MACHINE" IF NOT "%%e"=="" CALL SET "SVC_NAME=%%e%%f%%g%%h%%i"
IF "%%a"=="Type" IF "%%c"=="0x10" CALL:FORENSICS_SERVICES_QUERY
IF "%%a"=="Type" IF "%%c"=="0x20" CALL:FORENSICS_SERVICES_QUERY
IF "%%a"=="Type" IF "%%c"=="0x60" CALL:FORENSICS_SERVICES_QUERY)
CALL:PAD_LINE>>"%PROG_SOURCE%\%TARGET_IMAGE%_REPORT.TXT"
ECHO TASK LIST REPORT>>"%PROG_SOURCE%\%TARGET_IMAGE%_REPORT.TXT"
CALL:PAD_LINE>>"%PROG_SOURCE%\%TARGET_IMAGE%_REPORT.TXT"
SET "TASK_CNT="&&FOR /F "TOKENS=1* DELIMS=\" %%a in (TASK.TXT) DO (IF "%%a"=="    Path    REG_SZ    " SET "TASK_NAME=%%b"&&CALL:FORENSICS_TASKS_QUERY)
IF EXIST "SVC.TXT" DEL /F "SVC.TXT">NUL 2>&1
IF EXIST "TASK.TXT" DEL /F "TASK.TXT">NUL 2>&1
CALL:PAD_LINE>>"%PROG_SOURCE%\%TARGET_IMAGE%_REPORT.TXT"
ECHO   Full Inspection Complete [%TARGET_IMAGE%] %DATE% %TIME% >>"%PROG_SOURCE%\%TARGET_IMAGE%_REPORT.TXT"
CALL:PAD_LINE>>"%PROG_SOURCE%\%TARGET_IMAGE%_REPORT.TXT"
START NOTEPAD.EXE "%PROG_SOURCE%\%TARGET_IMAGE%_REPORT.TXT"
:INSPECT_CLEANUP
IF NOT DEFINED LIVE_APPLY CALL:SCRATCHDIR_DELETE
IF DEFINED ERR_MSG ECHO %ERR_MSG%
CALL:PAD_LINE&&ECHO                         Inspection Complete&&CALL:PAD_LINE&&CALL:PAUSED
EXIT /B
:FORENSICS_SERVICES_QUERY
CALL SET /A SVC_CNT+=1
CALL ECHO [%SVC_CNT%] [%SVC_NAME%]>>"%PROG_SOURCE%\%TARGET_IMAGE%_REPORT.TXT"
EXIT /B
:FORENSICS_TASKS_QUERY
CALL SET /A TASK_CNT+=1
CALL ECHO [%TASK_CNT%] [%TASK_NAME%]>>"%PROG_SOURCE%\%TARGET_IMAGE%_REPORT.TXT"
EXIT /B
:SCRATCHDIR_CREATE
SET "SCRATCHDIR=%PROG_SOURCE%\Scratch"
IF EXIST "%SCRATCHDIR%" DISM /cleanup-MountPoints>NUL 2>&1
IF EXIST "%SCRATCHDIR%" RD /S /Q "%SCRATCHDIR%">NUL 2>&1
IF NOT EXIST "%SCRATCHDIR%" MD "%SCRATCHDIR%">NUL 2>&1
EXIT /B
:SCRATCHDIR_DELETE
SET "SCRATCHDIR=%PROG_SOURCE%\Scratch"
IF EXIST "%SCRATCHDIR%" DISM /cleanup-MountPoints>NUL 2>&1
IF EXIST "%SCRATCHDIR%" ATTRIB -R -S -H "%SCRATCHDIR%" /S /D /L>NUL 2>&1
IF EXIST "%SCRATCHDIR%" RD /S /Q "%SCRATCHDIR%">NUL 2>&1
EXIT /B
:WIM_INDEX_IMAGEMGR
IF NOT DEFINED WIM_INDEX_IMAGEMGR SET "WIM_INDEX_IMAGEMGR=1"
SET "SELECT="&&SET /A WIM_INDEX_IMAGEMGR+=1
IF "%WIM_INDEX_IMAGEMGR%"=="15" SET "WIM_INDEX_IMAGEMGR=1"
EXIT /B
:BOOT_IMPORT
IF EXIST "%SOURCE_LOCATION%\boot.wim" ECHO Importing BOOT.WIM...&&COPY /Y "%SOURCE_LOCATION%\boot.wim" "%PROG_SOURCE%\BOOT-MEDIA.SAV"&&ECHO 
EXIT /B
:SOURCE_IMPORT
IF EXIST "%SOURCE_LOCATION%\install.wim" ECHO.&&ECHO New .WIM name?&&SET "NEW_NAME=YES"&&SET PROMPT_SET=SELECT&&CALL:PROMPT_SET_ANY
IF "%NEW_NAME%"=="YES" ECHO Copying %SELECT%.WIM...&&COPY /Y "%SOURCE_LOCATION%\install.wim" "%IMAGE_FOLDER%\%SELECT%.WIM"&&SET "NEW_NAME="&&ECHO 
EXIT /B
:WINDRVUSR_INT
SET "APPLYDIR_MASTER=%SYSTEMDRIVE%"&&SET "CAPTUREDIR_MASTER=%SYSTEMDRIVE%"
SET "APPLY_TARGET=ONLINE"&&SET "DRVTAR=%SYSTEMDRIVE%"&&SET "WINTAR=%WINDIR%"&&SET "USRTAR=%USERPROFILE%"
EXIT /B
:WINDRVUSR_EXT
SET "APPLYDIR_MASTER=V:"&&SET "CAPTUREDIR_MASTER=V:"
SET "APPLY_TARGET=IMAGE:%APPLYDIR_MASTER%"&&SET "DRVTAR=%APPLYDIR_MASTER%"&&SET "WINTAR=%APPLYDIR_MASTER%\Windows"&&SET "USRTAR=%APPLYDIR_MASTER%\Users\Default"
EXIT /B
:HIVES_ATTACH
CALL:HIVES_DETACH >NUL 2>&1
SET "HIVE_USER=HKU\$ALLUSER"&&SET "HIVE_SOFTWARE=HKLM\$SOFTWARE"&&SET "HIVE_SYSTEM=HKLM\$SYSTEM"
REG LOAD HKU\$ALLUSER "V:\Users\Default\Ntuser.dat">NUL 2>&1
REG LOAD HKLM\$SOFTWARE "V:\WINDOWS\SYSTEM32\Config\SOFTWARE">NUL 2>&1
REG LOAD HKLM\$SYSTEM "V:\WINDOWS\SYSTEM32\Config\SYSTEM">NUL 2>&1
EXIT /B
:HIVES_DETACH
SET "HIVE_USER=HKCU"&&SET "HIVE_SOFTWARE=HKLM\SOFTWARE"&&SET "HIVE_SYSTEM=HKLM\SYSTEM"
REG UNLOAD HKU\$ALLUSER>NUL 2>&1
REG UNLOAD HKLM\$SOFTWARE>NUL 2>&1
REG UNLOAD HKLM\$SYSTEM>NUL 2>&1
EXIT /B
:MOUNT_INT
IF "%MOUNT%"=="INT" EXIT /B
SET "MOUNT=INT"&&CALL:WINDRVUSR_INT&&CALL:HIVES_DETACH
EXIT /B
:MOUNT_EXT
IF "%MOUNT%"=="EXT" EXIT /B
SET "MOUNT=EXT"&&CALL:WINDRVUSR_EXT&&CALL:HIVES_ATTACH
EXIT /B
:MOUNT_MIX
IF "%MOUNT%"=="MIX" EXIT /B
SET "MOUNT=MIX"&&CALL:WINDRVUSR_EXT&&CALL:HIVES_DETACH
EXIT /B
REM IMAGEPROC_IMAGEPROC_IMAGEPROC_IMAGEPROC_IMAGEPROC_IMAGEPROC_IMAGEPROC_IMAGEPROC_
:IMAGEPROC_START
REM IMAGEPROC_IMAGEPROC_IMAGEPROC_IMAGEPROC_IMAGEPROC_IMAGEPROC_IMAGEPROC_IMAGEPROC_
@ECHO OFF&&CALL:SETS_HANDLER&&CALL:FOLDER_LOCATE&&CALL:OBJ_EXIST&&CALL:IMAGE_EXIST&&CALL:COLOR_CHK
CLS&&CALL:TITLEGEN&&IF DEFINED PROG_OPER CALL:TITLECARD
CALL:PAD_LINE&&ECHO                            Image Processing&&CALL:PAD_LINE
IF NOT DEFINED WIM_COMPRESS SET "WIM_COMPRESS=FAST"
IF NOT DEFINED SOURCE_SLOT_IMAGE SET "SOURCE_SLOT_IMAGE=WIM"
IF NOT DEFINED TARGET_SLOT_IMAGE SET "TARGET_SLOT_IMAGE=VHDX"
IF NOT DEFINED PROG_OPER IF "%SOURCE_SLOT_IMAGE%"=="WIM" IF "%TARGET_SLOT_IMAGE%"=="VHDX" ECHO   [WIM {X} VHDX] - Restore Windows-Image to VHDX
IF NOT DEFINED PROG_OPER IF "%SOURCE_SLOT_IMAGE%"=="WIM" IF "%TARGET_SLOT_IMAGE%"=="WIM" ECHO  [WIM {X} WIM] - Isolate Index
IF NOT DEFINED PROG_OPER IF "%SOURCE_SLOT_IMAGE%"=="VHDX" IF "%TARGET_SLOT_IMAGE%"=="WIM" ECHO  [VHDX {X} WIM] - Create Backup-Image of VHDX
IF NOT DEFINED PROG_OPER CALL:PAD_LINE
IF NOT DEFINED PROG_OPER IF "%SOURCE_SLOT_IMAGE%"=="VHDX" SET "LIST_FMT=PLAIN"&&SET "LIST_DIR=%IMAGE_FOLDER%\*.VHDX"&&ECHO   AVAILABLE VHDX'S:&&CALL:FILE_LIST&&CALL:PAD_LINE
IF NOT DEFINED PROG_OPER IF "%SOURCE_SLOT_IMAGE%"=="VHDX" ECHO. {S}OURCE-VHDX] [%VHDX_SOURCE_IMAGE%]
IF NOT DEFINED PROG_OPER IF "%SOURCE_SLOT_IMAGE%"=="WIM" SET "LIST_FMT=PLAIN"&&SET "LIST_DIR=%IMAGE_FOLDER%\*.WIM"&&ECHO   AVAILABLE WIM'S:&&CALL:FILE_LIST&&CALL:PAD_LINE
IF NOT DEFINED PROG_OPER IF "%SOURCE_SLOT_IMAGE%"=="WIM" ECHO. {S}OURCE-WIM]  [%WIM_SOURCE_IMAGE%] {I}ndex[%WIM_INDEX_IMAGE%] [Edition[%WIM_DESC_IMAGE%]
IF NOT DEFINED PROG_OPER CALL:PAD_LINE
IF NOT DEFINED PROG_OPER IF "%TARGET_SLOT_IMAGE%"=="VHDX" SET "LIST_FMT=PLAIN"&&SET "LIST_DIR=%IMAGE_FOLDER%\*.VHDX"&&ECHO   EXISTING VHDX'S:&&CALL:FILE_LIST&&CALL:PAD_LINE
IF NOT DEFINED PROG_OPER IF "%TARGET_SLOT_IMAGE%"=="VHDX" ECHO. {T}ARGET-VHDX] [%VHDX_TARGET_IMAGE%]      {G}o^^!  {V}Size [MB[%VHDX_SIZE_IMAGE%]
IF NOT DEFINED PROG_OPER IF "%TARGET_SLOT_IMAGE%"=="WIM" SET "LIST_FMT=PLAIN"&&SET "LIST_DIR=%IMAGE_FOLDER%\*.WIM"&&ECHO   EXISTING WIM'S:&&CALL:FILE_LIST&&CALL:PAD_LINE
IF NOT DEFINED PROG_OPER IF "%TARGET_SLOT_IMAGE%"=="WIM" ECHO. {T}ARGET-WIM]  [%WIM_TARGET_IMAGE%]      {G}o^^!     {Z}[X-LVL[%WIM_COMPRESS%]
IF "%PROG_OPER%"=="PICK" IF "%SOURCE_SLOT_IMAGE%"=="WIM" SET "LIST_FMT=NUMERAL"&&SET "LIST_DIR=%IMAGE_FOLDER%\*.WIM"&&ECHO   AVAILABLE WIM'S:&&CALL:FILE_LIST
IF "%PROG_OPER%"=="PICK" IF "%SOURCE_SLOT_IMAGE%"=="VHDX" SET "LIST_FMT=NUMERAL"&&SET "LIST_DIR=%IMAGE_FOLDER%\*.VHDX"&&ECHO   AVAILABLE VHDX'S:&&CALL:FILE_LIST
IF NOT DEFINED PROG_OPER CALL:PAD_LINE
IF DEFINED PROG_OPER CALL:PAD_LINE&&ECHO                    Enter File # To [%PROG_OPER%] {/}Type&&CALL:PAD_LINE
CALL:PAD_PREV&&CALL:MENU_SELECT&&IF DEFINED PROG_OPER CALL:FILE_LIST>NUL
IF NOT DEFINED PROG_OPER IF NOT DEFINED SELECT GOTO:PROG_MAIN
IF "%SELECT%"=="G" SET "PROG_OPER=GOTIME"
IF "%SELECT%"=="I" CALL:WIM_INDEX_IMAGE
IF "%SELECT%"=="S" SET "PROG_OPER=PICK"&&GOTO:IMAGEPROC_START
IF "%SELECT%"=="T" SET "PROG_OPER=PROMPT_SET"
IF "%SELECT%"=="V" SET "PROG_OPER=VSIZE"
IF "%SELECT%"=="X" CALL:IMAGEPROC_SLOT
IF "%SELECT%"=="Z" CALL:WIM_COMPRESS
IF "%PROG_OPER%"=="VSIZE" SET "PROMPT_SET=VHDX_SIZE_IMAGE"&&ECHO VHDX size?&&CALL:PROMPT_SET
IF "%PROG_OPER%"=="PICK" IF "%SOURCE_SLOT_IMAGE%"=="WIM" CALL SET "WIM_SOURCE_IMAGE=%SELECT%"&&SET "WIM_INDEX_IMAGE=1"&&CALL:WIM_INDEX_IMAGE_QUERY
IF "%PROG_OPER%"=="PICK" IF "%SOURCE_SLOT_IMAGE%"=="VHDX" CALL SET "VHDX_SOURCE_IMAGE=%SELECT%"
IF "%PROG_OPER%"=="GOTIME" SET "CAME_FROM=IMAGE"&&CALL:IMAGEPROC&&CALL:PAUSED
IF "%PROG_OPER%"=="PROMPT_SET" IF "%PROMPT_SET%"=="PART_SIZE_HOME_$ETUP" CALL:PROMPT_SET
IF "%PROG_OPER%"=="PROMPT_SET" IF "%TARGET_SLOT_IMAGE%"=="WIM" ECHO Name of WIM?&&CALL SET "PROMPT_SET=WIM_TARGET_IMAGE"&&CALL:PROMPT_SET_ANY
IF "%PROG_OPER%"=="PROMPT_SET" IF "%TARGET_SLOT_IMAGE%"=="WIM" IF DEFINED WIM_TARGET_IMAGE CALL SET "WIM_TARGET_IMAGE=%WIM_TARGET_IMAGE%.WIM"
IF "%PROG_OPER%"=="PROMPT_SET" IF "%TARGET_SLOT_IMAGE%"=="VHDX" ECHO Name of VHDX?&&CALL SET "PROMPT_SET=VHDX_TARGET_IMAGE"&&CALL:PROMPT_SET_ANY
IF "%PROG_OPER%"=="PROMPT_SET" IF "%TARGET_SLOT_IMAGE%"=="VHDX" IF DEFINED VHDX_TARGET_IMAGE CALL SET "VHDX_TARGET_IMAGE=%VHDX_TARGET_IMAGE%.VHDX"
IF DEFINED PROG_OPER SET "PROG_OPER="
GOTO:IMAGEPROC_START
:IMAGEPROC_SLOT
IF NOT DEFINED IMAGEPROC_SLOT SET "IMAGEPROC_SLOT=1"
SET /A IMAGEPROC_SLOT+=1
IF "%IMAGEPROC_SLOT%"=="4" SET "IMAGEPROC_SLOT=1"
IF "%IMAGEPROC_SLOT%"=="1" SET "SOURCE_SLOT_IMAGE=WIM"&&SET "TARGET_SLOT_IMAGE=VHDX"
IF "%IMAGEPROC_SLOT%"=="2" SET "SOURCE_SLOT_IMAGE=VHDX"&&SET "TARGET_SLOT_IMAGE=WIM"
IF "%IMAGEPROC_SLOT%"=="3" SET "SOURCE_SLOT_IMAGE=WIM"&&SET "TARGET_SLOT_IMAGE=WIM"
EXIT /B
:WIM_COMPRESS
SET SELECT=
IF NOT DEFINED WIM_XLVL_IMAGE SET "WIM_XLVL_IMAGE=1"
SET /A WIM_XLVL_IMAGE+=1
IF "%WIM_XLVL_IMAGE%"=="4" SET "WIM_XLVL_IMAGE=1"
IF "%WIM_XLVL_IMAGE%"=="1" SET "WIM_COMPRESS=FAST"
IF "%WIM_XLVL_IMAGE%"=="2" SET "WIM_COMPRESS=MAX"
IF "%WIM_XLVL_IMAGE%"=="3" SET "WIM_COMPRESS=NONE"
EXIT /B
:WIM_INDEX_IMAGE
SET "SELECT="&&SET "WIM_DESC_IMAGE="&&SET /A WIM_INDEX_IMAGE+=1
IF "%WIM_INDEX_IMAGE%"=="15" SET "WIM_INDEX_IMAGE=1"
IF EXIST "%IMAGE_FOLDER%\%WIM_SOURCE_IMAGE%" CALL:WIM_INDEX_IMAGE_QUERY
IF NOT DEFINED WIM_DESC_IMAGE SET "WIM_INDEX_IMAGE=1"&&CALL:WIM_INDEX_IMAGE_QUERY
EXIT /B
:WIM_INDEX_IMAGE_QUERY
Dism /Get-ImageInfo /ImageFile:"%IMAGE_FOLDER%\%WIM_SOURCE_IMAGE%" /Index:%WIM_INDEX_IMAGE% >"WIMINFO"
FOR /F "tokens=1-5 delims= " %%a in (WIMINFO) DO (IF "%%a"=="Edition" SET "WIM_DESC_IMAGE=%%c")
FOR /F "tokens=1-5 delims= " %%a in (WIMINFO) DO (IF "%%a"=="Languages" IF NOT "%%c"=="" SET "WIM_SOURCE_IMAGE=-SELECT-"&&SET "WIM_DESC_IMAGE=NULL")
DEL /Q /F "WIMINFO" >NUL
EXIT /B
REM IMAGEPROC_IMAGEPROC_IMAGEPROC_IMAGEPROC_IMAGEPROC_IMAGEPROC_
REM IMAGEPROC_IMAGEPROC_IMAGEPROC_IMAGEPROC_IMAGEPROC_IMAGEPROC_
:IMAGEPROC
REM IMAGEPROC_IMAGEPROC_IMAGEPROC_IMAGEPROC_IMAGEPROC_IMAGEPROC_
REM IMAGEPROC_IMAGEPROC_IMAGEPROC_IMAGEPROC_IMAGEPROC_IMAGEPROC_
CALL:PAD_LINE&&ECHO                        Image-Processing Start&&CALL:PAD_LINE&&SET "ERR_MSG="
IF "%CAME_FROM%"=="COMMAND" SET "SOURCE_SLOT=%SOURCE_SLOT_COMMAND%"&&SET "TARGET_SLOT=%TARGET_SLOT_COMMAND%"&&SET "WIM_SOURCE=%WIM_SOURCE_COMMAND%"&&SET "WIM_TARGET=%WIM_TARGET_COMMAND%"&&SET "VHDX_SOURCE=%VHDX_SOURCE_COMMAND%"&&SET "VHDX_TARGET=%VHDX_TARGET_COMMAND%"&&SET "VHDX_SIZE=%VHDX_SIZE_COMMAND%"&&SET "WIM_INDEX=%WIM_INDEX_COMMAND%"&&SET "WIM_COMPRESS=%WIM_COMPRESS_COMMAND%"
IF "%CAME_FROM%"=="IMAGE" SET "SOURCE_SLOT=%SOURCE_SLOT_IMAGE%"&&SET "TARGET_SLOT=%TARGET_SLOT_IMAGE%"&&SET "WIM_SOURCE=%WIM_SOURCE_IMAGE%"&&SET "WIM_TARGET=%WIM_TARGET_IMAGE%"&&SET "VHDX_SOURCE=%VHDX_SOURCE_IMAGE%"&&SET "VHDX_TARGET=%VHDX_TARGET_IMAGE%"&&SET "VHDX_SIZE=%VHDX_SIZE_IMAGE%"&&SET "WIM_INDEX=%WIM_INDEX_IMAGE%"&&SET "WIM_COMPRESS=%WIM_COMPRESS_IMAGE%"
IF "%TARGET_SLOT%"=="VHDX" IF EXIST "%IMAGE_FOLDER%\%VHDX_TARGET%" SET "ERR_MSG=Target %VHDX_TARGET% exists. Try another name or rename the existing file"&&GOTO:IMAGEPROC_CLEANUP
IF "%TARGET_SLOT%"=="WIM" IF EXIST "%IMAGE_FOLDER%\%WIM_TARGET%" SET "ERR_MSG=Target %WIM_TARGET% exists. Try another name or rename the existing file"&&GOTO:IMAGEPROC_CLEANUP
IF "%SOURCE_SLOT%"=="VHDX" IF "%VHDX_SOURCE%"=="-SELECT-" SET "ERR_MSG=Source %SOURCE_SLOT% not set"&&GOTO:IMAGEPROC_CLEANUP
IF "%TARGET_SLOT%"=="VHDX" IF "%VHDX_TARGET%"=="-SELECT-" SET "ERR_MSG=Target %TARGET_SLOT% not set"&&GOTO:IMAGEPROC_CLEANUP
IF "%SOURCE_SLOT%"=="WIM" IF "%WIM_SOURCE%"=="-SELECT-" SET "ERR_MSG=Source %SOURCE_SLOT% not set"&&GOTO:IMAGEPROC_CLEANUP
IF "%TARGET_SLOT%"=="WIM" IF "%WIM_TARGET%"=="-SELECT-" SET "ERR_MSG=Target %TARGET_SLOT% not set"&&GOTO:IMAGEPROC_CLEANUP
IF EXIST "V:\" SET "ERR_MSG=Drive letter V:\ can NOT be in use. Unmount the Vdisk in use."&&GOTO:IMAGEPROC_CLEANUP
IF NOT DEFINED WIM_INDEX SET "WIM_INDEX=1"
IF NOT DEFINED WIM_COMPRESS SET "WIM_COMPRESS=FAST"
SET "APPLYDIR_MASTER=V:"&&SET "CAPTUREDIR_MASTER=V:"&&SET "SCRATCHDIR_IMAGE=%PROG_TARGET%\Scratch"
CALL:VDISK_DETACH>NUL 2>&1
IF EXIST "%SCRATCHDIR_IMAGE%" DISM /cleanup-MountPoints>NUL 2>&1
IF EXIST "%SCRATCHDIR_IMAGE%" RD /S /Q "\\?\%SCRATCHDIR_IMAGE%">NUL 2>&1
IF NOT EXIST "%SCRATCHDIR_IMAGE%" MD "%SCRATCHDIR_IMAGE%">NUL 2>&1
CALL:EMPTY_TRASH>NUL 2>&1
IF "%SOURCE_SLOT%"=="VHDX" SET "VDISK=%IMAGE_FOLDER%\%VHDX_SOURCE%"
IF "%TARGET_SLOT%"=="VHDX" SET "VDISK=%IMAGE_FOLDER%\%VHDX_TARGET%"
IF "%SOURCE_SLOT%"=="WIM" SET "IMAGEFILE_SRC=%IMAGE_FOLDER%\%WIM_SOURCE%"
IF "%TARGET_SLOT%"=="WIM" SET "IMAGEFILE_TGT=%IMAGE_FOLDER%\%WIM_TARGET%"
IF "%SOURCE_SLOT%"=="WIM" IF "%TARGET_SLOT%"=="WIM" SET "VDISK=%SCRATCHDIR_IMAGE%\SCRATCH.VHDX"&&SET "VHDX_SIZE=20000"&&CALL:VDISK_CREATE
IF "%SOURCE_SLOT%"=="VHDX" IF "%TARGET_SLOT%"=="WIM" CALL:VDISK_ATTACH
IF "%SOURCE_SLOT%"=="WIM" IF "%TARGET_SLOT%"=="VHDX" SET "VHDX_SIZE=%VHDX_SIZE_IMAGE%"&&CALL:VDISK_CREATE
IF NOT EXIST "V:\" SET "ERR_MSG=Virtual Disk Error. If VHDX refuses mounting, reboot and try again."&&CALL:VDISK_DETACH&&GOTO:IMAGEPROC_CLEANUP
CALL:TITLECARD
IF NOT DEFINED WIM_DESC_IMAGE SET "WIM_DESC_IMAGE=$HAZZAM"
IF "%SOURCE_SLOT%"=="WIM" IF "%TARGET_SLOT%"=="VHDX" DISM /APPLY-IMAGE /IMAGEFILE:"%IMAGEFILE_SRC%" /INDEX:%WIM_INDEX% /APPLYDIR:"%APPLYDIR_MASTER%"
IF "%SOURCE_SLOT%"=="WIM" IF "%TARGET_SLOT%"=="WIM" DISM /APPLY-IMAGE /IMAGEFILE:"%IMAGEFILE_SRC%" /INDEX:%WIM_INDEX% /APPLYDIR:"%APPLYDIR_MASTER%"
IF "%TARGET_SLOT%"=="WIM" IF NOT EXIST "%APPLYDIR_MASTER%\*" CALL:VDISK_DETACH&&DEL /F /Q "%IMAGE_FOLDER%\%WIM_TARGET%">NUL 2>&1
IF "%TARGET_SLOT%"=="VHDX" IF NOT EXIST "%APPLYDIR_MASTER%\*" CALL:VDISK_DETACH&&DEL /F /Q "%IMAGE_FOLDER%\%VHDX_TARGET%">NUL 2>&1
IF NOT EXIST "%APPLYDIR_MASTER%\*" CALL:PAD_LINE&&SET "ERR_MSG=Source Extraction Error. If source refuses to extract, reboot and try again."&&GOTO:IMAGEPROC_CLEANUP
IF "%TARGET_SLOT%"=="WIM" DISM /CAPTURE-IMAGE /CAPTUREDIR:"%CAPTUREDIR_MASTER%" /IMAGEFILE:"%IMAGEFILE_TGT%" /COMPRESS:%WIM_COMPRESS% /NAME:%WIM_DESC_IMAGE%
CALL:VDISK_DETACH>NUL 2>&1
:IMAGEPROC_CLEANUP
IF "%CAME_FROM%"=="IMAGE" ECHO &&SET "CAME_FROM="
IF EXIST "%SCRATCHDIR_IMAGE%" DISM /cleanup-MountPoints>NUL 2>&1
IF EXIST "%SCRATCHDIR_IMAGE%" RD /S /Q "\\?\%SCRATCHDIR_IMAGE%">NUL 2>&1
IF DEFINED ERR_MSG ECHO  %ERR_MSG%
ECHO.&&CALL:PAD_LINE&&ECHO                       Image-Processing Complete&&CALL:PAD_LINE
EXIT /B
REM DISKMGR_DISKMGR_DISKMGR_DISKMGR_DISKMGR_DISKMGR_DISKMGR_
:DISKMGR_START
REM DISKMGR_DISKMGR_DISKMGR_DISKMGR_DISKMGR_DISKMGR_DISKMGR_
@ECHO OFF&&SET "DISK_LETTER="&&SET "DISK_MSG="&&CALL:COLOR_CHK
CLS&&CALL:TITLEGEN&&IF DEFINED PROG_OPER CALL:TITLECARD
IF NOT DEFINED BOOT_PRIORITY SET "BOOT_PRIORITY=NULL"
CALL:PAD_LINE&&ECHO                             Disk Management&&CALL:PAD_LINE
IF NOT DEFINED PROG_OPER CALL:DISK_QUERY&&CALL:PAD_LINE
IF NOT DEFINED PROG_OPER IF NOT "%BOOT_IMAGE%"=="NONE" ECHO  [DISK] {B}oot^^! {I}nspect {E}rase {#}ChangeUID {U}SB {*}NextBoot[%BOOT_PRIORITY%]&&CALL:PAD_LINE
IF NOT DEFINED PROG_OPER IF "%BOOT_IMAGE%"=="NONE" ECHO  [DISK]  {I}nspect  {E}rase  {#}Change UID  {U}SB {*}NextBoot[%BOOT_PRIORITY%]&&CALL:PAD_LINE
IF NOT DEFINED PROG_OPER ECHO  [PARTITION]  {C}reate  {D}elete  {F}ormat  {M}ount/Unmount  {L}ock&&CALL:PAD_LINE
CALL:PAD_PREV&&CALL:MENU_SELECT&&IF DEFINED PROG_OPER CALL:FILE_LIST>NUL
IF NOT DEFINED PROG_OPER IF NOT DEFINED SELECT GOTO:PROG_MAIN
IF DEFINED PROG_OPER IF NOT DEFINED SELECT SET "PROG_OPER="
IF "%SELECT%"=="*" SET "PROG_OPER=BOOT_PRIORITY"
IF "%SELECT%"=="#" SET "PROG_OPER=DISKMGR_CHANGEID"
IF "%SELECT%"=="C" SET "PROG_OPER=DISKMGR_CREATE"
IF "%SELECT%"=="D" SET "PROG_OPER=DISKMGR_DELETE"
IF "%SELECT%"=="F" SET "PROG_OPER=DISKMGR_FORMAT"
IF "%SELECT%"=="L" SET "PROG_OPER=DISKMGR_LOCK"
IF "%SELECT%"=="U" SET "PROG_OPER=DISKMGR_USBPLUG"
IF "%SELECT%"=="I" SET "PROG_OPER=DISKMGR_INSPECT"
IF "%SELECT%"=="M" SET "PROG_OPER=DISKMGR_MOUNT"
IF "%SELECT%"=="E" SET "PROG_OPER=DISKMGR_ERASE"
IF "%SELECT%"=="B" IF NOT "%BOOT_IMAGE%"=="NONE" GOTO:$ETUP_START
IF "%SELECT%"=="$" IF NOT "%BOOT_IMAGE%"=="NONE" GOTO:$ETUP_START
IF "%PROG_OPER%"=="BOOT_PRIORITY" IF "%BOOT_PRIORITY%"=="NULL" SET "BOOT_TARGET=GET"&&CALL:BOOT_TARGET_TOGGLE&&SET "PROG_OPER="&&GOTO:DISKMGR_START
IF "%PROG_OPER%"=="BOOT_PRIORITY" IF "%BOOT_PRIORITY%"=="RECOVERY" SET "BOOT_TARGET=VHDX"&&CALL:BOOT_TARGET_TOGGLE&&SET "PROG_OPER="&&GOTO:DISKMGR_START
IF "%PROG_OPER%"=="BOOT_PRIORITY" IF "%BOOT_PRIORITY%"=="VHDX" SET "BOOT_TARGET=RECOVERY"&&CALL:BOOT_TARGET_TOGGLE&&SET "PROG_OPER="&&GOTO:DISKMGR_START
IF "%PROG_OPER%"=="BOOT_GET" SET "BOOT_TARGET=GET"&&CALL:BOOT_TARGET_TOGGLE&&SET "PROG_OPER="&&GOTO:DISKMGR_START
IF "%PROG_OPER%"=="DISKMGR_USBPLUG" RunDll32.exe shell32.dll,Control_RunDLL hotplug.dll&&SET "PROG_OPER="
IF DEFINED PROG_OPER CLS&&CALL:PAD_LINE&&ECHO                            [%PROG_OPER%]&&CALL:PAD_LINE&&CALL:DISK_QUERY&&CALL:PAD_LINE
IF "%PROG_OPER%"=="DISKMGR_CREATE" ECHO                            Which Disk {#}?&&CALL:PAD_LINE&&CALL SET "PROMPT_SET=DISK_NUMBER"&&CALL:PROMPT_SET
IF "%PROG_OPER%"=="DISKMGR_CREATE" IF DEFINED DISK_NUMBER CALL:PAD_LINE&&ECHO                        Partition Size in MB?&&CALL:PAD_LINE&&ECHO (Enter) To Use All Available Free Space&&CALL SET "PROMPT_SET=PART_SIZE"&&CALL:PROMPT_SET&&ECHO Starting %PROG_OPER%...&&CALL:DISKMGR_CREATE
IF "%PROG_OPER%"=="DISKMGR_CREATE" IF NOT DEFINED DISK_NUMBER SET "PROG_OPER="
IF "%PROG_OPER%"=="DISKMGR_CHANGEID" ECHO                  $HAZZAM BOOT-DRIVES STORE THE DISK-ID&&ECHO.           CHANGING THIS WILL BREAK THE HOME-DRIVE DETECTION&&ECHO      IF TWO DISK-ID'S ARE MATCHING YOU COULD ERASE THE WRONG DRIVE&&CALL:PAD_LINE&&ECHO.                             Which Disk {#}?&&CALL:PAD_LINE&&CALL SET "PROMPT_SET=DISK_NUMBER"&&CALL:PROMPT_SET
IF "%PROG_OPER%"=="DISKMGR_CHANGEID" IF DEFINED DISK_NUMBER CALL:PAD_LINE&&ECHO                               NEW DISK-ID?&&CALL:PAD_LINE&&CALL SET "PROMPT_SET=GET_DISK_ID"&&CALL:PROMPT_SET&&ECHO Starting %PROG_OPER%...&&CALL:DISKMGR_CHANGEID
IF "%PROG_OPER%"=="DISKMGR_CHANGEID" IF NOT DEFINED DISK_NUMBER SET "PROG_OPER="
IF "%PROG_OPER%"=="DISKMGR_FORMAT" ECHO                            Which Disk {#}?&&CALL:PAD_LINE&&CALL SET "PROMPT_SET=DISK_NUMBER"&&CALL:PROMPT_SET
IF "%PROG_OPER%"=="DISKMGR_FORMAT" IF DEFINED DISK_NUMBER CALL:PAD_LINE&&ECHO                          Which Partition {#}?&&CALL:PAD_LINE&&CALL SET "PROMPT_SET=PART_NUMBER"&&CALL:PROMPT_SET&&ECHO Starting %PROG_OPER%...&&CALL:DISKMGR_FORMAT
IF "%PROG_OPER%"=="DISKMGR_FORMAT" IF NOT DEFINED DISK_NUMBER SET "PROG_OPER="
IF "%PROG_OPER%"=="DISKMGR_DELETE" ECHO                            Which Disk {#}?&&CALL:PAD_LINE&&CALL SET "PROMPT_SET=DISK_NUMBER"&&CALL:PROMPT_SET
IF "%PROG_OPER%"=="DISKMGR_DELETE" IF DEFINED DISK_NUMBER CALL:PAD_LINE&&ECHO                          Which Partition {#}?&&CALL:PAD_LINE&&CALL SET "PROMPT_SET=PART_NUMBER"&&CALL:PROMPT_SET&&ECHO Starting %PROG_OPER%...&&CALL:DISKMGR_DELETE
IF "%PROG_OPER%"=="DISKMGR_DELETE" IF NOT DEFINED DISK_NUMBER SET "PROG_OPER="
IF "%PROG_OPER%"=="DISKMGR_INSPECT" ECHO                            Which Disk {#}?&&CALL:PAD_LINE&&CALL SET "PROMPT_SET=DISK_NUMBER"&&CALL:PROMPT_SET
IF "%PROG_OPER%"=="DISKMGR_INSPECT" IF DEFINED DISK_NUMBER CLS&&CALL:DISKMGR_INSPECT
IF "%PROG_OPER%"=="DISKMGR_INSPECT" IF NOT DEFINED DISK_NUMBER SET "PROG_OPER="
IF "%PROG_OPER%"=="DISKMGR_LOCK" ECHO                            Which Disk {#}?&&CALL:PAD_LINE&&CALL SET "PROMPT_SET=DISK_NUMBER"&&CALL:PROMPT_SET
IF "%PROG_OPER%"=="DISKMGR_LOCK" IF DEFINED DISK_NUMBER CALL:PAD_LINE&&ECHO Which Partition {#}?&&CALL:PAD_LINE&&CALL SET "PROMPT_SET=PART_NUMBER"&&CALL:PROMPT_SET&&ECHO Starting %PROG_OPER%...&&CALL:DISKMGR_LOCK
IF "%PROG_OPER%"=="DISKMGR_LOCK" IF NOT DEFINED DISK_NUMBER SET "PROG_OPER="
IF "%PROG_OPER%"=="DISKMGR_MOUNT" ECHO                          Which Drive Letter?&&CALL:PAD_LINE&&CALL SET "PROMPT_SET=DISK_LETTER"&&CALL:PROMPT_SET
IF "%PROG_OPER%"=="DISKMGR_MOUNT" IF NOT DEFINED DISK_LETTER SET "PROG_OPER="
IF "%PROG_OPER%"=="DISKMGR_MOUNT" IF EXIST "%DISK_LETTER%:\" CALL:PAD_LINE&&ECHO  UNMOUNTING [%DISK_LETTER%:\]&&CALL:PAD_LINE&&CALL:DISKMGR_UNMOUNT&&SET "PROG_OPER="
IF "%PROG_OPER%"=="DISKMGR_MOUNT" IF NOT EXIST "%DISK_LETTER%:\" CALL:PAD_LINE&&ECHO                            Which Disk {#}?&&CALL:PAD_LINE&&CALL SET "PROMPT_SET=DISK_NUMBER"&&CALL:PROMPT_SET
IF "%PROG_OPER%"=="DISKMGR_MOUNT" IF "%DISK_NUMBER%" GEQ "0" IF NOT EXIST "%DISK_LETTER%:\" CALL:PAD_LINE&&ECHO                          Which Partition {#}?&&CALL:PAD_LINE&&CALL SET "PROMPT_SET=PART_NUMBER"&&CALL:PROMPT_SET&&CALL:PAD_LINE&&ECHO  MOUNTING [%DISK_LETTER%:\]&&CALL:PAD_LINE&&CALL:DISKMGR_MOUNT&&SET "PROG_OPER="
IF "%PROG_OPER%"=="DISKMGR_ERASE" ECHO                            Which Disk {#}?&&CALL:PAD_LINE&&CALL SET "PROMPT_SET=DISK_NUMBER"&&CALL:PROMPT_SET&&ECHO Starting %PROG_OPER%...&&CALL:DISKMGR_ERASE
IF "%PROG_OPER%"=="DISKMGR_ERASE" IF NOT DEFINED DISK_NUMBER SET "PROG_OPER="
IF EXIST "DPQUERY" DEL /Q /F "DPQUERY">NUL 2>&1
IF EXIST "%TEMP%\DISK_TARGET" DEL /Q /F "%TEMP%\DISK_TARGET">NUL 2>&1
IF DEFINED DISK_MSG ECHO %DISK_MSG%&&ECHO.
IF DEFINED PROG_OPER SET "PROG_OPER="&&CALL:PAD_LINE&&ECHO	                      End of Disk-Part Operation&&CALL:PAD_LINE&&CALL:PAUSED
GOTO:DISKMGR_START
REM PART_CREATE_PART_CREATE_PART_CREATE_PART_CREATE_PART_CREATE_PART_CREATE
:PART_CREATE
REM PART_CREATE_PART_CREATE_PART_CREATE_PART_CREATE_PART_CREATE_PART_CREATE
CALL:PART_UNMOUNT
CALL:DISKMGR_ERASE
SET /A PART_CNT+=1
IF "%PART_CNT%" NEQ "3" SET "DEPLOY_MODE="
(ECHO.select disk %DISK_NUMBER%&&ECHO.create partition EFI size=1024&&ECHO.format quick fs=fat32 label="ESP"&&ECHO.assign letter=U noerr&&ECHO.create partition primary&&ECHO.format quick fs=ntfs&&ECHO.Exit)>"DPQUERY"&&DISKPART /s "DPQUERY"
(ECHO.select disk %DISK_NUMBER%&&ECHO.select partition 2&&ECHO.assign letter=S noerr&&ECHO.Exit)>"DPQUERY"&&DISKPART /s "DPQUERY"
IF EXIST "U:\" IF EXIST "S:\" EXIT /B
CALL:DISKMGR_ERASE
IF "%PART_CNT%" EQU "3" SET "DEPLOY_MODE=1"&&SET "BOOT_MSG=Drive incompatible, reverted to deploy-only drive."
(ECHO.select disk %DISK_NUMBER%&&ECHO.create partition primary size=1024&&ECHO.format quick fs=fat32 label="ESP"&&ECHO.assign letter=U noerr&&ECHO.create partition primary&&ECHO.format quick fs=ntfs&&ECHO.Exit)>"DPQUERY"&&DISKPART /s "DPQUERY"
IF "%PART_CNT%" LEQ "2" (ECHO.select disk %DISK_NUMBER%&&ECHO.select partition 1&&ECHO.set id=c12a7328-f81f-11d2-ba4b-00a0c93ec93b override&&ECHO.Exit)>"DPQUERY"&&DISKPART /s "DPQUERY"
(ECHO.select disk %DISK_NUMBER%&&ECHO.select partition 2&&ECHO.assign letter=S noerr&&ECHO.Exit)>"DPQUERY"&&DISKPART /s "DPQUERY"
IF EXIST "U:\" IF EXIST "S:\" EXIT /B
IF "%PART_CNT%" EQU "4" ECHO The drive is currently in use or incompatible. Continue to try?&&ECHO  {Z}Continue {Enter}Abort&&CALL SET "PROMPT_SET=ARBIT123"&&CALL:PROMPT_SET
IF NOT "%ARBIT123%"=="Z" SET "PART_ERR=1"
IF "%ARBIT123%"=="Z" SET "PART_CNT=0"&&SET "ARBIT123="
IF DEFINED PART_ERR EXIT /B
GOTO:PART_CREATE
:DISKMGR_ERASE
IF NOT DEFINED DISK_NUMBER EXIT /B
FOR %%a in (0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15) DO (IF "%DISK_NUMBER%"=="%%a" CALL SET "GET_DISK_ID=%%DISKID_%%a%%")
(ECHO.select disk %DISK_NUMBER%&&ECHO.clean&&ECHO.convert gpt&&ECHO.select partition 1&&ECHO.delete partition override&&ECHO.Exit)>"DPQUERY"&&DISKPART /s "DPQUERY">NUL
(ECHO.select disk %DISK_NUMBER%&&ECHO.select partition 1&&ECHO.Assign letter=T noerr&&ECHO.Exit)>"DPQUERY"&&Diskpart /s "DPQUERY">NUL 2>&1
IF EXIST "T:\" (ECHO.select disk %DISK_NUMBER%&&ECHO.clean&&ECHO.convert gpt&&ECHO.select partition 1&&ECHO.delete partition override&&ECHO.Exit)>"DPQUERY"&&DISKPART /s "DPQUERY">NUL
CALL:DISKMGR_CHANGEID>NUL 2>&1
IF NOT EXIST "T:\" SET "DISK_MSG=All partitions on Disk %DISK_NUMBER% have been erased."
IF EXIST "T:\" SET "DISK_MSG=Disk %DISK_NUMBER% is currently in use - unplug disk - reboot into Windows - replug and try again."
IF EXIST "T:\" (ECHO.select VOLUME T&&ECHO.Remove letter=T noerr&&ECHO.Exit)>"DPQUERY"&&DISKPART /s "DPQUERY">NUL 2>&1
EXIT /B
:DISKMGR_INSPECT
IF NOT DEFINED DISK_NUMBER EXIT /B
(ECHO.select disk %DISK_NUMBER%&&ECHO.detail disk&&ECHO.list partition&&ECHO.Exit)>"DPQUERY"&&DISKPART /s "DPQUERY"&&ECHO 
EXIT /B
:DISKMGR_MOUNT
IF NOT DEFINED DISK_NUMBER EXIT /B
(ECHO.select disk %DISK_NUMBER%&&ECHO.select partition %PART_NUMBER%&&ECHO.Assign letter=%DISK_LETTER% noerr&&ECHO.Exit)>"DPQUERY"&&Diskpart /s "DPQUERY">NUL 2>&1
IF NOT EXIST "%DISK_LETTER%:\" (ECHO.select disk %DISK_NUMBER%&&ECHO.select partition %PART_NUMBER%&&ECHO.gpt attributes=0x8000000000000000&&ECHO.Exit)>"DPQUERY"&&DISKPART /s "DPQUERY">NUL 2>&1
IF NOT EXIST "%DISK_LETTER%:\" (ECHO.select disk %DISK_NUMBER%&&ECHO.select partition %PART_NUMBER%&&ECHO.Assign letter=%DISK_LETTER% noerr&&ECHO.Exit)>"DPQUERY"&&DISKPART /s "DPQUERY">NUL 2>&1
IF EXIST "%DISK_LETTER%:\" SET "DISK_MSG=Partition %PART_NUMBER% on Disk %DISK_NUMBER% has been assigned letter %DISK_LETTER%."
IF NOT EXIST "%DISK_LETTER%:\" SET "DISK_MSG=ERROR: Partition %PART_NUMBER% on Disk %DISK_NUMBER% was not assigned letter %DISK_LETTER%."
ECHO 
EXIT /B
:DISKMGR_UNMOUNT
(ECHO.select VOLUME %DISK_LETTER%&&ECHO.Remove letter=%DISK_LETTER% noerr&&ECHO.Exit)>"DPQUERY"&&DISKPART /s "DPQUERY"&&ECHO 
EXIT /B
:DISKMGR_CREATE
IF NOT DEFINED DISK_NUMBER EXIT /B
IF NOT DEFINED PART_SIZE (ECHO.select disk %DISK_NUMBER%&&ECHO.create partition primary&&ECHO.format quick fs=ntfs&&ECHO.Exit)>"DPQUERY"&&DISKPART /s "DPQUERY"&&ECHO 
IF DEFINED PART_SIZE (ECHO.select disk %DISK_NUMBER%&&ECHO.create partition primary size=%PART_SIZE%&&ECHO.format quick fs=ntfs&&ECHO.Exit)>"DPQUERY"&&DISKPART /s "DPQUERY"&&ECHO 
EXIT /B
:DISKMGR_DELETE
IF NOT DEFINED DISK_NUMBER EXIT /B
(ECHO.select disk %DISK_NUMBER%&&ECHO.select partition %PART_NUMBER%&&ECHO.delete partition override&&ECHO.Exit)>"DPQUERY"&&DISKPART /s "DPQUERY"&&ECHO 
EXIT /B
:DISKMGR_CHANGEID
IF NOT DEFINED DISK_NUMBER EXIT /B
CALL:CHECK_UID>NUL 2>&1
IF DEFINED UID_FAIL CALL:MAKE_UID
(ECHO.select disk %DISK_NUMBER%&&ECHO.uniqueid disk id=%GET_DISK_ID%&&ECHO.Exit)>"DPQUERY"&&DISKPART /s "DPQUERY"&&ECHO 
EXIT /B
:DISKMGR_FORMAT
IF NOT DEFINED DISK_NUMBER EXIT /B
(ECHO.select disk %DISK_NUMBER%&&ECHO.select partition %PART_NUMBER%&&ECHO.format quick fs=ntfs override&&ECHO.Exit)>"DPQUERY"&&DISKPART /s "DPQUERY"&&ECHO 
EXIT /B
:DISKMGR_LOCK
IF NOT DEFINED DISK_NUMBER EXIT /B
(ECHO.select disk %DISK_NUMBER%&&ECHO.select partition %PART_NUMBER%&&ECHO.gpt attributes=0x4000000000000001&&ECHO.Exit)>"DPQUERY"&&DISKPART /s "DPQUERY"&&ECHO 
EXIT /B
:CHECK_UID
SET "UID_FAIL="&&SET "UID_CNT="&&FOR /F "DELIMS=" %%G in ('CMD.EXE /D /U /C ECHO %GET_DISK_ID%^| FIND /V ""') do (CALL SET /A UID_CNT+=1)
IF NOT "%UID_CNT%"=="36" SET "UID_FAIL=1"
EXIT /B
:MAKE_UID
IF NOT DEFINED ARBIT_CND SET "ARBIT_CND=1"&&SET "ARBIT_CNT="
SET /A ARBIT_CNT+=1
CALL:FOR_CLEANER&&SET "BETWEENER=-"&&SET "FOR_CASTER=1 2 3 4 5 6 7 8"&&CALL:FOR_CASTER&&CALL:BETWEENER
SET "FOR_CASTER=1 2 3 4"&&CALL:FOR_CASTER&&CALL:BETWEENER&&SET "FOR_CASTER=1 2 3 4"&&CALL:FOR_CASTER&&CALL:BETWEENER&&SET "FOR_CASTER=1 2 3 4"&&CALL:FOR_CASTER&&CALL:BETWEENER&&SET "FOR_CASTER=A B C D E F G H I"&&CALL:FOR_CASTER&&SET "BETWEENER=123"&&CALL:BETWEENER
SET "COUNTER_CNT="&&FOR /F "delims=" %%G in ('CMD.EXE /D /U /C ECHO %NEW_ACCUM%^| FIND /V ""') do (CALL:COUNTER_CNT)
IF "%ARBIT_CNT%"=="25" SET "ARBIT_CND="&&EXIT /B
IF NOT "%COUNTER_CNT%"=="36" GOTO:MAKE_UID
SET "ARBIT_CND="&&SET "GET_DISK_ID=%NEW_ACCUM%"
EXIT /B
:FOR_CLEANER
SET "NEW_ACCUM="&&SET "COUNTER_CNT="&&SET "FOR_CASTER="&&SET "RNDTMP="&&SET "BETWEENER="
EXIT /B
:FOR_CASTER
FOR %%a in (%FOR_CASTER%) DO (CALL:COUNTER_CNT&&CALL:RANDOMIZER&&CALL:ACCUMULATOR)
EXIT /B
:COUNTER_CNT
CALL SET /A COUNTER_CNT+=1
EXIT /B
:BETWEENER
CALL SET NEW_ACCUM=%NEW_ACCUM%%BETWEENER%
EXIT /B
:ACCUMULATOR
CALL SET NEW_ACCUM=%NEW_ACCUM%%RNDTMP%
EXIT /B
:RANDOMIZER
CALL SET "RNDTMP=%RANDOM%%RANDOM%"&&SET "RNDTMP=!RNDTMP:~5,5!"&&SET "RNDTMP=!RNDTMP:~1,1!"
IF "%RNDTMP%"=="0" GOTO:RANDOMIZER
IF "%RNDTMP%"=="" GOTO:RANDOMIZER
EXIT /B
REM DISK_MENU_DISK_MENU_DISK_MENU_DISK_MENU_DISK_MENU_DISK_MENU_DISK_MENU
:DISK_MENU
REM DISK_MENU_DISK_MENU_DISK_MENU_DISK_MENU_DISK_MENU_DISK_MENU_DISK_MENU
CLS&&CALL:MENU_HEAD_GENERIC&&CALL:DISK_QUERY&&SET "DISK_MENU_LBL=Target"&&SET "DISK_CONFLICT="&&IF DEFINED PROG_OPER SET "DISK_MENU_LBL=%PROG_OPER%"
CALL:PAD_LINE&&ECHO                        Which Disk {#} To %DISK_MENU_LBL%?&&CALL:PAD_LINE&&CALL:PAD_PREV
IF DEFINED DISK_NUMBER SET "DISK_NUMBER_CUR=%DISK_NUMBER%"
SET "DISK_TARGET="&SET "SELECT="&&SET /P "SELECT=$>>"
CALL:EXIT_FLAGGER
IF "%EXIT_FLAGGER%"=="1" EXIT /B
FOR %%a in (0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15) DO (IF "%SELECT%"=="%%a" CALL SET "DISK_TARGET=%%DISKID_%%a%%"&&CALL SET "DISK_TYPE=%%DISKTYPE_%%a%%")
IF "%DISK_TARGET%"=="%DISK_HOME%" GOTO:DISK_MENU
IF "%DISK_TARGET%"=="00000000-0000-0000-0000-000000000000" SET "DISK_CONFLICT=1"
IF "%DISK_TARGET%"=="00000000" SET "DISK_CONFLICT=1"
IF "%DISK_TARGET%"=="0000-0000" SET "DISK_CONFLICT=1"
IF DEFINED DISK_CONFLICT ECHO ERASE DISK FIRST&&PAUSE&&GOTO:DISK_MENU
IF "%DISK_TARGET%"=="" GOTO:DISK_MENU
IF NOT DEFINED DISK_TARGET GOTO:DISK_MENU
CALL:DISK_QUERY>NUL
IF NOT DEFINED DISK_NUMBER GOTO:DISK_MENU
ECHO.%DISK_TARGET%>"%TEMP%\DISK_TARGET"
ECHO [DISK[%DISK_NUMBER%] [ID[%DISK_TARGET%] is the target disk
EXIT /B
REM DISK_QUERY_DISK_QUERY_DISK_QUERY_DISK_QUERY_DISK_QUERY_DISK_QUERY
:DISK_QUERY
REM DISK_QUERY_DISK_QUERY_DISK_QUERY_DISK_QUERY_DISK_QUERY_DISK_QUERY
(ECHO.LIST DISK&&ECHO.Exit)>DPQUERY1&&DISKPART /s DPQUERY1>DPQUERY2
FOR /F "tokens=2,4 skip=8 delims= " %%a in (DPQUERY2) DO ((ECHO.SELECT DISK %%a&&ECHO.DETAIL DISK&&ECHO.Exit)>DPQUERY3&&DISKPART /s DPQUERY3>DPQUERY4
IF NOT "%%a"=="DiskPart..." FOR /F "tokens=1-5 skip=7 delims={}: " %%1 in (DPQUERY4) DO (IF "%%1"=="Type" IF "%%2"=="File" SET VSKIP%%a=%%a))
FOR /F "tokens=2,4 skip=8 delims= " %%a in (DPQUERY2) DO (SET DISK%%a=&&SET DISKVENDOR_%%a=
IF NOT DEFINED VSKIP%%a (ECHO.SELECT DISK %%a&&ECHO.DETAIL DISK&&ECHO.LIST PARTITION&&ECHO.Exit)>DPQUERY3&&DISKPART /s DPQUERY3>DPQUERY4&&SET PAD_SIZE=4&&CALL:PAD_LINE
IF NOT DEFINED VSKIP%%a IF NOT "%%a"=="DiskPart..." FOR /F "tokens=1-9 skip=7 delims={}: " %%1 in (DPQUERY4) DO (
IF NOT DEFINED DISK%%a SET DISK%%a=%%a&&ECHO  DISK ^{%%a^}
IF NOT DEFINED DISKVENDOR_%%a SET DISKVENDOR_%%a=%%1 %%2 %%3&&ECHO VENDOR = %%1 %%2 %%3
IF "%%1"=="Type" SET "DISKTYPE_%%a=%%2"&&ECHO  Type  = %%2
IF "%%1 %%2"=="Disk ID" SET "DISKID_%%a=%%3"&&ECHO  UID   = %%3&&IF "%%3"=="%DISK_TARGET%" SET DISK_NUMBER=%%a
IF "%%1 %%2 %%3"=="Pagefile Disk Yes" ECHO *Active Pagefile*
IF "%%1"=="Partition" IF NOT "%%2"=="###" ECHO  {%%1 %%2}&&ECHO  Size  = %%4 %%5
IF "%%3"=="S" SET "CURRENT_HOME=%%2"))
SET PAD_SIZE=4&&CALL:PAD_LINE
DEL /Q /F "DPQUERY*">NUL 2>&1
EXIT /B
:EFI_MOUNT
IF NOT DEFINED DISK_TARGET ECHO DISK ID ERROR&&EXIT /B
(ECHO.select VOLUME U&&ECHO.Remove letter=U noerr&&ECHO.Exit)>"DPQUERY"&&Diskpart /s "DPQUERY">NUL 2>&1
(ECHO.select disk %DISK_NUMBER%&&ECHO.select partition 1&&ECHO.gpt attributes=0x8000000000000000&&ECHO.Exit)>"DPQUERY"&&DISKPART /s "DPQUERY">NUL 2>&1
(ECHO.select disk %DISK_NUMBER%&&ECHO.select partition 1&&ECHO.Assign letter=U noerr&&ECHO.Exit)>"DPQUERY"&&Diskpart /s "DPQUERY">NUL 2>&1
DEL /Q /F "DPQUERY">NUL 2>&1
IF NOT EXIST "U:\EFI" ECHO EFI EMPTY OR NOT MOUNTED
EXIT /B
:PART_UNMOUNT
CALL:EFI_UNMOUNT
DEL /Q /F "DPQUERY">NUL 2>&1
IF EXIST "S:\" CALL:REASSIGN_LETTER
DEL /Q /F "DPQUERY">NUL 2>&1
EXIT /B
:EFI_UNMOUNT
(ECHO.select VOLUME U&&ECHO.Remove letter=U noerr&&ECHO.Exit)>"DPQUERY"&&Diskpart /s "DPQUERY">NUL 2>&1
(ECHO.select disk %DISK_NUMBER%&&ECHO.select partition 1&&ECHO.gpt attributes=0x4000000000000001&&ECHO.Exit)>"DPQUERY"&&DISKPART /s "DPQUERY">NUL 2>&1
DEL /Q /F "DPQUERY">NUL 2>&1
EXIT /B
:HOME_AUTO
SET "HOME_MOUNT="&&CLS&&ECHO Querying disks...
IF EXIST "%PROG_FOLDER%\DISK_TARGET" SET /P DISK_HOME=<"%PROG_FOLDER%\DISK_TARGET"
IF EXIST "%PROG_FOLDER%\DISK_TARGET" SET /P DISK_TARGET=<"%PROG_FOLDER%\DISK_TARGET"
IF EXIST "S:\" CALL:REASSIGN_LETTER
IF EXIST "%PROG_FOLDER%\DISK_TARGET" SET /P DISK_TARGET=<"%PROG_FOLDER%\DISK_TARGET"
CALL:DISK_QUERY>NUL 2>&1
IF NOT EXIST "S:\" (ECHO.select disk %DISK_NUMBER%&&ECHO.select partition 2&&ECHO.Assign letter=S noerr&&ECHO.Exit)>"DPQUERY"&&Diskpart /s "DPQUERY">NUL 2>&1
IF NOT EXIST "S:\" (ECHO.select disk %DISK_NUMBER%&&ECHO.select partition 2&&ECHO.gpt attributes=0x8000000000000000&&ECHO.Exit)>"DPQUERY"&&DISKPART /s "DPQUERY">NUL 2>&1
IF NOT EXIST "S:\" (ECHO.select disk %DISK_NUMBER%&&ECHO.select partition 2&&ECHO.Assign letter=S noerr&&ECHO.Exit)>"DPQUERY"&&Diskpart /s "DPQUERY">NUL 2>&1
DEL /Q /F "DPQUERY">NUL 2>&1
IF EXIST "S:\" IF NOT EXIST "S:\$" MD "S:\$">NUL 2>&1
IF EXIST "S:\$" IF NOT EXIST "S:\$\$haZZam.cmd" IF EXIST "X:\$\$haZZam.cmd" COPY "X:\$\$haZZam.cmd" "S:\$">NUL 2>&1
IF NOT EXIST "S:\$" IF NOT DEFINED ARBIT_FLAG SET "ARBIT_FLAG=1"&&GOTO:HOME_AUTO
SET "PROG_SOURCE=S:\$"&&SET "PROG_TARGET=S:\$"&&SET "HOME_MOUNT=YES"&&SET "ARBIT_FLAG="
IF EXIST "S:\$" CALL:SETS_LOAD>NUL 2>&1
EXIT /B
:HOME_MANUAL
CALL:DISK_MENU
ECHO %DISK_TARGET%>"%PROG_FOLDER%\DISK_TARGET"
CALL:HOME_AUTO>NUL 2>&1
EXIT /B
:REASSIGN_LETTER
CALL:DISK_QUERY>NUL 2>&1
FOR %%G in (Q P O N M L K J I H G F E D) DO (IF NOT EXIST "%%G:\" SET "NXT_LETTER=%%G")
(ECHO.select VOLUME S&&ECHO.Remove letter=S noerr&&ECHO.Exit)>"DPQUERY"&&Diskpart /s "DPQUERY">NUL 2>&1
(ECHO.select VOLUME %CURRENT_HOME%&&ECHO.assign letter=%NXT_LETTER% noerr&&ECHO.Exit)>"DPQUERY"&&DISKPART /s "DPQUERY">NUL 2>&1
DEL /Q /F "DPQUERY">NUL 2>&1
EXIT /B
REM VDISK_CREATE_VDISK_CREATE_VDISK_CREATE_VDISK_CREATE_VDISK_CREATE
:VDISK_CREATE
REM VDISK_CREATE_VDISK_CREATE_VDISK_CREATE_VDISK_CREATE_VDISK_CREATE
IF NOT DEFINED VDISK_LETTER_OVER SET "VDISK_LETTER=V"
SET "VDISK_LETTER_BAK=%VDISK_LETTER%"&&CALL:VDISK_DETACH>NUL 2>&1
SET "VDISK_LETTER=%VDISK_LETTER_BAK%"
IF DEFINED NEW_VDISK SET "VHDX_LABEL=%NEW_VDISK%"
IF NOT DEFINED VHDX_SIZE SET "VHDX_SIZE=25600"
IF NOT DEFINED VHDX_LABEL SET "VHDX_LABEL=VHDX%VHDX_SLOT%"
DEL /Q /F "%VDISK%">NUL 2>&1
(ECHO.create vdisk file="%VDISK%" maximum=%VHDX_SIZE% type=expandable&&ECHO.Select vdisk file="%VDISK%"&&ECHO.Attach vdisk&&ECHO.create partition primary&&ECHO.select partition 1&&ECHO.format fs=ntfs quick label="%VHDX_LABEL%"&&ECHO.Assign letter=%VDISK_LETTER% noerr&&ECHO.Exit)>"DPQUERY"
DISKPART /s "DPQUERY">NUL 2>&1
SET "VDISK_LETTER_OVER="&&DEL "DPQUERY">NUL 2>&1
EXIT /B
:VDISK_ATTACH
IF NOT DEFINED VDISK_LETTER_OVER SET "VDISK_LETTER=V"
SET "VDISK_LETTER_BAK=%VDISK_LETTER%"&&CALL:VDISK_DETACH>NUL 2>&1
SET "VDISK_LETTER=%VDISK_LETTER_BAK%"
(ECHO.Select vdisk file="%VDISK%"&&ECHO.Attach vdisk&&ECHO.select partition 1&&ECHO.Assign letter=%VDISK_LETTER% noerr&&ECHO.Exit)>"DPQUERY"
DISKPART /s "DPQUERY">NUL 2>&1
SET "VDISK_LETTER_OVER="&&DEL "DPQUERY">NUL 2>&1
EXIT /B
:VDISK_DETACH
IF NOT DEFINED VDISK_LETTER SET "VDISK_LETTER=V"
(ECHO.Select vdisk file="%VDISK%"&&ECHO.Detach vdisk&&ECHO.Exit)>"DPQUERY"
DISKPART /s "DPQUERY">NUL 2>&1
IF EXIST "%VDISK_LETTER%:\" CALL:VDISK_BRUTE
DISKPART /s "DPQUERY">NUL 2>&1
DEL "DPQUERY">NUL 2>&1
EXIT /B
::(ECHO.select VOLUME=%VDISK_LETTER%&&ECHO.remove all dismount noerr&&ECHO.Exit)>"DPQUERY"
:VDISK_BRUTE
(ECHO.List Volume&&ECHO.Exit)>DPQUERY1&&DISKPART /s DPQUERY1>DPQUERY2
SET "DISK_TMP="&&FOR /F "tokens=1-9 delims= " %%a IN (DPQUERY2) DO (IF "%%c"=="V" CALL SET "DISK_TMP=%%b")
(ECHO.Select Volume %DISK_TMP%&&ECHO.Detail Volume&&ECHO.Exit)>DPQUERY1&&DISKPART /s DPQUERY1>DPQUERY2
SET "DISK_TMP="&&FOR /F "tokens=1-9 delims= " %%a IN (DPQUERY2) DO (
IF "%%a"=="Disk" IF NOT "%%b"=="###" SET "DISK_TMP=%%b"
IF "%%a"=="*" IF "%%b"=="Disk" SET "DISK_TMP=%%c")
(ECHO.List Vdisk&&ECHO.Exit)>DPQUERY1&&DISKPART /s DPQUERY1>DPQUERY2
SET "VDISK_TMP="&&FOR /F "tokens=1-9* delims= " %%a IN (DPQUERY2) DO (IF "%%a"=="VDisk" IF "%%d"=="%DISK_TMP%" IF EXIST "%%i" SET "VDISK_TMP=%%i")
CALL:PAD_LINE&&CALL ECHO  Detaching [%VDISK_TMP%]&&CALL:PAD_LINE
(ECHO.Select vdisk file="%VDISK_TMP%"&&ECHO.Detach vdisk&&ECHO.Exit)>DPQUERY1&&DISKPART /s DPQUERY1 >NUL 2>&1
DEL /F "DPQUERY*">NUL 2>&1
EXIT /B
:VDISK_COMPACT
IF NOT DEFINED VDISK EXIT /B
(ECHO.Select vdisk file="%VDISK%"&&ECHO.Attach vdisk readonly&&ECHO.compact vdisk&&ECHO.detach vdisk&&ECHO.Exit)>"DPQUERY"&&DISKPART /s "DPQUERY"&&ECHO 
DEL "DPQUERY">NUL 2>&1
EXIT /B
REM FILEMGR_FILEMGR_FILEMGR_FILEMGR_FILEMGR_FILEMGR_FILEMGR_FILEMGR_FILEMGR_
:FILEMGR_START
REM FILEMGR_FILEMGR_FILEMGR_FILEMGR_FILEMGR_FILEMGR_FILEMGR_FILEMGR_FILEMGR_
@ECHO OFF&&CALL:COLOR_CHK&&CLS&&CALL:TITLEGEN&&IF DEFINED PROG_OPER CALL:TITLECARD
CALL:PAD_LINE&&ECHO                             File Management&&CALL:PAD_LINE
IF NOT DEFINED FILEMGR_SOURCE SET "FILEMGR_SOURCE=%PROG_SOURCE%"&&SET "FILEMGR_TARGET=%PROG_TARGET%"
ECHO  [SOURCE[%FILEMGR_SOURCE%] [TARGET[%FILEMGR_TARGET%]&&CALL:PAD_LINE
ECHO   CURRENTLY IN [%FILEMGR_SOURCE%]:
IF DEFINED PROG_OPER SET "LIST_FMT=NUMERAL"&&SET "LIST_DIR=%FILEMGR_SOURCE%\*.*"&&CALL:FILE_LIST&&CALL:PAD_LINE
IF NOT DEFINED PROG_OPER SET "LIST_FMT=PLAIN"&&SET "LIST_DIR=%FILEMGR_SOURCE%\*.*"&&CALL:FILE_LIST&&CALL:PAD_LINE
IF NOT DEFINED PROG_OPER ECHO     {O}pen  {C}opy  {M}ove  {D}upe  {R}Rename  {Z}Delete  {N}ew&&CALL:PAD_LINE
IF NOT DEFINED PROG_OPER ECHO    {X}plore {S}wap-SRC/TGT {T}arget-Set   {#}TakeOwn {*}SymLink&&CALL:PAD_LINE
IF DEFINED PROG_OPER ECHO                  Enter File # To [%PROG_OPER%] {/}Type&&CALL:PAD_LINE
CALL:PAD_PREV&&CALL:MENU_SELECT&&IF DEFINED PROG_OPER CALL:FILE_LIST>NUL
IF "%PROG_OPER%"=="ASSIGN_MACRO" IF NOT DEFINED SELECT SET "PROG_OPER="&&GOTO:$ETTINGS_START
IF NOT DEFINED PROG_OPER IF NOT DEFINED SELECT GOTO:PROG_MAIN
IF DEFINED PROG_OPER IF NOT DEFINED SELECT SET "PROG_OPER="
IF DEFINED SELECT CALL:FILEMGR_FINISH
GOTO:FILEMGR_START
:FILEMGR_FINISH
IF "%PROG_SOURCE%\%SELECT%"=="%PROG_SOURCE%\" EXIT /B
IF "%SELECT%"=="." SET "PROG_OPER=FOLDER_DOWN"
IF "%SELECT%"==".." SET "PROG_OPER=FOLDER_UP"
IF "%SELECT%"=="C" SET "PROG_OPER=FILEMGR_COPY"&&EXIT /B
IF "%SELECT%"=="D" SET "PROG_OPER=FILEMGR_DUPE"&&EXIT /B
IF "%SELECT%"=="O" SET "PROG_OPER=FILEMGR_OPEN"&&EXIT /B
IF "%SELECT%"=="M" SET "PROG_OPER=FILEMGR_MOVE"&&EXIT /B
IF "%SELECT%"=="N" SET "PROG_OPER=FILEMGR_NEW"
IF "%SELECT%"=="X" SET "PROG_OPER=FILEMGR_EXPLORE"
IF "%SELECT%"=="R" SET "PROG_OPER=FILEMGR_RENAME"&&EXIT /B
IF "%SELECT%"=="S" CALL:FILEMGR_SWAP&&EXIT /B
IF "%SELECT%"=="T" SET "PROG_OPER=TGT_SET"
IF "%SELECT%"=="*" SET "PROG_OPER=FILEMGR_SYMLINK"&&EXIT /B
IF "%SELECT%"=="#" SET "PROG_OPER=FILEMGR_TAKEOWN"&&EXIT /B
IF "%SELECT%"=="Z" SET "PROG_OPER=FILEMGR_DELETE"&&EXIT /B
REM FIXES GLITCH IF FILE OR FOLDER NAMED "C,D,O,M,R,Z". NEEDS TO BE 1ST
FOR %%a in (C D O M R Z #) DO (IF DEFINED PROG_OPER IF "%SELECT%"=="%%a" EXIT /B)
REM FIXES GLITCH IF FILE OR FOLDER NAMED "C,D,O,M,R,Z". NEEDS TO BE 1ST
IF "%PROG_OPER%"=="ASSIGN_MACRO" CALL SET "MACRO_%MACRO_SLOT%=%FILEMGR_SOURCE%\%SELECT%"&&SET "PROG_OPER="&&GOTO:$ETTINGS_START
IF "%PROG_OPER%"=="FILEMGR_DUPE" IF NOT EXIST "%FILEMGR_SOURCE%\%SELECT%" EXIT /B
IF "%PROG_OPER%"=="FILEMGR_SYMLINK" IF NOT EXIST "%FILEMGR_SOURCE%\%SELECT%" EXIT /B
IF "%PROG_OPER%"=="FILEMGR_TAKEOWN" IF NOT EXIST "%FILEMGR_SOURCE%\%SELECT%" EXIT /B
IF "%PROG_OPER%"=="ASSIGN_MACRO" IF NOT EXIST "%FILEMGR_SOURCE%\%SELECT%" EXIT /B
IF "%PROG_OPER%"=="FILEMGR_COPY" IF NOT EXIST "%FILEMGR_SOURCE%\%SELECT%" EXIT /B
IF "%PROG_OPER%"=="FILEMGR_DELETE" IF NOT EXIST "%FILEMGR_SOURCE%\%SELECT%" EXIT /B
IF "%PROG_OPER%"=="FILEMGR_MOVE" IF NOT EXIST "%FILEMGR_SOURCE%\%SELECT%" EXIT /B
IF "%PROG_OPER%"=="FILEMGR_OPEN" IF NOT EXIST "%FILEMGR_SOURCE%\%SELECT%" EXIT /B
IF "%PROG_OPER%"=="FILEMGR_RENAME" IF NOT EXIST "%FILEMGR_SOURCE%\%SELECT%" EXIT /B
IF "%PROG_OPER%"=="FILEMGR_SYMLINK" IF "%FILEMGR_SOURCE%"=="%FILEMGR_TARGET%" ECHO Source/Target are the same..&&SET "PROG_OPER="&&PAUSE&&EXIT /B
IF "%PROG_OPER%"=="FILEMGR_COPY" IF "%FILEMGR_SOURCE%"=="%FILEMGR_TARGET%" ECHO Source/Target are the same..&&SET "PROG_OPER="&&PAUSE&&EXIT /B
IF "%PROG_OPER%"=="FILEMGR_MOVE" IF "%FILEMGR_SOURCE%"=="%FILEMGR_TARGET%" ECHO Source/Target are the same..&&SET "PROG_OPER="&&PAUSE&&EXIT /B
IF "%PROG_OPER%"=="FILEMGR_EXPLORE" ECHO.Enter any path&&ECHO (CAN'T END IN "\")&&FOR %%G in (A B C D E F G H I J K L M N O P Q R S T U V W X Y Z) DO (IF EXIST "%%G:\" ECHO [%%G:])
IF "%PROG_OPER%"=="FILEMGR_EXPLORE" CALL:MENU_SELECT
IF "%PROG_OPER%"=="FILEMGR_EXPLORE" IF DEFINED SELECT FOR /F "delims=" %%G in ('CMD.EXE /D /U /C ECHO %SELECT%^| FIND /V ""') do (SET "SLASHER=%%G")
IF "%PROG_OPER%"=="FILEMGR_EXPLORE" IF EXIST "%SELECT%\*" IF NOT "%SLASHER%"=="\" SET "FILEMGR_SOURCE=%SELECT%"
IF "%PROG_OPER%"=="FILEMGR_TAKEOWN" IF EXIST "%FILEMGR_SOURCE%\%SELECT%\*" TAKEOWN /F "%FILEMGR_SOURCE%\%SELECT%" /R /D Y
IF "%PROG_OPER%"=="FILEMGR_TAKEOWN" IF EXIST "%FILEMGR_SOURCE%\%SELECT%\*" ICACLS "%FILEMGR_SOURCE%\%SELECT%\*" /grant %USERNAME%:F /T >NUL 2>&1
IF "%PROG_OPER%"=="FILEMGR_TAKEOWN" IF EXIST "%FILEMGR_SOURCE%\%SELECT%\*" CALL:PAUSED
IF "%PROG_OPER%"=="FILEMGR_TAKEOWN" IF NOT EXIST "%FILEMGR_SOURCE%\%SELECT%\*" TAKEOWN /F "%FILEMGR_SOURCE%\%SELECT%"
IF "%PROG_OPER%"=="FILEMGR_TAKEOWN" IF NOT EXIST "%FILEMGR_SOURCE%\%SELECT%\*" ICACLS "%FILEMGR_SOURCE%\%SELECT%" /grant %USERNAME%:F >NUL 2>&1
IF "%PROG_OPER%"=="FILEMGR_TAKEOWN" IF NOT EXIST "%FILEMGR_SOURCE%\%SELECT%\*" CALL:PAUSED
IF "%PROG_OPER%"=="FILEMGR_SYMLINK" IF EXIST "%FILEMGR_SOURCE%\%SELECT%\*" MKLINK /J "%FILEMGR_TARGET%\%SELECT%" "%FILEMGR_SOURCE%\%SELECT%"&&CALL:PAUSED
IF "%PROG_OPER%"=="FILEMGR_SYMLINK" IF NOT EXIST "%FILEMGR_SOURCE%\%SELECT%\*" MKLINK "%FILEMGR_TARGET%\%SELECT%" "%FILEMGR_SOURCE%\%SELECT%"&&CALL:PAUSED
IF "%PROG_OPER%"=="FOLDER_DOWN" CALL SET "FILEMGR_SOURCE=%%FILEMGR_SOURCE_%FILEMGR_SOURCE_#%%%"&&CALL SET /A FILEMGR_SOURCE_#+=1
IF "%PROG_OPER%"=="FOLDER_UP" CALL SET "FILEMGR_SOURCE=%%FILEMGR_SOURCE_%FILEMGR_SOURCE_#%%%"&&CALL SET /A FILEMGR_SOURCE_#-=1
IF "%PROG_OPER%"=="FILEMGR_DELETE" IF NOT EXIST "%FILEMGR_SOURCE%\%SELECT%\*" DEL /Q /F "\\?\%FILEMGR_SOURCE%\%SELECT%"
IF "%PROG_OPER%"=="FILEMGR_DELETE" IF EXIST "%FILEMGR_SOURCE%\%SELECT%\*" RD /S /Q "\\?\%FILEMGR_SOURCE%\%SELECT%">NUL 2>&1
IF "%PROG_OPER%"=="FILEMGR_OPEN" IF NOT EXIST "%FILEMGR_SOURCE%\%SELECT%\*" "%FILEMGR_SOURCE%\%SELECT%"
IF "%PROG_OPER%"=="FILEMGR_OPEN" IF EXIST "%FILEMGR_SOURCE%\%SELECT%\*" SET "FILEMGR_LAST=%FILEMGR_SOURCE%"&&CALL SET /A FILEMGR_SOURCE_#+=1&&CALL SET "FILEMGR_SOURCE_%FILEMGR_SOURCE_#%=%FILEMGR_SOURCE%"&&CALL SET "FILEMGR_SOURCE=%FILEMGR_SOURCE%\%SELECT%"
IF "%PROG_OPER%"=="FILEMGR_COPY" IF NOT EXIST "%FILEMGR_SOURCE%\%SELECT%\*" CALL:PAD_LINE&&ECHO Copying [%FILEMGR_SOURCE%\%SELECT%]to[%FILEMGR_TARGET%]...&&CALL:PAD_LINE&&XCOPY "%FILEMGR_SOURCE%\%SELECT%" "%FILEMGR_TARGET%\" /C /Y
IF "%PROG_OPER%"=="FILEMGR_COPY" IF EXIST "%FILEMGR_SOURCE%\%SELECT%\*" CALL:PAD_LINE&&ECHO Copying [%FILEMGR_SOURCE%\%SELECT%]to[%FILEMGR_TARGET%]...&&CALL:PAD_LINE&&XCOPY "%FILEMGR_SOURCE%\%SELECT%" "%FILEMGR_TARGET%\%SELECT%\" /E /C /I /Y
IF "%PROG_OPER%"=="FILEMGR_DUPE" IF NOT EXIST "%FILEMGR_SOURCE%\%SELECT%\*" CALL:PAD_LINE&&ECHO Copying [%FILEMGR_SOURCE%\%SELECT%]to[%FILEMGR_SOURCE%\Copy_%SELECT%]...&&CALL:PAD_LINE&&XCOPY "%FILEMGR_SOURCE%\%SELECT%" "%FILEMGR_SOURCE%\Copy_%SELECT%\" /C /Y
IF "%PROG_OPER%"=="FILEMGR_DUPE" IF EXIST "%FILEMGR_SOURCE%\%SELECT%\*" CALL:PAD_LINE&&ECHO Copying [%FILEMGR_SOURCE%\%SELECT%]to[%FILEMGR_SOURCE%\Copy_%SELECT%]...&&CALL:PAD_LINE&&XCOPY "%FILEMGR_SOURCE%\%SELECT%" "%FILEMGR_SOURCE%\Copy_%SELECT%\" /E /C /I /Y
IF "%PROG_OPER%"=="FILEMGR_MOVE" IF NOT EXIST "%FILEMGR_SOURCE%\%SELECT%\*" CALL:PAD_LINE&&ECHO Moving [%FILEMGR_SOURCE%\%SELECT%]to[%FILEMGR_TARGET%]...&&CALL:PAD_LINE&&MOVE /Y "%FILEMGR_SOURCE%\%SELECT%" "%FILEMGR_TARGET%\"
IF "%PROG_OPER%"=="FILEMGR_MOVE" IF EXIST "%FILEMGR_SOURCE%\%SELECT%\*" CALL:PAD_LINE&&ECHO Moving [%FILEMGR_SOURCE%\%SELECT%]to[%FILEMGR_TARGET%]...&&CALL:PAD_LINE&&XCOPY "%FILEMGR_SOURCE%\%SELECT%" "%FILEMGR_TARGET%\%SELECT%\" /E /C /I /Y
IF "%PROG_OPER%"=="FILEMGR_MOVE" IF EXIST "%FILEMGR_SOURCE%\%SELECT%\*" RD /S /Q "\\?\%FILEMGR_SOURCE%\%SELECT%">NUL 2>&1
IF "%PROG_OPER%"=="FILEMGR_NEW" ECHO. {1}Folder&&ECHO. {2}File&&CALL:MENU_SELECT
IF "%PROG_OPER%"=="FILEMGR_NEW" IF "%SELECT%"=="1" CALL SET "NEW_TYPE=FOLDER"&&ECHO. New Folder Name?&&CALL:MENU_SELECT_ANY
IF "%PROG_OPER%"=="FILEMGR_NEW" IF "%NEW_TYPE%"=="FOLDER" SET "NEW_TYPE="&&MD "%FILEMGR_SOURCE%\%SELECT%">NUL 2>&1
IF "%PROG_OPER%"=="FILEMGR_NEW" IF "%SELECT%"=="2" CALL SET "NEW_TYPE=FILE"&&ECHO. New File Name?&&CALL:MENU_SELECT_ANY
IF "%PROG_OPER%"=="FILEMGR_NEW" IF "%NEW_TYPE%"=="FILE" SET "NEW_TYPE="&&ECHO.>"%FILEMGR_SOURCE%\%SELECT%"
IF "%PROG_OPER%"=="FILEMGR_RENAME" SET "OLD_NAME=%SELECT%"&&ECHO.&&ECHO NEW NAME?&&SET "NEW_NAME="&&SET /P "NEW_NAME=$>>"
IF "%PROG_OPER%"=="FILEMGR_RENAME" IF DEFINED NEW_NAME REN "%FILEMGR_SOURCE%\%OLD_NAME%" "%NEW_NAME%">NUL 2>&1
IF "%PROG_OPER%"=="TGT_SET" SET "FILEMGR_TARGET=%FILEMGR_SOURCE%"
IF DEFINED PROG_OPER SET "PROG_OPER="
EXIT /B
:FILEMGR_SWAP
IF NOT EXIST "%FILEMGR_SOURCE%" EXIT /B
IF NOT EXIST "%FILEMGR_TARGET%" EXIT /B
SET "FILEMGR_SOURCE_TMP=%FILEMGR_SOURCE%"&&SET "FILEMGR_TARGET_TMP=%FILEMGR_TARGET%"
SET "FILEMGR_SOURCE=%FILEMGR_TARGET_TMP%"&&SET "FILEMGR_TARGET=%FILEMGR_SOURCE_TMP%"
EXIT /B
REM $ETUP_$ETUP_$ETUP_$ETUP_$ETUP_$ETUP_$ETUP_$ETUP_$ETUP_$ETUP_$ETUP_$ETUP_$ETUP_$ETUP
:$ETUP_START
REM $ETUP_$ETUP_$ETUP_$ETUP_$ETUP_$ETUP_$ETUP_$ETUP_$ETUP_$ETUP_$ETUP_$ETUP_$ETUP_$ETUP
CLS&&CALL:SETS_HANDLER&&CALL:FOLDER_LOCATE&&CALL:OBJ_EXIST&&CALL:IMAGE_EXIST&&CALL:COLOR_CHK
IF "%BOOT_IMAGE%"=="NONE" GOTO:DISKMGR_START
IF NOT DEFINED BCD_SYSTEM SET "BCD_SYSTEM=NAME"
IF NOT DEFINED VHDX_SLOT_$ETUP SET "VHDX_SLOT_$ETUP=1"&&SET "BCDSLOT_CNT=2"
SET "CAME_FROM="&&SET "BTMP=%WINDIR%\System32\config\ELAM"&&CALL:TITLEGEN&&IF DEFINED PROG_OPER CALL:TITLECARD
CALL:PAD_LINE&&ECHO                              Boot-Creator&&CALL:PAD_LINE
IF NOT DEFINED PROG_OPER ECHO    ~ { Erase Target-Disk ^& Create Image-Deploy Boot-Environment } ~&&CALL:PAD_LINE
IF NOT DEFINED PROG_OPER IF "%FOLDER_MODE%"=="UNIFIED" SET "LIST_FMT=PLAIN"&&SET "LIST_DIR=%IMAGE_FOLDER%\*.VHDX"&&ECHO   AVAILABLE VHDX'S:&&CALL:FILE_LIST&&CALL:PAD_LINE
IF NOT DEFINED PROG_OPER IF "%FOLDER_MODE%"=="ISOLATED" SET "LIST_FMT=PLAIN"&&SET "LIST_DIR=%PROG_SOURCE%\*.VHDX"&&ECHO   BOOT-FOLDER:&&CALL:FILE_LIST&&CALL:PAD_LINE
IF NOT DEFINED PROG_OPER IF "%FOLDER_MODE%"=="ISOLATED" IF NOT "%PROG_MODE%"=="RAMDISK" ECHO                            {-}BOOT/IMAGE{+}&&CALL:PAD_LINE
IF NOT DEFINED PROG_OPER IF "%FOLDER_MODE%"=="UNIFIED" IF "%PROG_MODE%"=="RAMDISK" ECHO                     ~ {R}ebuild as [%BCD_SYSTEM%-MODE] } ~&&CALL:PAD_LINE
IF NOT DEFINED PROG_OPER IF "%FOLDER_MODE%"=="ISOLATED" IF "%PROG_MODE%"=="RAMDISK" ECHO     {-}BOOT/IMAGE{+}                 ~ {R}ebuild as [%BCD_SYSTEM%-MODE] } ~&&CALL:PAD_LINE
IF NOT DEFINED PROG_OPER IF "%FOLDER_MODE%"=="ISOLATED" SET "LIST_FMT=PLAIN"&&SET "LIST_DIR=%IMAGE_FOLDER%\*.VHDX"&&ECHO   IMAGE-FOLDER:&&CALL:FILE_LIST&&CALL:PAD_LINE
IF "%PROG_OPER%"=="MOVE2BOOT" SET "LIST_FMT=NUMERAL"&&SET "LIST_DIR=%IMAGE_FOLDER%\*.VHDX"&&CALL:FILE_LIST&&CALL:PAD_LINE
IF "%PROG_OPER%"=="MOVE2IMAGE" SET "LIST_FMT=NUMERAL"&&SET "LIST_DIR=%PROG_SOURCE%\*.VHDX"&&CALL:FILE_LIST&&CALL:PAD_LINE
IF "%PROG_OPER%"=="PICK_VHDX" SET "LIST_FMT=NUMERAL"&&SET "LIST_DIR=%IMAGE_FOLDER%\*.VHDX"&&CALL:FILE_LIST&&CALL:PAD_LINE
IF NOT DEFINED PROG_OPER IF "%VHDX_SOURCE_$ETUP%"=="-SELECT-" ECHO                                  {G}o^^!      ~ {V} Choose VHDX } ~&&CALL:PAD_LINE
IF NOT DEFINED PROG_OPER IF NOT "%VHDX_SOURCE_$ETUP%"=="-SELECT-" IF "%BCD_SYSTEM%"=="NAME" ECHO     {M}ode[%BCD_SYSTEM%]                 {G}o^^!  ~ {V} Current[%VHDX_SOURCE_$ETUP%] } ~ &&CALL:PAD_LINE
IF NOT DEFINED PROG_OPER IF NOT "%VHDX_SOURCE_$ETUP%"=="-SELECT-" IF "%BCD_SYSTEM%"=="SLOT" ECHO     {M}ode  {Q}ty[%BCDSLOT_CNT%]  {S}lot[%VHDX_SLOT_$ETUP%]  {G}o^^!  ~ {V} Current[%VHDX_SOURCE_$ETUP%] } ~ &&CALL:PAD_LINE
IF DEFINED PROG_OPER ECHO                  Enter File # To [%PROG_OPER%] {/}Type&&CALL:PAD_LINE
CALL:PAD_PREV&&CALL:MENU_SELECT&&IF DEFINED PROG_OPER CALL:FILE_LIST>NUL
IF NOT DEFINED PROG_OPER IF NOT DEFINED SELECT GOTO:DISKMGR_START
IF "%PROG_OPER%"=="PICK_VHDX" SET "VHDX_SOURCE_$ETUP=%SELECT%"
IF DEFINED PROG_OPER IF NOT DEFINED SELECT SET "PROG_OPER="
IF "%SELECT%"=="G" IF NOT "%VHDX_SOURCE_$ETUP%"=="-SELECT-" SET "PROG_OPER=GOTIME"
IF "%SELECT%"=="S" IF NOT "%VHDX_SOURCE_$ETUP%"=="-SELECT-" CALL:VHDX_SLOT_$ETUP
IF "%SELECT%"=="Q" IF NOT "%VHDX_SOURCE_$ETUP%"=="-SELECT-" CALL:BCDSLOT_CNT
IF "%SELECT%"=="M" IF NOT "%VHDX_SOURCE_$ETUP%"=="-SELECT-" CALL:BCD_SLOT_$ETUP
IF "%SELECT%"=="-" IF "%FOLDER_MODE%"=="ISOLATED" SET "PROG_OPER=MOVE2BOOT"&&GOTO:$ETUP_START
IF "%SELECT%"=="+" IF "%FOLDER_MODE%"=="ISOLATED" SET "PROG_OPER=MOVE2IMAGE"&&GOTO:$ETUP_START
IF "%SELECT%"=="V" SET "PROG_OPER=PICK_VHDX"&&GOTO:$ETUP_START
IF "%SELECT%"=="R" IF "%PROG_MODE%"=="RAMDISK" IF NOT "%VHDX_SOURCE_$ETUP%"=="-SELECT-" SET "CAME_FROM=$ETUP"&&CALL:BCD_REBUILD&&CALL:PAUSED
IF "%PROG_OPER%"=="GOTIME" SET "CAME_FROM=$ETUP"&&CALL:BOOT_MAKER&&CALL:PAUSED
IF "%PROG_OPER%"=="MOVE2BOOT" IF EXIST "%PROG_SOURCE%\%SELECT%" GOTO:$ETUP_START
IF "%PROG_OPER%"=="MOVE2IMAGE" IF EXIST "%IMAGE_FOLDER%\%SELECT%" GOTO:$ETUP_START
IF "%PROG_OPER%"=="MOVE2IMAGE" IF NOT EXIST "%PROG_SOURCE%\%SELECT%" GOTO:$ETUP_START
IF "%PROG_OPER%"=="MOVE2BOOT" IF NOT EXIST "%IMAGE_FOLDER%\%SELECT%" GOTO:$ETUP_START
IF "%PROG_OPER%"=="MOVE2BOOT" IF NOT EXIST "%IMAGE_FOLDER%\%SELECT%\*" CALL:PAD_LINE&&ECHO  Moving [%IMAGE_FOLDER%\%SELECT%]to[%PROG_SOURCE%]...&&CALL:PAD_LINE&&MOVE /Y "%IMAGE_FOLDER%\%SELECT%" "%PROG_SOURCE%\"
IF "%PROG_OPER%"=="MOVE2IMAGE" IF NOT EXIST "%PROG_SOURCE%\%SELECT%\*" CALL:PAD_LINE&&ECHO  Moving [%PROG_SOURCE%\%SELECT%]to[%IMAGE_FOLDER%]...&&CALL:PAD_LINE&&MOVE /Y "%PROG_SOURCE%\%SELECT%" "%IMAGE_FOLDER%\"
IF DEFINED PROG_OPER SET "PROG_OPER="
GOTO:$ETUP_START
:BCD_SLOT_$ETUP
IF NOT DEFINED BCD_SYSTEM SET "BCD_SYSTEM=NAME"
IF "%BCD_SYSTEM%"=="SLOT" SET "BCD_SYSTEM=NAME"&&EXIT /B
IF "%BCD_SYSTEM%"=="NAME" SET "BCD_SYSTEM=SLOT"&&EXIT /B
EXIT /B
:VHDX_SLOT_$ETUP
SET /A VHDX_SLOT_$ETUP+=1
IF "%VHDX_SLOT_$ETUP%" EQU "10" SET "VHDX_SLOT_$ETUP=0"
IF "%VHDX_SLOT_$ETUP%" GTR "%BCDSLOT_CNT%" SET "VHDX_SLOT_$ETUP=0"
EXIT /B
:BCDSLOT_CNT
SET /A BCDSLOT_CNT+=1
IF "%BCDSLOT_CNT%" EQU "10" SET "BCDSLOT_CNT=0"
IF "%BCDSLOT_CNT%" LSS "%VHDX_SLOT_$ETUP%" SET "VHDX_SLOT_$ETUP=%BCDSLOT_CNT%"
EXIT /B
:BCD_REBUILD
IF "%BCD_SYSTEM%"=="NAME" CALL:PAD_LINE&&ECHO  Rebuilding BCD [%BCD_SYSTEM%-MODE] [VHDX[%VHDX_SOURCE_$ETUP%]&&CALL:PAD_LINE
IF "%BCD_SYSTEM%"=="SLOT" CALL:PAD_LINE&&ECHO  Rebuilding BCD [%BCD_SYSTEM%-MODE] [Qty[%BCDSLOT_CNT%] [VHDX[%VHDX_SOURCE_$ETUP%]to[Slot[%VHDX_SLOT_$ETUP%]&&CALL:PAD_LINE
CALL:EFI_MOUNT>NUL 2>&1
CALL:BCD_CREATE>NUL 2>&1
CALL:EFI_UNMOUNT>NUL 2>&1
IF "%BCD_SYSTEM%"=="NAME" IF EXIST "S:\$\%VHDX_SOURCE_$ETUP%" ECHO  [%VHDX_SOURCE_$ETUP%] exists in target location [S:\$]&&CALL:PAD_LINE
IF "%BCD_SYSTEM%"=="SLOT" IF EXIST "S:\$\%VHDX_SLOT_$ETUP%.VHDX" ECHO  [%VHDX_SLOT_$ETUP%.VHDX] exists in target location [S:\$]&&CALL:PAD_LINE
IF "%BCD_SYSTEM%"=="NAME" IF NOT EXIST "S:\$\%VHDX_SOURCE_$ETUP%" ECHO  Relocating [%IMAGE_FOLDER%\%VHDX_SOURCE_$ETUP%]to[S:\$\%VHDX_SOURCE_$ETUP%]&&CALL:PAD_LINE&&MOVE /Y "\\?\%IMAGE_FOLDER%\%VHDX_SOURCE_$ETUP%" "S:\$">NUL 2>&1
IF "%BCD_SYSTEM%"=="SLOT" IF NOT EXIST "S:\$\%VHDX_SLOT_$ETUP%.VHDX" ECHO  Relocating [%IMAGE_FOLDER%\%VHDX_SOURCE_$ETUP%]to[S:\$\%VHDX_SLOT_$ETUP%.VHDX]&&CALL:PAD_LINE&&MOVE /Y "\\?\%IMAGE_FOLDER%\%VHDX_SOURCE_$ETUP%" "S:\$\%VHDX_SLOT_$ETUP%.VHDX">NUL 2>&1
ECHO  Done^^!&&CALL:PAD_LINE
EXIT /B
REM REPARTITION_REPARTITION_REPARTITION_REPARTITION_REPARTITION_REPARTITION
:BOOT_MAKER
REM REPARTITION_REPARTITION_REPARTITION_REPARTITION_REPARTITION_REPARTITION
SET "PROG_OPER="&&SET "BOOT_MSG="&&SET "DISK_MSG="&&SET "PART_CNT="&&SET "PART_ERR="&&SET "BOOT_ABT="&&SET "BOOT_GO="
IF NOT "%PROG_MODE%"=="RAMDISK" IF NOT EXIST "S:\" IF NOT EXIST "T:\" IF NOT EXIST "U:\" IF NOT EXIST "V:\" SET "BOOT_GO=1"
IF NOT "%PROG_MODE%"=="RAMDISK" IF NOT DEFINED BOOT_GO SET "BOOT_MSG=Drive letters S:\,T:\,U:\,V:\ can NOT be in use. Reassign/Unmount the letter in use."&&GOTO:BOOT_ABT
IF "%CAME_FROM%"=="$ETUP" IF NOT "%VHDX_SOURCE_$ETUP%"=="-SELECT-" IF NOT EXIST "%IMAGE_FOLDER%\%VHDX_SOURCE_$ETUP%" SET "BOOT_MSG=Source VHDX not selected."&&GOTO:BOOT_ABT
IF "%CAME_FROM%"=="$ETUP" CALL:DISK_MENU
IF "%CAME_FROM%"=="$ETUP" CALL:EXIT_FLAGGER
IF "%CAME_FROM%"=="$ETUP" IF "%EXIT_FLAGGER%"=="1" EXIT /B
CALL:PAD_LINE&&ECHO                            Boot-Creator Start&&CALL:PAD_LINE
DISM /cleanup-MountPoints>NUL 2>&1
CALL:EMPTY_TRASH>NUL 2>&1
IF "%PROG_MODE%"=="RAMDISK" SET /P DISK_TARGET=<"%PROG_FOLDER%\DISK_TARGET"&&CALL:DISK_QUERY>NUL 2>&1
IF "%PROG_MODE%"=="RAMDISK" CALL:EFI_MOUNT>NUL 2>&1
IF "%PROG_MODE%"=="RAMDISK" IF NOT EXIST "U:\$.WIM" SET "BOOT_MSG=No boot-media detected."&&GOTO:BOOT_CLEANUP
IF "%PROG_MODE%"=="RAMDISK" SET "BOOT_IMAGE=U:\$.WIM"
COPY /Y "%BOOT_IMAGE%" "%TEMP%\$WIM.TMP">NUL 2>&1
IF "%PROG_MODE%"=="RAMDISK" CALL:EFI_UNMOUNT>NUL 2>&1
IF EXIST "%TEMP%\$haZZam" RD /Q /S "\\?\%TEMP%\$haZZam">NUL 2>&1
IF NOT EXIST "%TEMP%\$haZZam" MD "%TEMP%\$haZZam">NUL 2>&1
SET /P DISK_TARGET=<"%TEMP%\DISK_TARGET"&&CALL:DISK_QUERY>NUL 2>&1
COPY /Y "\\?\%PROG_FOLDER%\$haZZam.CMD" "%TEMP%\$haZZam">NUL 2>&1
ECHO.&&ECHO Creating partitions...
IF DEFINED DISK_NUMBER CALL:PART_CREATE>NUL 2>&1
IF DEFINED UID_FAIL SET "DISK_TARGET=%GET_DISK_ID%"&&CALL:DISK_QUERY>NUL 2>&1
ECHO.%DISK_TARGET%>"%TEMP%\$haZZam\DISK_TARGET"
SET "BOOT_MSG0=Disk is currently in use - unplug disk - reboot into Windows - replug and try again."
IF DEFINED PART_ERR SET "BOOT_MSG=%BOOT_MSG0%"&&SET "BOOT_ABT=1"
IF NOT EXIST "U:\" SET "BOOT_MSG=%BOOT_MSG0%"&&SET "BOOT_ABT=1"
IF NOT EXIST "S:\" SET "BOOT_MSG=%BOOT_MSG0%"&&SET "BOOT_ABT=1"
IF DEFINED BOOT_ABT GOTO:BOOT_CLEANUP
:BOOT_CREATE
SET "SCRATCHDIR_BOOT=S:\$\Scratch"
IF EXIST "%SCRATCHDIR_BOOT%" RD /S /Q "\\?\%SCRATCHDIR_BOOT%">NUL 2>&1
IF NOT EXIST "%SCRATCHDIR_BOOT%" MD "%SCRATCHDIR_BOOT%">NUL 2>&1
MOVE /Y "%TEMP%\$WIM.TMP" "%SCRATCHDIR_BOOT%\$.WIM">NUL 2>&1
SET "VDISK=%SCRATCHDIR_BOOT%\SCRATCH.VHDX"&&SET "VHDX_SIZE=20000"&&CALL:VDISK_CREATE>NUL 2>&1
ECHO Extracting boot-media...&&CALL:TITLECARD
SET "IMAGEFILE_BOOT=%SCRATCHDIR_BOOT%\$.WIM"
CALL:BOOTWIM_INDEX>NUL 2>&1
SET "APPLYDIR_BOOT=V:"&&SET "CAPTUREDIR_BOOT=V:"
DISM /APPLY-IMAGE /IMAGEFILE:"%IMAGEFILE_BOOT%" /INDEX:%BOOTWIM_INDEX% /APPLYDIR:"%APPLYDIR_BOOT%"
IF NOT EXIST "%APPLYDIR_BOOT%\Windows" SET "BOOT_MSG=Mount failure, Index %BOOTWIM_INDEX%" &&GOTO:BOOT_CLEANUP
DEL /Q /F "\\?\%IMAGEFILE_BOOT%">NUL 2>&1
MD "%APPLYDIR_BOOT%\$">NUL 2>&1
COPY /Y "%TEMP%\$haZZam\*.*" "%APPLYDIR_BOOT%\$">NUL 2>&1
MD "U:\EFI\Microsoft\Boot">NUL 2>&1
MD "U:\Boot">NUL 2>&1
MD "U:\EFI\Boot">NUL 2>&1
COPY /Y "%APPLYDIR_BOOT%\Windows\Boot\DVD\EFI\boot.sdi" "U:\Boot">NUL 2>&1
COPY /Y "%APPLYDIR_BOOT%\Windows\Boot\EFI\bootmgfw.efi" "U:\EFI\Boot\bootx64.efi">NUL 2>&1
COPY /Y "%APPLYDIR_BOOT%\Windows\System32\config\ELAM" "%TEMP%\BCD">NUL 2>&1
IF NOT EXIST "%APPLYDIR_BOOT%\Windows\System32\Setup.dat" DEL /Q /F "\\?\%APPLYDIR_BOOT%\setup.exe">NUL 2>&1
IF NOT EXIST "%APPLYDIR_BOOT%\Windows\Boot\DVD\EFI\boot.sdi" COPY /Y "%WinDir%\Boot\DVD\EFI\boot.sdi" "U:\Boot">NUL 2>&1
IF NOT EXIST "%APPLYDIR_BOOT%\Windows\Boot\EFI\bootmgfw.efi" COPY /Y "%WinDir%\Boot\EFI\bootmgfw.efi" "U:\EFI\Boot\bootx64.efi">NUL 2>&1
IF NOT EXIST "U:\EFI\Boot\bootx64.efi" SET "BOOT_MSG=EFI missing"&&GOTO:BOOT_CLEANUP
CALL:BCD_CREATE>NUL 2>&1
IF NOT EXIST "U:\EFI\Microsoft\Boot\BCD" SET "BOOT_MSG=BCD missing"&&GOTO:BOOT_CLEANUP
ECHO.&&ECHO Saving boot-media...&&CALL:TITLECARD
ECHO "%%SYSTEMDRIVE%%\$\$HAZZAM.CMD">"%APPLYDIR_BOOT%\WINDOWS\SYSTEM32\STARTNET.CMD"
DISM /CAPTURE-IMAGE /IMAGEFILE:"U:\$.WIM" /CAPTUREDIR:"%CAPTUREDIR_BOOT%" /NAME:NAME /CheckIntegrity /Verify /Bootable
COPY /Y "%PROG_FOLDER%\$ETTINGS.PRO" "\\?\S:\$">NUL 2>&1
COPY /Y "%PROG_FOLDER%\$haZZam.CMD" "\\?\S:\$">NUL 2>&1
:BOOT_CLEANUP
ECHO.&&ECHO Unmounting EFI...&&CALL:TITLECARD&&CALL:VDISK_DETACH>NUL 2>&1
CALL:EFI_UNMOUNT>NUL 2>&1
IF EXIST "%TEMP%\$WIM.TMP" DEL /Q /F "\\?\%TEMP%\$WIM.TMP">NUL 2>&1
IF EXIST "%TEMP%\$haZZam" RD /S /Q "\\?\%TEMP%\$haZZam">NUL 2>&1
IF EXIST "DPQUERY" DEL /Q /F "DPQUERY">NUL 2>&1
IF EXIST "%TEMP%\DISK_TARGET" DEL /Q /F "%TEMP%\DISK_TARGET">NUL 2>&1
IF EXIST "%SCRATCHDIR_BOOT%" DISM /cleanup-MountPoints>NUL 2>&1
IF EXIST "%SCRATCHDIR_BOOT%" RD /S /Q "\\?\%SCRATCHDIR_BOOT%">NUL 2>&1
IF "%PROG_MODE%"=="RAMDISK" CALL:HOME_AUTO>NUL 2>&1
IF NOT "%PROG_MODE%"=="RAMDISK" CALL:REASSIGN_LETTER>NUL 2>&1
CALL:EFI_UNMOUNT>NUL 2>&1
IF DEFINED BOOT_ABT GOTO:BOOT_ABT
IF "%PROG_MODE%"=="COMMAND" ECHO Copying %VHDX_SOURCE_$ETUP%...&&COPY /Y "\\?\%IMAGE_FOLDER%\%VHDX_SOURCE_$ETUP%" "%NXT_LETTER%:\$">NUL 2>&1
IF "%CAME_FROM%"=="$ETUP" IF "%BCD_SYSTEM%"=="NAME" IF NOT "%VHDX_SOURCE_$ETUP%"=="-SELECT-" ECHO Copying %VHDX_SOURCE_$ETUP%...&&COPY /Y "\\?\%IMAGE_FOLDER%\%VHDX_SOURCE_$ETUP%" "%NXT_LETTER%:\$">NUL 2>&1
IF "%CAME_FROM%"=="$ETUP" IF "%BCD_SYSTEM%"=="SLOT" IF NOT "%VHDX_SOURCE_$ETUP%"=="-SELECT-" ECHO Copying %VHDX_SOURCE_$ETUP%...&&COPY /Y "\\?\%IMAGE_FOLDER%\%VHDX_SOURCE_$ETUP%" "%NXT_LETTER%:\$\%VHDX_SLOT_$ETUP%.VHDX">NUL 2>&1
IF "%CAME_FROM%"=="$ETUP" IF NOT "%VHDX_SOURCE_$ETUP%"=="-SELECT-" IF NOT EXIST "%NXT_LETTER%:\$\*.VHDX" SET "BOOT_MSG=ERROR Copying VHDX."
:BOOT_ABT
IF "%CAME_FROM%"=="$ETUP" ECHO &&SET "CAME_FROM="
IF DEFINED BOOT_MSG ECHO %BOOT_MSG%&&ECHO.&&SET "BOOT_MSG="
CALL:PAD_LINE&&ECHO                           Boot-Creator Finish&&CALL:PAD_LINE
EXIT /B
:BOOTWIM_INDEX
IF EXIST "%IMAGEFILE_BOOT%" Dism /Get-ImageInfo /ImageFile:"%IMAGEFILE_BOOT%" /Index:3>WIMINFO
IF EXIST "%IMAGEFILE_BOOT%" FOR /F "tokens=5 skip=5 delims= " %%a in (WIMINFO) DO (IF "%%a"=="Setup" SET "BOOTWIM_INDEX=3"&&GOTO:WIM_ESCAPE)
IF EXIST "%IMAGEFILE_BOOT%" Dism /Get-ImageInfo /ImageFile:"%IMAGEFILE_BOOT%" /Index:2>WIMINFO
IF EXIST "%IMAGEFILE_BOOT%" FOR /F "tokens=5 skip=5 delims= " %%a in (WIMINFO) DO (IF "%%a"=="Setup" SET "BOOTWIM_INDEX=2"&&GOTO:WIM_ESCAPE)
IF EXIST "%IMAGEFILE_BOOT%" Dism /Get-ImageInfo /ImageFile:"%IMAGEFILE_BOOT%" /Index:1>WIMINFO
IF EXIST "%IMAGEFILE_BOOT%" FOR /F "tokens=5 skip=5 delims= " %%a in (WIMINFO) DO (IF "%%a"=="Setup" SET "BOOTWIM_INDEX=1"&&GOTO:WIM_ESCAPE)
:WIM_ESCAPE
IF NOT DEFINED BOOTWIM_INDEX SET "BOOTWIM_INDEX=1"
DEL /Q /F "WIMINFO">NUL 2>&1
EXIT /B
REM BCD_CREATE_BCD_CREATE_BCD_CREATE_BCD_CREATE_BCD_CREATE_BCD_CREATE_BCD_CREATE
:BCD_CREATE
REM BCD_CREATE_BCD_CREATE_BCD_CREATE_BCD_CREATE_BCD_CREATE_BCD_CREATE_BCD_CREATE
IF "%CAME_FROM%"=="$ETUP" IF "%VHDX_SOURCE_$ETUP%"=="-SELECT-" SET "BCD_SYSTEM=SLOT"&&SET "BCD_SYSTEM_TEMP=1"
IF "%PROG_MODE%"=="COMMAND" IF NOT DEFINED BCD_SYSTEM IF DEFINED VHDX_SOURCE_$ETUP SET "BCD_SYSTEM=NAME"&&SET "BCD_SYSTEM_TEMP=1"
IF "%PROG_MODE%"=="COMMAND" IF NOT DEFINED BCD_SYSTEM IF NOT DEFINED VHDX_SOURCE_$ETUP SET "BCD_SYSTEM=SLOT"&&SET "BCD_SYSTEM_TEMP=1"
SET "BCD_KEY=BCD00000001"&&SET "BCD_FILE=%TEMP%\0020"
IF NOT DEFINED BCDSLOT_CNT SET "BCDSLOT_CNT=2"&&SET "VHDX_SLOT_$ETUP=1"
IF NOT DEFINED VHDX_SLOT_$ETUP SET "BCDSLOT_CNT=2"&&SET "VHDX_SLOT_$ETUP=1"
IF "%VHDX_SLOT_$ETUP%" GTR "%BCDSLOT_CNT%" SET "VHDX_SLOT_$ETUP=%BCDSLOT_CNT%"
DEL /Q /F "%BCD_FILE%">NUL 2>&1
BCDEDIT.EXE /createstore "%BCD_FILE%"
BCDEDIT.EXE /STORE "%BCD_FILE%" /create {bootmgr}
BCDEDIT.EXE /STORE "%BCD_FILE%" /SET {bootmgr} description "Boot Manager"
BCDEDIT.EXE /STORE "%BCD_FILE%" /SET {bootmgr} device boot
BCDEDIT.EXE /STORE "%BCD_FILE%" /SET {bootmgr} timeout 3
FOR /f "TOKENS=2 DELIMS={}" %%a in ('BCDEDIT.EXE /STORE %BCD_FILE% /create /device') do SET RAMDISK={%%a} 
BCDEDIT.EXE /STORE %BCD_FILE% /SET %RAMDISK% ramdisksdidevice boot
BCDEDIT.EXE /STORE %BCD_FILE% /SET %RAMDISK% ramdisksdipath \boot\boot.sdi
FOR /f "TOKENS=2 DELIMS={}" %%a in ('BCDEDIT.EXE /STORE %BCD_FILE% /create /application osloader') do SET BCD_GUID={%%a}
BCDEDIT.EXE /STORE %BCD_FILE% /SET %BCD_GUID% systemroot \Windows
BCDEDIT.EXE /STORE %BCD_FILE% /SET %BCD_GUID% detecthal Yes
BCDEDIT.EXE /STORE %BCD_FILE% /SET %BCD_GUID% winpe Yes
BCDEDIT.EXE /STORE %BCD_FILE% /SET %BCD_GUID% osdevice ramdisk=[boot]\$.WIM,%RAMDISK%
BCDEDIT.EXE /STORE %BCD_FILE% /SET %BCD_GUID% device ramdisk=[boot]\$.WIM,%RAMDISK%
BCDEDIT.EXE /STORE %BCD_FILE% /SET %BCD_GUID% path \windows\system32\winload.efi
BCDEDIT.EXE /STORE %BCD_FILE% /SET %BCD_GUID% description "$haZZam^!"
BCDEDIT.EXE /STORE %BCD_FILE% /displayorder %BCD_GUID% /addlast
IF NOT DEFINED DEPLOY_MODE IF "%BCD_SYSTEM%"=="NAME" SET "BCD_CNT="&&CALL:BCD_VHDX
IF NOT DEFINED DEPLOY_MODE IF "%BCD_SYSTEM%"=="SLOT" FOR %%a in (9 8 7 6 5 4 3 2 1 0) DO (IF "%%a" LEQ "%BCDSLOT_CNT%" CALL SET "BCD_CNT=%%a"&&CALL:BCD_VHDX)
REG UNLOAD HKLM\%BCD_KEY%>NUL 2>&1
REG LOAD HKLM\%BCD_KEY% "%BCD_FILE%">NUL 2>&1
REG EXPORT HKLM\%BCD_KEY% %TEMP%\BCD1
REG UNLOAD HKLM\%BCD_KEY%>NUL 2>&1
SET "BCD_FILE=%TEMP%\BCD"
IF NOT EXIST "%BCD_FILE%" COPY /Y "%BTMP%" "%BCD_FILE%">NUL 2>&1
REG LOAD HKLM\%BCD_KEY% "%BCD_FILE%">NUL 2>&1
REG IMPORT %TEMP%\BCD1 >NUL 2>&1
REG.exe add "HKLM\%BCD_KEY%\Description" /v "KeyName" /t REG_SZ /d "%BCD_KEY%" /f
REG.exe add "HKLM\%BCD_KEY%\Description" /v "System" /t REG_DWORD /d "1" /f
REG.exe add "HKLM\%BCD_KEY%\Description" /v "TreatAsSystem" /t REG_DWORD /d "1" /f
REG.exe delete "HKLM\%BCD_KEY%" /v "FirmwareModified" /f
REG UNLOAD HKLM\%BCD_KEY%>NUL 2>&1
IF "%CAME_FROM%"=="COMMAND" COPY /Y "%BCD_FILE%" "U:\EFI\Microsoft\Boot\BCD">NUL 2>&1
IF "%CAME_FROM%"=="$ETUP" COPY /Y "%BCD_FILE%" "U:\EFI\Microsoft\Boot\BCD">NUL 2>&1
IF "%CAME_FROM%"=="DISKMGR" COPY /Y "%BCD_FILE%" "U:\EFI\Microsoft\Boot\BCD">NUL 2>&1
DEL /Q /F "%TEMP%\BCD1"&&DEL /Q /F "%TEMP%\0020"&&DEL /Q /F "%BCD_FILE%"
IF DEFINED BCD_SYSTEM_TEMP SET "BCD_SYSTEM_TEMP="&&SET "BCD_SYSTEM="
EXIT /B
:BCD_VHDX
IF "%BCD_SYSTEM%"=="NAME" SET "BCD_NAME=%VHDX_SOURCE_$ETUP%"
IF "%BCD_SYSTEM%"=="SLOT" SET "BCD_NAME=%BCD_CNT%.VHDX"
FOR /f "TOKENS=3" %%a in ('BCDEDIT.EXE /STORE %BCD_FILE% /create /application osloader') do SET BCD_GUID=%%a
BCDEDIT.EXE /STORE "%BCD_FILE%" /SET %BCD_GUID% device vhd=[locate]\$\%BCD_NAME%
BCDEDIT.EXE /STORE "%BCD_FILE%" /SET %BCD_GUID% path \Windows\SYSTEM32\winload.efi
BCDEDIT.EXE /STORE "%BCD_FILE%" /SET %BCD_GUID% osdevice vhd=[locate]\$\%BCD_NAME%
BCDEDIT.EXE /STORE "%BCD_FILE%" /SET %BCD_GUID% systemroot \Windows
IF "%BCD_SYSTEM%"=="NAME" BCDEDIT.EXE /STORE "%BCD_FILE%" /SET %BCD_GUID% description "%BCD_NAME%"
IF "%BCD_SYSTEM%"=="SLOT" BCDEDIT.EXE /STORE "%BCD_FILE%" /SET %BCD_GUID% description "Slot %BCD_CNT%"
BCDEDIT.EXE /STORE "%BCD_FILE%" /displayorder %BCD_GUID% /addfirst
EXIT /B
REM MAKER_MAKER_MAKER_MAKER_MAKER_MAKER_MAKER_MAKER_MAKER_MAKER_MAKER_
:MAKER_START
REM MAKER_MAKER_MAKER_MAKER_MAKER_MAKER_MAKER_MAKER_MAKER_MAKER_MAKER_
@ECHO OFF&&CALL:SETS_HANDLER&&CALL:FOLDER_LOCATE&&CALL:OBJ_EXIST&&CALL:IMAGE_EXIST&&CALL:COLOR_CHK
CLS&&CALL:TITLEGEN&&IF DEFINED PROG_OPER CALL:TITLECARD
CALL:PAD_LINE&&ECHO                          $PK Package Creator&&CALL:PAD_LINE
IF NOT DEFINED MAKER_SLOT SET "MAKER_SLOT=1"
IF NOT DEFINED PACK_COMPRESS SET "PACK_COMPRESS=FAST"
FOR %%a in (PackName PackType PackTag PackDesc REG_KEY REG_VAL RUN_MOD REG_DAT) DO (CALL SET "%%a=NULL")
IF EXIST "%MAKER_FOLDER%\PACKAGE.$HZ" FOR /F "eol=- TOKENS=1-2 delims==" %%a in (%MAKER_FOLDER%\PACKAGE.$HZ) DO (IF NOT "%%a"=="   " SET "%%a=%%b")
IF NOT "%REG_KEY%"=="NULL" IF NOT "%REG_VAL%"=="NULL" IF NOT "%RUN_MOD%"=="NULL" IF NOT "%REG_DAT%"=="NULL" SET "PACK_COND=ENABLED"
IF "%REG_KEY%"=="NULL" SET "PACK_COND=DISABLED"
IF "%REG_VAL%"=="NULL" SET "PACK_COND=DISABLED"
IF "%RUN_MOD%"=="NULL" SET "PACK_COND=DISABLED"
IF "%REG_DAT%"=="NULL" SET "PACK_COND=DISABLED"
IF NOT "%REG_VAL%"=="NULL" IF NOT "%RUN_MOD%"=="NULL" IF NOT "%REG_DAT%"=="NULL" SET "PACK_COND=ENABLED"
IF NOT DEFINED PROG_OPER IF "%PACK_COND%"=="ENABLED" ECHO  [Name[%PackName%] [Type[%PackType%] [Tag[%PackTag%] [X-LVL[%PACK_COMPRESS%] [PMT[%PACK_COND%]&&CALL:PAD_LINE
IF NOT DEFINED PROG_OPER IF "%PACK_COND%"=="DISABLED" ECHO  [Name[%PackName%] [Type[%PackType%] [Tag[%PackTag%] [X-LVL[%PACK_COMPRESS%]&&CALL:PAD_LINE
IF NOT DEFINED PROG_OPER ECHO  [Desc]: %PackDesc%&&CALL:PAD_LINE
IF NOT DEFINED PROG_OPER IF "%PACK_COND%"=="ENABLED" ECHO   PERMIT IF: [%REG_KEY% %REG_VAL%] [%RUN_MOD%] [%REG_DAT%]&&CALL:PAD_LINE
IF NOT DEFINED PROG_OPER SET "LIST_DIR=%MAKER_FOLDER%\*.*"&&SET "LIST_FMT=PLAIN"&&ECHO   PACKAGE CONTENTS:&&CALL:FILE_LIST&&CALL:PAD_LINE
IF "%PROG_OPER%"=="MAKER_RESTORE" SET "LIST_DIR=%PACK_FOLDER%\*.$PK"&&SET "LIST_FMT=NUMERAL"&&ECHO   AVAILABLE $PK'S:&&CALL:FILE_LIST&&CALL:PAD_LINE
IF NOT DEFINED PROG_OPER IF NOT "%PackType%"=="NULL" IF NOT "%PackType%"=="DRIVER" IF NOT "%PackType%"=="SCRIPTED" IF NOT "%PackType%"=="STORAGE" ECHO  {X}PROJECT[%MAKER_SLOT%] {R}estore {N}ew Template {E}xport-Drivers {*}Examples&&CALL:PAD_LINE
IF NOT DEFINED PROG_OPER IF "%PackType%"=="NULL" ECHO  {X}PROJECT[%MAKER_SLOT%] {R}estore {N}ew Template {E}xport-Drivers {*}Examples&&CALL:PAD_LINE
IF NOT DEFINED PROG_OPER IF "%PackType%"=="DRIVER" ECHO  {X}PROJECT[%MAKER_SLOT%]   {V}iew/Edit  {Z}Compression  {I}nspect-System&&CALL:PAD_LINE
IF NOT DEFINED PROG_OPER IF "%PackType%"=="DRIVER" ECHO      {C}reate  {R}estore  {N}ew Template  {E}xport-Drivers {P}ermit&&CALL:PAD_LINE
IF NOT DEFINED PROG_OPER IF "%PackType%"=="SCRIPTED" ECHO  {X}PROJECT[%MAKER_SLOT%]  {V}iew/Edit  {Z}Compression  {P}ermit&&CALL:PAD_LINE
IF NOT DEFINED PROG_OPER IF "%PackType%"=="SCRIPTED" ECHO         {C}reate    {R}estore    {N}ew Template    {*}Examples&&CALL:PAD_LINE
IF NOT DEFINED PROG_OPER IF "%PackType%"=="STORAGE" ECHO  {X}PROJECT[%MAKER_SLOT%]      {V}iew/Edit  {Z}Compression  {P}ermit&&CALL:PAD_LINE
IF NOT DEFINED PROG_OPER IF "%PackType%"=="STORAGE" ECHO        {C}reate   {R}estore   {N}ew Template   {*}Examples&&CALL:PAD_LINE
IF DEFINED PROG_OPER ECHO                  Enter File # To [%PROG_OPER%] {/}Type&&CALL:PAD_LINE
CALL:PAD_PREV&&CALL:MENU_SELECT&&IF DEFINED PROG_OPER CALL:FILE_LIST>NUL
IF NOT DEFINED PROG_OPER IF NOT DEFINED SELECT GOTO:PROG_MAIN
IF DEFINED PROG_OPER IF NOT DEFINED SELECT SET "PROG_OPER="
IF "%SELECT%"=="C" SET "PROG_OPER=MAKER_CREATE"
IF "%SELECT%"=="E" IF "%PackType%"=="NULL" SET "PROG_OPER=MAKER_EXPORT"
IF "%SELECT%"=="E" IF "%PackType%"=="DRIVER" SET "PROG_OPER=MAKER_EXPORT"
IF "%SELECT%"=="*" SET "PROG_OPER=MAKER_EXAMPLE"
IF "%SELECT%"=="I" SET "PROG_OPER=MAKER_INSPECT"
IF "%SELECT%"=="N" SET "PROG_OPER=MAKER_TEMPLATE"
IF "%SELECT%"=="R" SET "PROG_OPER=MAKER_RESTORE"&&GOTO:MAKER_START
IF "%SELECT%"=="P" CALL:PACK_COND
IF "%SELECT%"=="X" CALL:MAKER_SLOT
IF "%SELECT%"=="Z" CALL:PACK_COMPRESS
IF "%SELECT%"=="V" SET "EDIT_SETUP=1"&&SET "EDIT_MANIFEST=1"&&SET "EDIT_README=1"&&SET "EDIT_CUSTOM="&&CALL:MAKER_EDITOR
IF "%PROG_OPER%"=="MAKER_RESTORE" IF NOT DEFINED SELECT SET "PROG_OPER="&&GOTO:MAKER_START
IF "%PROG_OPER%"=="MAKER_RESTORE" IF NOT EXIST "%PACK_FOLDER%\%SELECT%" GOTO:MAKER_START
IF DEFINED PROG_OPER SET "SCRATCHDIR_MAKER=%PROG_SOURCE%\Scratch"
IF DEFINED PROG_OPER IF EXIST "%SCRATCHDIR_MAKER%" DISM /cleanup-MountPoints>NUL 2>&1
IF DEFINED PROG_OPER IF EXIST "%SCRATCHDIR_MAKER%" RD /S /Q "%SCRATCHDIR_MAKER%">NUL 2>&1
IF "%PROG_OPER%"=="MAKER_CREATE" CALL:MAKER_CREATE
IF "%PROG_OPER%"=="MAKER_EXAMPLE" SET "EXAMPLE_MODE=CREATE"&&CALL:PACKEX_MENU_START
IF "%PROG_OPER%"=="MAKER_EXPORT" SET "PackType=DRIVER"&&IF "%PackName%"=="NULL" SET "PackName=DRIVER_%RANDOM%"
IF "%PROG_OPER%"=="MAKER_EXPORT" IF NOT EXIST "%MAKER_FOLDER%" MD "%MAKER_FOLDER%">NUL 2>&1
IF "%PROG_OPER%"=="MAKER_EXPORT" DISM /ONLINE /EXPORT-DRIVER /destination:"%MAKER_FOLDER%"&&CALL:PACK_MANIFEST&&CALL:PAD_LINE&&CALL:PAUSED
IF "%PROG_OPER%"=="MAKER_INSPECT" IF "%PackType%"=="DRIVER" DISM /ONLINE /GET-DRIVERS&&CALL:PAD_LINE&&CALL:PAUSED
IF "%PROG_OPER%"=="MAKER_RESTORE" ECHO [Project[%MAKER_SLOT%] FOLDER WILL BE CLEARED&&ECHO.PRESS(Z)TO PROCEED&&SET "PROMPT_SET=PJ_CLEAR"&&CALL:PROMPT_SET
IF "%PROG_OPER%"=="MAKER_RESTORE" IF NOT "%PJ_CLEAR%"=="Z" SET "PROG_OPER="&&GOTO:MAKER_START
IF "%PROG_OPER%"=="MAKER_RESTORE" IF NOT EXIST "%SCRATCHDIR_MAKER%" MD "%SCRATCHDIR_MAKER%">NUL 2>&1
IF "%PROG_OPER%"=="MAKER_RESTORE" DISM /APPLY-IMAGE /IMAGEFILE:"%PACK_FOLDER%\%SELECT%" /INDEX:2 /APPLYDIR:"%SCRATCHDIR_MAKER%">NUL 2>&1
IF "%PROG_OPER%"=="MAKER_RESTORE" FOR %%a in (PackName PackType PackDesc PackTag REG_KEY REG_VAL RUN_MOD REG_DAT) DO (CALL SET "%%a=NULL")
IF "%PROG_OPER%"=="MAKER_RESTORE" IF EXIST "%SCRATCHDIR_MAKER%\PACKAGE.$HZ" FOR /F "eol=- TOKENS=1-2 delims==" %%a in (%SCRATCHDIR_MAKER%\PACKAGE.$HZ) DO (IF NOT "%%a"=="   " SET "%%a=%%b")
IF "%PROG_OPER%"=="MAKER_RESTORE" FOR %%a in (PackName PackType PackDesc PackTag REG_KEY REG_VAL RUN_MOD REG_DAT) DO (IF NOT DEFINED %%a CALL SET "%%a=NULL")
IF "%PROG_OPER%"=="MAKER_RESTORE" IF NOT EXIST "%SCRATCHDIR_MAKER%\PACKAGE.$HZ" ECHO PACKAGE %PackName% IS DEFUNCT&&SET "PACK_DEFUNCT=1"&&PAUSE&&GOTO:MAKER_START
IF "%PROG_OPER%"=="MAKER_RESTORE" IF EXIST "%MAKER_FOLDER%" RD /S /Q "%MAKER_FOLDER%">NUL 2>&1
IF "%PROG_OPER%"=="MAKER_RESTORE" IF NOT EXIST "%MAKER_FOLDER%" MD "%MAKER_FOLDER%">NUL 2>&1
IF "%PROG_OPER%"=="MAKER_RESTORE" MOVE /Y "%SCRATCHDIR_MAKER%\PACKAGE.$HZ" "%MAKER_FOLDER%">NUL 2>&1
IF "%PROG_OPER%"=="MAKER_RESTORE" DISM /APPLY-IMAGE /IMAGEFILE:"%PACK_FOLDER%\%SELECT%" /INDEX:1 /APPLYDIR:"%MAKER_FOLDER%"
IF "%PROG_OPER%"=="MAKER_TEMPLATE" CALL:PACK_TEMPLATE
IF DEFINED PROG_OPER IF EXIST "%SCRATCHDIR_MAKER%" DISM /cleanup-MountPoints>NUL 2>&1
IF DEFINED PROG_OPER IF EXIST "%SCRATCHDIR_MAKER%" RD /S /Q "\\?\%SCRATCHDIR_MAKER%" >NUL 2>&1
IF DEFINED PROG_OPER SET "PROG_OPER="
GOTO:MAKER_START
:MAKER_CREATE
CALL:PAD_LINE&&ECHO.                        Package-Create Start&&CALL:PAD_LINE
SET "SCRATCHDIR_MAKER=%PROG_SOURCE%\Scratch"
IF EXIST "%SCRATCHDIR_MAKER%" DISM /cleanup-MountPoints>NUL 2>&1
IF EXIST "%SCRATCHDIR_MAKER%" RD /S /Q "%SCRATCHDIR_MAKER%">NUL 2>&1
IF NOT EXIST "%MAKER_FOLDER%\*.*" ECHO.Project%MAKER_SLOT% is empty&&PAUSE&&EXIT /B
IF NOT DEFINED PackName ECHO.PackName is Empty&&PAUSE&&EXIT /B
IF NOT DEFINED PackType ECHO.PackType is Empty&&PAUSE&&EXIT /B
IF NOT EXIST "%SCRATCHDIR_MAKER%" MD "%SCRATCHDIR_MAKER%">NUL 2>&1
MOVE /Y "%MAKER_FOLDER%\PACKAGE.$HZ" "%SCRATCHDIR_MAKER%">NUL 2>&1
ECHO.                          Creating Package
DISM /CAPTURE-IMAGE /CAPTUREDIR:"%MAKER_FOLDER%" /IMAGEFILE:"%PACK_FOLDER%\%PackName%.$PK" /COMPRESS:%PACK_COMPRESS% /NAME:"%PackName%" /CheckIntegrity /Verify
DISM /APPEND-IMAGE /IMAGEFILE:"%PACK_FOLDER%\%PackName%.$PK" /CAPTUREDIR:"%SCRATCHDIR_MAKER%" /NAME:"%PackName%" /Description:$haZZam^^! /CheckIntegrity /Verify>NUL 2>&1
MOVE /Y "%SCRATCHDIR_MAKER%\PACKAGE.$HZ" "%MAKER_FOLDER%">NUL 2>&1
IF EXIST "%SCRATCHDIR_MAKER%" DISM /cleanup-MountPoints>NUL 2>&1
IF EXIST "%SCRATCHDIR_MAKER%" RD /S /Q "\\?\%SCRATCHDIR_MAKER%" >NUL 2>&1
CALL:PAD_LINE&&ECHO.                        Package-Create End&&CALL:PAD_LINE
IF DEFINED PROG_OPER SET "PROG_OPER="
EXIT /B
:MAKER_SLOT
SET /A MAKER_SLOT+=1
IF NOT DEFINED MAKER_SLOT SET "MAKER_SLOT=1"
IF "%MAKER_SLOT%" GEQ "6" SET "MAKER_SLOT=1"
SET "MAKER_FOLDER=%PROG_SOURCE%\Project%MAKER_SLOT%"
EXIT /B
:PACK_COMPRESS
IF NOT DEFINED PAK_XXX SET "PAK_XXX=1"
SET /A PAK_XXX+=1
IF "%PAK_XXX%" GEQ "4" SET "PAK_XXX=1"
IF "%PAK_XXX%"=="1" SET "PACK_COMPRESS=FAST"
IF "%PAK_XXX%"=="2" SET "PACK_COMPRESS=MAX"
IF "%PAK_XXX%"=="3" SET "PACK_COMPRESS=NONE"
EXIT /B
:PACK_COND
CALL ECHO INPUT REG-KEY&&ECHO (CASE SENSITIVE^^!)&&CALL:MENU_SELECT_ANY
CALL SET "REG_KEY=%SELECT%"
IF NOT DEFINED REG_KEY SET "REG_VAL="&&SET "RUN_MOD="&&SET "REG_DAT="&&CALL:PACK_MANIFEST&&EXIT /B
CALL ECHO INPUT REG-VALUE&&ECHO (CASE SENSITIVE^^!)&&CALL:MENU_SELECT_ANY
CALL SET "REG_VAL=%SELECT%"
IF NOT DEFINED REG_VAL EXIT /B
CALL REG QUERY "%REG_KEY%" /V "%REG_VAL%" >$HZ.TXT
SET COL1=&&IF EXIST $HZ.TXT FOR /F "TOKENS=* DELIMS=" %%1 in ($HZ.TXT) DO (SET COL1=%%1)
CALL ECHO [%COL1%]&&DEL $HZ.TXT>NUL 2>&1
CALL ECHO INPUT REG-VALUE TARGET DATA&&ECHO (CASE SENSITIVE^^!)&&CALL:MENU_SELECT_ANY
CALL SET "REG_DAT=%SELECT%"
ECHO PERMIT INSTALL IF DATA&&ECHO {1}MATCH&&ECHO {2}DOES NOT MATCH&&CALL:MENU_SELECT
IF NOT DEFINED SELECT SET "RUN_MOD=EQU"
IF "%SELECT%"=="1" SET "RUN_MOD=EQU"
IF "%SELECT%"=="2" SET "RUN_MOD=NEQ"
CALL:PACK_MANIFEST
EXIT /B
:MAKER_EDITOR
IF DEFINED EDIT_SETUP IF EXIST "%MAKER_FOLDER%\PACKAGE.CMD" START NOTEPAD.EXE "%MAKER_FOLDER%\PACKAGE.CMD"
IF DEFINED EDIT_MANIFEST IF EXIST "%MAKER_FOLDER%\PACKAGE.$HZ" START NOTEPAD.EXE "%MAKER_FOLDER%\PACKAGE.$HZ"
IF DEFINED EDIT_README IF EXIST "%MAKER_FOLDER%\README.TXT" START NOTEPAD.EXE "%MAKER_FOLDER%\README.TXT"
IF DEFINED EDIT_CUSTOM IF EXIST "%MAKER_FOLDER%\%EDIT_CUSTOM%" START NOTEPAD.EXE "%MAKER_FOLDER%\%EDIT_CUSTOM%"
SET "EDIT_SETUP="&&SET "EDIT_MANIFEST="&&SET "EDIT_README="&&SET "EDIT_CUSTOM="
EXIT /B
:PACK_TEMPLATE
ECHO FOLDER[Project%MAKER_SLOT%] WILL BE CLEARED&&ECHO.PRESS{Z}TO PROCEED&&CALL:MENU_SELECT
IF NOT "%SELECT%"=="Z" EXIT /B
FOR %%a in (PackName PackType PackDesc PackTag REG_KEY REG_VAL RUN_MOD REG_DAT) DO (CALL SET "%%a=")
ECHO Type of Pack?&&ECHO. {1}SCRIPTED&&ECHO. {2}DRIVER&&ECHO. {3}STORAGE&&CALL:MENU_SELECT
IF "%SELECT%"=="1" SET "PackType=SCRIPTED"
IF "%SELECT%"=="2" SET "PackType=DRIVER"
IF "%SELECT%"=="3" SET "PackType=STORAGE"
IF NOT DEFINED PackType EXIT /B
ECHO Name of Pack?&&CALL SET "PROMPT_SET=PackName"&&CALL:PROMPT_SET_ANY
IF NOT DEFINED PackName EXIT /B
DISM /cleanup-MountPoints>NUL 2>&1
ECHO Description?&&CALL SET "PROMPT_SET=PackDesc"&&CALL:PROMPT_SET_ANY
IF EXIST "%MAKER_FOLDER%" RD /S /Q "%MAKER_FOLDER%">NUL 2>&1
IF NOT EXIST "%MAKER_FOLDER%" MD "%MAKER_FOLDER%">NUL 2>&1
ECHO.>"%MAKER_FOLDER%\PACKAGE.$HZ"&&CALL:PACK_MANIFEST
IF "%PackType%"=="SCRIPTED" CALL:PACK_VARS&&CALL:PACK_END
EXIT /B
:PAK_LOAD
FOR %%a in (PackName PackType PackDesc PackTag REG_KEY REG_VAL RUN_MOD REG_DAT) DO (CALL SET %%a=NULL)
IF EXIST "%MAKER_FOLDER%\PACKAGE.$HZ" COPY /Y "%MAKER_FOLDER%\PACKAGE.$HZ" "0002"&&FOR /F "eol=- TOKENS=1-2 delims==" %%a in (0002) DO (IF NOT "%%a"=="   " SET "%%a=%%b")
DEL /Q /F "0002">NUL 2>&1
EXIT /B
:PACK_SAVE
MOVE /Y "%MAKER_FOLDER%\PACKAGE.$HZ" "0002"&&FOR /F "eol=- TOKENS=1-2 delims==" %%a in (0002) DO (CALL ECHO %%a=%%%%a%%>>"%MAKER_FOLDER%\PACKAGE.$HZ")
DEL /Q /F "0002">NUL 2>&1
EXIT /B
:PACK_MANIFEST
FOR %%a in (PackName PackType PackDesc PackTag REG_KEY REG_VAL RUN_MOD REG_DAT) DO (IF NOT DEFINED %%a CALL SET %%a=NULL)
(ECHO ----------[Package Manifest]---------=&&ECHO.PackName=%PackName%&&ECHO.PackType=%PackType%&&ECHO.PackDesc=%PackDesc%&&ECHO.PackTag=%PackTag%&&ECHO.REG_KEY=%REG_KEY%&&ECHO.REG_VAL=%REG_VAL%&&ECHO.RUN_MOD=%RUN_MOD%&&ECHO.REG_DAT=%REG_DAT%&&ECHO.Created=%date% %time%&&ECHO ------------[END OF FILE]------------=)>"%MAKER_FOLDER%\PACKAGE.$HZ"
EXIT /B
:PACK_VARS
ECHO;:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;::THE REGISTRY/FILES ARE NORMAL DURING SETUPCOMPLETE,RUNONCE,^& LISTMGR ::>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;::         DURING THE IMAGE-APPLY THEY ARE EXTERNALLY MOUNTED          ::>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;::  IMAGE-APPLY=OFFLINE, SETUP-COMPLETE=PRE-LOGON, RUN-ONCE=1ST LOGON  ::>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;:: THESE VARIABLES ARE BUILT-IN AND CAN HELP KEEP A SCRIPT CONSISTANT  ::>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;::      THROUGHOUT THE ENTIRE PROCESS AND FOR LIVE-PACKAGE APPLY       ::>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;::       FOLDER USER:        (%%USRTAR%%)       = ($:\Users\Default)     ::>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;::       FOLDER WINDOWS:     (%%WINTAR%%)       = ($:\Windows)           ::>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;::       FOLDER BASE:        (%%DRVTAR%%)       = ($:)                   ::>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;::       REG-HIVE USER:     (%%HIVE_USER%%)     = (HKCU)                 ::>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;::       REG-HIVE SOFTWARE: (%%HIVE_SOFTWARE%%) = (HKLM\SOFTWARE)        ::>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;::       REG-HIVE SYSTEM:   (%%HIVE_SYSTEM%%)   = (HKLM\SYSTEM)          ::>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;:::::::::::::::::::::::::::::::START:OF:PACK:::::::::::::::::::::::::::::>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO.>>"%MAKER_FOLDER%\PACKAGE.CMD"
EXIT /B
:PACK_END
ECHO.>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;::::::::::::::::::::::::::::::::END:OF:PACK::::::::::::::::::::::::::::::>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::>>"%MAKER_FOLDER%\PACKAGE.CMD"
EXIT /B
:PACK_CONFIG
SET "PACK_ENT="&&FOR /F "delims=" %%G in ('CMD.EXE /D /U /C ECHO %PACK_CONFIG%^| FIND /V ""') do (CALL SET /A PACK_ENT+=1&&SET "PACK_CFG=%%G"&&CALL:PACK_CONFIG_CNT)
EXIT /B
:PACK_CONFIG_CNT
SET "PACK_ENT_%PACK_ENT%=%PACK_CFG%"
EXIT /B
:PACKEX_MENU_START
@ECHO OFF&&CALL:COLOR_CHK&&CALL:TITLEGEN&&CALL:PACKEX_MENU_DISPLAY
IF "%EXAMPLE_MODE%"=="INSTANT" IF NOT DEFINED EXAMPLE_NOPROMPT SET "PROMPT_SET=PACKEX_BATCH"&&CALL:PROMPT_SET&&IF NOT DEFINED PACKEX_BATCH EXIT /B
IF "%EXAMPLE_MODE%"=="INSTANT" FOR %%a in (%PACKEX_BATCH%) DO (CALL SET EXAMPLE=%%a&&CALL:PACKEX_PROC)
IF "%EXAMPLE_MODE%"=="CREATE" SET "PROMPT_SET=EXAMPLE"&&CALL:PROMPT_SET&&IF NOT DEFINED EXAMPLE EXIT /B
IF "%EXAMPLE_MODE%"=="CREATE" ECHO [Project%MAKER_SLOT%] FOLDER WILL BE CLEARED&&ECHO.PRESS{Z}TO PROCEED&&SET "PROMPT_SET=CONFIRM"&&CALL:PROMPT_SET
IF "%EXAMPLE_MODE%"=="CREATE" IF NOT "%CONFIRM%"=="Z" EXIT /B
IF "%EXAMPLE_MODE%"=="CREATE" CALL:PACKEX_PROC
IF "%EXAMPLE_MODE%"=="INSTANT" SET "MAKER_FOLDER=%PROG_SOURCE%\Project%MAKER_SLOT%"
IF EXIST "%PROG_SOURCE%\SCRATCH" RD /S /Q "\\?\%PROG_SOURCE%\SCRATCH" >NUL 2>&1
SET "EXAMPLE_MODE="&&SET "EXAMPLE_NOPROMPT="
EXIT /B
:PACKEX_MENU_DISPLAY
CLS&&CALL:PAD_LINE&&ECHO                                {TASKS}&&CALL:PAD_LINE
IF "%EXAMPLE_MODE%"=="INSTANT" ECHO  {A1} End Task                                              (INSTANT)
IF "%EXAMPLE_MODE%"=="INSTANT" ECHO  {A2} Start/Stop Service                                    (INSTANT)
IF "%EXAMPLE_MODE%"=="INSTANT" ECHO  {A3} List Accounts                                         (INSTANT)
IF "%EXAMPLE_MODE%"=="INSTANT" ECHO  {FS} FOR-Sight                                             (INSTANT)
ECHO  {M1} Create Local User-Account                               (MIXED)
ECHO  {M2} Create Local Admin-Account                              (MIXED)
IF "%EXAMPLE_MODE%"=="INSTANT" GOTO:PACKEX_JUMP
CALL:PAD_LINE&&ECHO                          {Lists: ImageApply}&&CALL:PAD_LINE
ECHO  {S01} Setup+ Disable Hello                                (SCRIPTED)
ECHO  {S02} Setup+ Unattended Answer-File                       (SCRIPTED)
ECHO  {S03} Setup+ Initial RunOnce/Async Delay Desktop          (SCRIPTED)
CALL:PAD_LINE&&ECHO                          {Any-Time Any-List}&&CALL:PAD_LINE
ECHO  {S04} Quicker Preparing Desktop...                        (SCRIPTED)
ECHO  {S05} WinLogon Verbose                                    (SCRIPTED)
ECHO  {S06} LSA Strict Rules                                    (SCRIPTED)
ECHO  {S07} Local Accounts Only                                 (SCRIPTED)
ECHO  {S08} Store Disable                                       (SCRIPTED)
ECHO  {S09} OneDrive Disable                                    (SCRIPTED)
ECHO  {S10} Cloud Content Disable                               (SCRIPTED)
ECHO  {S11} UAC Prompt Always/Never                             (SCRIPTED)
ECHO  {S12} NotificationCenter Disable                          (SCRIPTED)
ECHO  {S13} Net Discovery Enable/Disable                        (SCRIPTED)
ECHO  {S14} Bluetooth Advertising Enable/Disable                (SCRIPTED)
ECHO  {S15} Virtualization Based Security Enable/Disable        (SCRIPTED)
ECHO  {S16} Disable Explorer URL Access                         (SCRIPTED)
ECHO  {S17} Background Apps Disable                             (SCRIPTED)
ECHO  {S18} DCOM Enable/Disable (Breaks Stuff)                  (SCRIPTED)
ECHO  {S19} Prioritize Ethernet                                 (SCRIPTED)
ECHO  {S20} Prioritize WiFi                                     (SCRIPTED)
ECHO  {S21} Wakelocks General Disable                           (SCRIPTED)
ECHO  {S22} Wakelocks Network Disable                           (SCRIPTED)
::ECHO  {S23}
ECHO  {S24} VB-Script Execution Disable                         (SCRIPTED)
ECHO  {S25} Feature Updates Threshold                           (SCRIPTED)
ECHO  {S26} Driver Updates Enable/Disable                       (SCRIPTED)
ECHO  {S30} Run Program Every Boot                              (SCRIPTED)
ECHO  {S40} Dark/Light Theme                                    (SCRIPTED)
ECHO  {S41} Wallpaper Single (WIP)
ECHO  {S42} Wallpaper Folder (WIP)
CALL:PAD_LINE&&ECHO                    {Lists: SetupComplete-RunOnce}&&CALL:PAD_LINE
ECHO  {L01} Pagefile Disable                                    (SCRIPTED)
ECHO  {L02} Import Firewall Rules.XML                           (SCRIPTED)
ECHO  {L03} Taskmgr Prefs                                       (SCRIPTED)
ECHO  {L04} Boot Timeout                                        (SCRIPTED)
ECHO  {L10} Tasks-Enable/Disable/Delete                         (SCRIPTED)
CALL:PAD_LINE&&ECHO                                 {MISC}&&CALL:PAD_LINE
ECHO  {P01} Pack-Permit Demo
ECHO  {P02} MSI Installer Example                               (SCRIPTED)
ECHO  {DBG} DEBUG PAUSE/ECHO-ON/ECHO-OFF                        (SCRIPTED)
:PACKEX_JUMP
CALL:PAD_LINE&&CALL:PAD_PREV
EXIT /B
:PACKEX_PROC
CALL:MOUNT_INT
SET PASS=&&FOR %%a in (A1 A2 A3 FS M1 M2 S01 S02 S03 S04 S05 S06 S07 S08 S09 S10 S11 S12 S13 S14 S15 S16 S17 S18 S19 S20 S21 S22 S24 S25 S26 S30 S40 L01 L02 L03 L04 L10 P01 P02 DBG) DO (IF "%%a"=="%EXAMPLE%" SET PASS=1)
IF NOT "%PASS%"=="1" EXIT /B
FOR %%a in (PackName PackType PackDesc PackTag REG_KEY REG_VAL RUN_MOD REG_DAT) DO (CALL SET "%%a=NULL")
IF "%EXAMPLE_MODE%"=="INSTANT" SET "MAKER_FOLDER=%PROG_SOURCE%\PROJECTX"
IF DEFINED MAKER_FOLDER RD /S /Q "%MAKER_FOLDER%">NUL 2>&1
IF NOT EXIST "%MAKER_FOLDER%" MD "%MAKER_FOLDER%">NUL 2>&1
CALL:PACK_VARS
IF "%EXAMPLE%"=="A1" CALL:PACKEX_TASKMGR_APP
IF "%EXAMPLE%"=="A2" CALL:PACKEX_SVCMGR_APP
IF "%EXAMPLE%"=="A3" CALL:PACKEX_QUERY_USERS
IF "%EXAMPLE%"=="FS" CALL:FOR_SIGHT
IF "%EXAMPLE%"=="A4" CALL:PACKEX_SHUTDOWN
IF "%EXAMPLE%"=="M1" CALL:PACKEX_NEWUSER
IF "%EXAMPLE%"=="M2" CALL:PACKEX_NEWADMIN
IF "%EXAMPLE%"=="S01" CALL:PACKEX_DISABLE_HELLO
IF "%EXAMPLE%"=="S02" CALL:PACKEX_ANSWER_FILE
IF "%EXAMPLE%"=="S03" CALL:PACKEX_DELAY_DESKTOP
IF "%EXAMPLE%"=="S04" CALL:PACKEX_SHORTEN_PREPARING
IF "%EXAMPLE%"=="S05" CALL:PACKEX_WINLOGON_VERBOSE
IF "%EXAMPLE%"=="S06" CALL:PACKEX_LSA_STRICT
IF "%EXAMPLE%"=="S07" CALL:PACKEX_LOCAL_ACCOUNT
IF "%EXAMPLE%"=="S08" CALL:PACKEX_STORE
IF "%EXAMPLE%"=="S09" CALL:PACKEX_ONEDRIVE
IF "%EXAMPLE%"=="S10" CALL:PACKEX_CLOUD_CONTENT
IF "%EXAMPLE%"=="S11" CALL:PACKEX_UAC
IF "%EXAMPLE%"=="S12" CALL:PACKEX_NOTIFICATION_CENTER
IF "%EXAMPLE%"=="S13" CALL:PACKEX_LLT_DISCOVERY_RSPNDR
IF "%EXAMPLE%"=="S14" CALL:PACKEX_BT_VISIBILITY
IF "%EXAMPLE%"=="S15" CALL:PACKEX_VBS
IF "%EXAMPLE%"=="S16" CALL:EXPLORER_URL_ACCESS
IF "%EXAMPLE%"=="S17" CALL:PACKEX_BACKGROUND_APPS
IF "%EXAMPLE%"=="S18" CALL:PACKEX_DCOM
IF "%EXAMPLE%"=="S19" CALL:PACKEX_PRIORITIZE_ETHERNET
IF "%EXAMPLE%"=="S20" CALL:PACKEX_PRIORITIZE_WIFI
IF "%EXAMPLE%"=="S21" CALL:PACKEX_WAKELOCKS
IF "%EXAMPLE%"=="S22" CALL:PACKEX_WAKELOCKS_NET
::IF "%EXAMPLE%"=="S23"
IF "%EXAMPLE%"=="S24" CALL:PACKEX_SCRIPTHOST
IF "%EXAMPLE%"=="S25" CALL:PACKEX_FEATURE_UPDATE_THRESHOLD
IF "%EXAMPLE%"=="S26" CALL:PACKEX_DRIVER_UPDATE
IF "%EXAMPLE%"=="S30" CALL:PACKEX_STARTUP_USER
IF "%EXAMPLE%"=="S40" CALL:PACKEX_COLOR_MODE_TOGGLE
::IF "%EXAMPLE%"=="S41" 
::IF "%EXAMPLE%"=="S42" 
IF "%EXAMPLE%"=="L01" CALL:PACKEX_PAGEFILE
IF "%EXAMPLE%"=="L02" CALL:PACKEX_FIREWALL_IMPORT
IF "%EXAMPLE%"=="L03" CALL:PACKEX_TASKMGR_PREF
IF "%EXAMPLE%"=="L04" CALL:PACKEX_BOOT_TIMEOUT
IF "%EXAMPLE%"=="L10" CALL:PACKEX_TASKS
IF "%EXAMPLE%"=="P01" CALL:PACKEX_PACK_PERMIT_EXAMPLE
IF "%EXAMPLE%"=="P02" CALL:PACKEX_MSI_EXAMPLE
IF "%EXAMPLE%"=="DBG" CALL:PACKEX_DEBUG
IF "%PackType%"=="SCRIPTED" CALL:PACK_END
CALL:PACK_MANIFEST>NUL 2>&1
IF "%EXAMPLE_MODE%"=="INSTANT" CALL:MAKER_CREATE>NUL 2>&1
IF "%EXAMPLE_MODE%"=="INSTANT" SET "IMAGEFILE_PACK=%PACK_FOLDER%\%PackName%.$PK"&&CALL:PACK_INSTALL>NUL 2>&1
IF "%EXAMPLE_MODE%"=="INSTANT" SET "MAKER_FOLDER=%PROG_SOURCE%\Project%MAKER_SLOT%"&&DEL /Q /F "%PACK_FOLDER%\%PackName%.$PK">NUL 2>&1
IF EXIST "%PROG_SOURCE%\PROJECTX" RD /S /Q "%PROG_SOURCE%\PROJECTX">NUL 2>&1
IF "%EXAMPLE_MODE%"=="CREATE" IF DEFINED EXAMPLE CALL:MAKER_EDITOR
IF EXIST "%PROG_SOURCE%\ScratchPack" DISM /cleanup-MountPoints>NUL 2>&1
IF EXIST "%PROG_SOURCE%\ScratchPack" ATTRIB -R -S -H "%PROG_SOURCE%\ScratchPack" /S /D /L>NUL 2>&1
IF EXIST "%PROG_SOURCE%\ScratchPack" RD /S /Q "\\?\%PROG_SOURCE%\ScratchPack">NUL 2>&1
SET EXAMPLE=
EXIT /B
:PACKEX_SVCMGR_APP
CLS&&ECHO.&&CALL:PAD_LINE&&ECHO                           The Service Reaper&&CALL:PAD_LINE
IF EXIST SVC.TXT DEL SVC.TXT>NUL
SET SVC_MODE=&&REG QUERY "%HIVE_SYSTEM%\ControlSet001\Services" /f Type /c /e /s>>"SVC.TXT"
SET SVC_CNT=&&FOR /F "TOKENS=1-9 DELIMS=\ " %%a in (SVC.TXT) DO (
IF "%%a"=="HKEY_LOCAL_MACHINE" IF NOT "%%e"=="" CALL SET SVC_NAME=%%e%%f%%g%%h%%i
IF "%%a"=="Type" IF "%%c"=="0x10" CALL:SVC_QUERY
IF "%%a"=="Type" IF "%%c"=="0x20" CALL:SVC_QUERY)
IF EXIST SVC.TXT DEL SVC.TXT>NUL
CALL:PAD_LINE&&ECHO                     {1}Start Service {2}Stop Service&&CALL:PAD_LINE&&CALL:PAD_PREV&&CALL:MENU_SELECT
IF NOT "%SELECT%"=="1" IF NOT "%SELECT%"=="2"  EXIT /B
IF "%SELECT%"=="1" SET "SVC_MODE=START"
IF "%SELECT%"=="2" SET "SVC_MODE=STOP"
CALL:PAD_LINE&&ECHO                    %SVC_MODE% WHICH SVC{#}?&&CALL:PAD_LINE&&CALL:PAD_PREV&&CALL:MENU_SELECT
CALL:EXIT_FLAGGER
IF "%EXIT_FLAGGER%"=="1" EXIT /B
IF "%SVC_MODE%"=="START" CALL SC START %%SVC_CNT_%SELECT%%%
IF "%SVC_MODE%"=="STOP" CALL SC STOP %%SVC_CNT_%SELECT%%%
SET SVC_MODE=&&CALL:PAUSED
GOTO:PACKEX_SVCMGR_APP
:SVC_QUERY
CALL SET /A SVC_CNT+=1
FOR /F "TOKENS=1-9 DELIMS= " %%1 in ('SC QUERY %SVC_NAME%') DO (IF "%%1"=="STATE" CALL SET SVC_STATE=%%4)
CALL ECHO  {%SVC_CNT%}	[%SVC_NAME%]	[State][%SVC_STATE%]&&CALL SET SVC_CNT_%SVC_CNT%=%SVC_NAME%
EXIT /B
:PACKEX_TASKMGR_APP
CLS&&ECHO.
CALL:PAD_LINE&&ECHO                            The Task Reaper&&CALL:PAD_LINE
TASKLIST /FO LIST>TSK.TXT
SET TSK_CNT=&&FOR /F "TOKENS=1-9 DELIMS=: " %%a in (TSK.TXT) DO (
IF "%%a"=="Image" CALL SET TSK_NAME=%%c%%d%%e%%f%%g
IF "%%a"=="PID" CALL SET TSK_PID=%%b
IF "%%a"=="Mem" CALL SET TSK_MEM=%%c&&CALL:TASK_QUERY)
IF EXIST TSK.TXT DEL TSK.TXT>NUL
CALL:PAD_LINE&&ECHO                            END WHICH TASK{#}?&&CALL:PAD_LINE&&CALL:PAD_PREV&&CALL:MENU_SELECT
CALL:EXIT_FLAGGER
IF "%EXIT_FLAGGER%"=="1" EXIT /B
CALL TASKKILL /F /IM %%TSK_CNT_%SELECT%%%
CALL:PAUSED
GOTO:PACKEX_TASKMGR_APP
:TASK_QUERY
CALL SET /A TSK_CNT+=1
CALL ECHO  {%TSK_CNT%}	[%TSK_NAME%]	[PID][%TSK_PID%]	[MEM][%TSK_MEM%] KB&&CALL SET TSK_CNT_%TSK_CNT%=%TSK_NAME%
EXIT /B
:PACKEX_QUERY_USERS
CLS&&CALL:PAD_LINE&&ECHO                       USER ACCOUNT ENUMERATION&&CALL:PAD_LINE
NET USER>USER.TXT
FOR /F "tokens=1-9 skip=4 delims= " %%a IN (USER.TXT) DO (
IF NOT "%%a"=="The" IF NOT "%%a"=="" NET USER %%a&&CALL:PAD_LINE
IF NOT "%%a"=="The" IF NOT "%%b"=="" NET USER %%b&&CALL:PAD_LINE
IF NOT "%%a"=="The" IF NOT "%%c"=="" NET USER %%c&&CALL:PAD_LINE
IF NOT "%%a"=="The" IF NOT "%%d"=="" NET USER %%d&&CALL:PAD_LINE
IF NOT "%%a"=="The" IF NOT "%%e"=="" NET USER %%e&&CALL:PAD_LINE
IF NOT "%%a"=="The" IF NOT "%%f"=="" NET USER %%f&&CALL:PAD_LINE
IF NOT "%%a"=="The" IF NOT "%%g"=="" NET USER %%g&&CALL:PAD_LINE
IF NOT "%%a"=="The" IF NOT "%%h"=="" NET USER %%h&&CALL:PAD_LINE
IF NOT "%%a"=="The" IF NOT "%%i"=="" NET USER %%i&&CALL:PAD_LINE)
DEL /Q /F USER.TXT>NUL
ECHO                    END OF USER ACCOUNT ENUMERATION&&CALL:PAD_LINE
CALL:PAUSED
EXIT /B
:FOR_SIGHT
::HIGH I/O PARAMETER PARSER
@ECHO OFF&&CLS&&CALL:PAD_LINE&&ECHO  FOR~SIGHT - WANNA ARGUE?&&CALL:PAD_LINE
IF NOT DEFINED FOR_SAV SET "FOR_SAV=FRESH"&&SET "CLM_TGT=1"&&SET "CMD_MODE=INT"&&SET "GET_ROW=1"
IF EXIST EXT.CMD SET /P CUR_CMD=<EXT.CMD
IF NOT DEFINED CUR_CMD SET "CUR_CMD=VER"
IF DEFINED CUR_CMD %CUR_CMD% >$FOR
SET "ROW="&&IF EXIST "$FOR" FOR /F "TOKENS=1-9 DELIMS=<>()" %%A IN ($FOR) DO (SET "ARGUE=%%A%%B%%C%%D%%E%%F%%G%%H"&&CALL:ARGUE)
IF EXIST "$FOR" SET "MARK="&&DEL /F $FOR>NUL 2>&1
IF DEFINED FS_LAST ECHO  {FOR} %FS_LAST%
CALL:PAD_LINE&&ECHO  {T}CLM[%CLM_TGT%] {F}ull  {R}ef          {G}o  {V}iew  {M}ode[%FOR_SAV%]  {Q}uit&&CALL:PAD_LINE
ECHO  {D}ELIMS[%DELIMS%]  {C}MD [%CUR_CMD%]&&CALL:PAD_LINE&&ECHO                  Press (Enter) to reparse FOR results&&CALL:MENU_SELECT
IF "%SELECT%"=="Q" EXIT /B
IF "%SELECT%"=="G" START CMD /C FOR.CMD
IF "%SELECT%"=="V" START NOTEPAD.EXE FOR.CMD
IF "%SELECT%"=="T" IF NOT DEFINED ROW_EXT SET "SELECT="&&SET /A "CLM_TGT+=1"&&IF "%CLM_TGT%"=="9" SET "CLM_TGT=1"
IF "%SELECT%"=="T" IF DEFINED ROW_EXT SET "SELECT="&&SET /A "CLM_TGT+=1"&&IF "%CLM_TGT%"=="20" SET "CLM_TGT=1"
IF "%SELECT%"=="M" IF "%FOR_SAV%"=="FRESH" SET "FOR_SAV=REUSE"&&SET "SELECT="&&GOTO:FOR_SIGHT
IF "%SELECT%"=="M" IF "%FOR_SAV%"=="REUSE" SET "FOR_SAV=FRESH"&&SET "SELECT="&&GOTO:FOR_SIGHT
IF "%SELECT%"=="F" IF NOT DEFINED ROW_EXT SET "ROW_EXT=1"&&SET "SELECT="&&GOTO:FOR_SIGHT
IF "%SELECT%"=="F" IF DEFINED ROW_EXT SET "ROW_EXT="&&SET "SELECT="&&SET "CLM_TGT=1"&&GOTO:FOR_SIGHT
IF "%SELECT%"=="R" IF NOT DEFINED FOR_REF SET "FOR_REF=1"&&SET "SELECT="&&GOTO:FOR_SIGHT
IF "%SELECT%"=="R" IF DEFINED FOR_REF SET "FOR_REF="&&SET "SELECT="&&GOTO:FOR_SIGHT
IF "%SELECT%"=="C" IF NOT EXIST EXT.CMD ECHO;VER.EXE>EXT.CMD
IF "%SELECT%"=="C" SET "SELECT="&&CALL:PAD_LINE&&START NOTEPAD.EXE EXT.CMD&&GOTO:FOR_SIGHT
IF "%SELECT%"=="D" SET SELECT=&&SET "PROMPT_SET=DELIMS"&&CALL:PROMPT_SET_ANY
IF "%SELECT%" GTR "0" SET "SKIP_CNT=%SELECT%"&&SET "ROW_TGT=%SELECT%"
IF "%SELECT%" GTR "0" SET "MARK=1"&&SET /A "SKIP_CNT-=1"
IF "%SELECT%" GTR "0" CALL SET "SKIPPER=SKIP=%SKIP_CNT%"
IF "%SELECT%"=="1" SET "SKIPPER="
GOTO:FOR_SIGHT
:PACKEX_NEWUSER
SET "PackType=SCRIPTED"&&SET "PackName=Add_User"&&SET "PackDesc=Creates Local User-Account"
ECHO       - USERNAME? -
ECHO     - ENTER USERNAME -
ECHO   - 0-9 A-Z - NO SPACES -
ECHO      (ENTER) TO CLEAR
SET PROMPT_SET=NEWUSER1&&CALL:PROMPT_SET_ANY
IF NOT DEFINED NEWUSER1 EXIT /B
ECHO;Net User %NEWUSER1% /add>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Net User %NEWUSER1% /passwordreq:No>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Net User %NEWUSER1% /passwordchg:No>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Net Accounts /maxpwage:unlimited>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;WMIC USERACCOUNT WHERE Name='%NEWUSER1%' SET PasswordExpires=FALSE>>"%MAKER_FOLDER%\PACKAGE.CMD"
EXIT /B
:PACKEX_NEWADMIN
SET "PackType=SCRIPTED"&&SET "PackName=Add_Admin"&&SET "PackDesc=Creates Local Admin-Account"
ECHO       - USERNAME? -
ECHO     - ENTER USERNAME -
ECHO   - 0-9 A-Z - NO SPACES -
ECHO      (ENTER) TO CLEAR
SET PROMPT_SET=NEWUSER1&&CALL:PROMPT_SET_ANY
IF NOT DEFINED NEWUSER1 EXIT /B
ECHO;Net User %NEWUSER1% /add>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Net User %NEWUSER1% /passwordreq:No>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Net User %NEWUSER1% /passwordchg:No>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Net Accounts /maxpwage:unlimited>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Net localgroup Administrators %NEWUSER1% /add>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;WMIC USERACCOUNT WHERE Name='%NEWUSER1%' SET PasswordExpires=FALSE>>"%MAKER_FOLDER%\PACKAGE.CMD"
EXIT /B
:PACKEX_BOOT_TIMEOUT
SET "PackType=SCRIPTED"&&SET "PackName=Boot_Timeout"&&SET "PackDesc=Change Boot Timeout"
ECHO;::LIVE COMMAND, NEEDS TO BE APPLIED LIVE, SETUPCOMPLETE, OR RUNONCE>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO   - ENTER BOOT TIMEOUT IN SECONDS -
SET "PROMPT_SET=BOOT_TIMEOUT"&&CALL:PROMPT_SET
IF NOT DEFINED BOOT_TIMEOUT EXIT /B
ECHO;BCDEDIT /TIMEOUT %BOOT_TIMEOUT% >>"%MAKER_FOLDER%\PACKAGE.CMD"
EXIT /B
:PACKEX_STARTUP_USER
SET "PackType=SCRIPTED"&&SET "PackName=UserLogon_Run"&&SET "PackDesc=Run a Program or batch at User Login"
ECHO;Reg.exe add "%%HIVE_SOFTWARE%%\Microsoft\Windows\CurrentVersion\Run" /v "RunUser" /t REG_EXPAND_SZ /d "%%PROGRAMDATA%%\USERLOGON.CMD" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;ECHO;EXPLORER.EXE C:\WINDOWS\SYSTEM32\NOTEPAD.EXE^>"%%PROGRAMDATA%%\USERLOGON.CMD">>"%MAKER_FOLDER%\PACKAGE.CMD"
EXIT /B
:PACKEX_AUTOPILOT_STRAP
SET "PackType=SCRIPTED"&&SET "PackName=AUTOPILOT_ENABLED"&&SET "PackDesc=AUTOPILOT Enabled and NextBoot to Recovery"
ECHO;::LIVE COMMAND, NEEDS TO BE APPLIED LIVE, SETUPCOMPLETE, OR RUNONCE>>"%MAKER_FOLDER%\PACKAGE.CMD"
EXIT /B
:PACKEX_TASKS
ECHO    - Tasks Pack Version -&&ECHO {1}Enable {2}Disable {3}Delete&&CALL:MENU_SELECT
IF "%SELECT%"=="1" SET "PackType=SCRIPTED"&&SET "PackName=TASK_ENABLE"&&SET "PackDesc=Add to a SETUPCOMPLETE.LST/RUNONCE.LST"
IF "%SELECT%"=="2" SET "PackType=SCRIPTED"&&SET "PackName=TASK_DISABLE"&&SET "PackDesc=Add to a SETUPCOMPLETE.LST/RUNONCE.LST"
IF "%SELECT%"=="3" SET "PackType=SCRIPTED"&&SET "PackName=TASK_DELETE"&&SET "PackDesc=Add to A SETUPCOMPLETE.LST/RUNONCE.LST"
ECHO;::CREATE AND PLACE TASKS.LST IN PROJECT FOLDER, THEN CREATE PACK>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;::ADD TO A SETUPCOMPLETE.LST/RUNONCE.LST,FIXES ACCESS DENIED ISSUE>>"%MAKER_FOLDER%\PACKAGE.CMD"
IF "%SELECT%"=="1" ECHO;::TASKS ENABLE>>"%MAKER_FOLDER%\PACKAGE.CMD"
IF "%SELECT%"=="2" ECHO;::TASKS DISABLE>>"%MAKER_FOLDER%\PACKAGE.CMD"
IF "%SELECT%"=="3" ECHO;::TASKS DELETE>>"%MAKER_FOLDER%\PACKAGE.CMD"
IF "%SELECT%"=="1" ECHO;FOR /F "TOKENS=1 SKIP=1 DELIMS={}" %%%%1 in (TASKS.LST) DO (SCHTASKS /CHANGE /TN "\%%%%1" /ENABLE /F) >>"%MAKER_FOLDER%\PACKAGE.CMD"
IF "%SELECT%"=="2" ECHO;FOR /F "TOKENS=1 SKIP=1 DELIMS={}" %%%%1 in (TASKS.LST) DO (SCHTASKS /CHANGE /TN "\%%%%1" /DISABLE /F) >>"%MAKER_FOLDER%\PACKAGE.CMD"
IF "%SELECT%"=="3" ECHO;FOR /F "TOKENS=1 SKIP=1 DELIMS={}" %%%%1 in (TASKS.LST) DO (SCHTASKS /DELETE /TN "\%%%%1" /F) >>"%MAKER_FOLDER%\PACKAGE.CMD"
EXIT /B
:PACKEX_PAGEFILE
SET "PackType=SCRIPTED"&&SET "PackName=Pagefile_Disable"&&SET "PackDesc=Disable Pagefile"
ECHO;::LIVE COMMAND, NEEDS TO BE APPLIED LIVE, SETUPCOMPLETE, OR RUNONCE>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Reg.exe add "%%HIVE_SYSTEM%%\ControlSet001\Control\Session Manager\Memory Management" /v "ClearPageFileAtShutdown" /t REG_DWORD /d "1" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Reg.exe add "%%HIVE_SYSTEM%%\ControlSet001\Control\Session Manager\Memory Management" /v "DisablePagingExecutive" /t REG_DWORD /d "1" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Reg.exe add "%%HIVE_SYSTEM%%\ControlSet001\Control\Session Manager\Memory Management" /v "PagingFiles" /t REG_MULTI_SZ /d "" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Reg.exe add "%%HIVE_SYSTEM%%\ControlSet001\Control\Session Manager\Memory Management" /v "ExistingPageFiles" /t REG_MULTI_SZ /d "" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;powercfg.exe -h off>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;wmic computerSYSTEM where name="%%computername%%" set AutomaticManagedPagefile=False>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;wmic pagefileset where name="C:\\pagefile.sys" delete>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;wmic pagefileset where name="D:\\pagefile.sys" delete>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;wmic pagefileset where name="E:\\pagefile.sys" delete>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;wmic pagefileset where name="F:\\pagefile.sys" delete>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;wmic pagefileset where name="G:\\pagefile.sys" delete>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;wmic pagefileset where name="H:\\pagefile.sys" delete>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;wmic pagefileset where name="N:\\pagefile.sys" delete>>"%MAKER_FOLDER%\PACKAGE.CMD"
EXIT /B
:PACKEX_FIREWALL_IMPORT
SET "PackType=SCRIPTED"&&SET "PackName=Firewall_Import"&&SET "PackDesc=Import Windows Firewall Config .XML"
ECHO;::LIVE COMMAND, NEEDS TO BE APPLIED LIVE, SETUPCOMPLETE, OR RUNONCE>>"%MAKER_FOLDER%\PACKAGE.CMD"
NETSH advfirewall EXPORT "%MAKER_FOLDER%\FirewallPolicy.wfw"
ECHO;NETSH advfirewall IMPORT "FirewallPolicy.wfw">>"%MAKER_FOLDER%\PACKAGE.CMD"
EXIT /B
:PACKEX_BACKGROUND_APPS
SET "PackType=SCRIPTED"&&SET "PackName=BackgroundApps_Disable"&&SET "PackDesc=Disable Background Applications"
ECHO;Reg.exe add "%%HIVE_USER%%\SOFTWARE\Microsoft\Windows\CurrentVersion\BackgroundAccessApplications" /v "GlobalUserDisabled" /t REG_DWORD /d "1" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Reg.exe add "%%HIVE_SOFTWARE%%\Policies\Microsoft\Edge" /v "BackgroundModeEnabled" /t REG_DWORD /d "0" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
EXIT /B
:PACKEX_WAKELOCKS_NET
SET "PackType=SCRIPTED"&&SET "PackName=Wake_Net_Disable"&&SET "PackDesc=Disable Network Adapter Wakelocks"
ECHO;Reg.exe add "%%HIVE_SYSTEM%%\ControlSet001\Control\Power\PowerSettings\F15576E8-98B7-4186-B944-EAFA664402D9\DefaultPowerSchemeValues\381b4222-f694-41f0-9685-ff5bb260df2e" /v "AcSettingIndex" /t REG_DWORD /d "0" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Reg.exe add "%%HIVE_SYSTEM%%\ControlSet001\Control\Power\PowerSettings\F15576E8-98B7-4186-B944-EAFA664402D9\DefaultPowerSchemeValues\381b4222-f694-41f0-9685-ff5bb260df2e" /v "DcSettingIndex" /t REG_DWORD /d "0" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
EXIT /B
:PACKEX_WAKELOCKS
SET "PackType=SCRIPTED"&&SET "PackName=Wake_Disable"&&SET "PackDesc=Disable Wakelocks"
ECHO;Reg.exe add "%%HIVE_SYSTEM%%\ControlSet001\Control\Power\PowerSettings\238C9FA8-0AAD-41ED-83F4-97BE242C8F20\bd3b718a-0680-4d9d-8ab2-e1d2b4ac806d\DefaultPowerSchemeValues\381b4222-f694-41f0-9685-ff5bb260df2e" /v "AcSettingIndex" /t REG_DWORD /d "0" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Reg.exe add "%%HIVE_SYSTEM%%\ControlSet001\Control\Power\PowerSettings\238C9FA8-0AAD-41ED-83F4-97BE242C8F20\bd3b718a-0680-4d9d-8ab2-e1d2b4ac806d\DefaultPowerSchemeValues\381b4222-f694-41f0-9685-ff5bb260df2e" /v "DcSettingIndex" /t REG_DWORD /d "0" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
EXIT /B
:PACKEX_LSA_STRICT
SET "PackType=SCRIPTED"&&SET "PackName=LSA_Strict"&&SET "PackDesc=Strict Ruleset For Local Security Authentication"
ECHO;Reg.exe add "%%HIVE_SYSTEM%%\ControlSet001\Control\Lsa" /v "LimitBlankPasswordUse" /t REG_DWORD /d "1" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Reg.exe add "%%HIVE_SYSTEM%%\ControlSet001\Control\LSA" /v "LsaCfgFlags " /t REG_DWORD /d "1" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Reg.exe add "%%HIVE_SYSTEM%%\ControlSet001\Control\Lsa" /v "LsaPid" /t REG_DWORD /d "632" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Reg.exe add "%%HIVE_SYSTEM%%\ControlSet001\Control\Lsa" /v "ProductType" /t REG_DWORD /d "125" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Reg.exe add "%%HIVE_SYSTEM%%\ControlSet001\Control\Lsa" /v "RunAsPPL" /t REG_DWORD /d "1" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Reg.exe add "%%HIVE_SYSTEM%%\ControlSet001\Control\Lsa" /v "SubmitControl" /t REG_DWORD /d "0" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Reg.exe add "%%HIVE_SYSTEM%%\ControlSet001\Control\Lsa" /v "disabledomaincreds" /t REG_DWORD /d "1" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Reg.exe add "%%HIVE_SYSTEM%%\ControlSet001\Control\Lsa" /v "everyoneincludesanonymous" /t REG_DWORD /d "0" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Reg.exe add "%%HIVE_SYSTEM%%\ControlSet001\Control\Lsa" /v "forceguest" /t REG_DWORD /d "0" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Reg.exe add "%%HIVE_SYSTEM%%\ControlSet001\Control\Lsa" /v "NoLmHash" /t REG_DWORD /d "1" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Reg.exe add "%%HIVE_SYSTEM%%\ControlSet001\Control\Lsa" /v "restrictanonymous" /t REG_DWORD /d "1" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Reg.exe add "%%HIVE_SYSTEM%%\ControlSet001\Control\Lsa" /v "restrictanonymoussam" /t REG_DWORD /d "1" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Reg.exe add "%%HIVE_SYSTEM%%\ControlSet001\Control\Lsa" /v "RestrictRemoteSAM" /t REG_SZ /d "O:BAG:BAD:(A;;RC;;;BA)" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Reg.exe add "%%HIVE_SYSTEM%%\ControlSet001\Control\Lsa\MSV1_0" /v "allownullsessionfallback" /t REG_DWORD /d "0" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
EXIT /B
:PACKEX_STORE
SET "PackType=SCRIPTED"&&SET "PackName=Store_Disable"&&SET "PackDesc=Disable Store"
ECHO;Reg.exe add "%%HIVE_SOFTWARE%%\Policies\Microsoft\WindowsStore" /v "RemoveWindowsStore" /t REG_DWORD /d "1" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Reg.exe add "%%HIVE_USER%%\SOFTWARE\Policies\Microsoft\Windows\Explorer" /v "NoUseStoreOpenWith" /t REG_DWORD /d "1" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
EXIT /B
:PACKEX_ONEDRIVE
SET "PackType=SCRIPTED"&&SET "PackName=OneDrive_Disable"&&SET "PackDesc=Disable OneDrive"
ECHO;Reg.exe add "%%HIVE_USER%%\SOFTWARE\Classes\CLSID\{018D5C66-4533-4307-9B53-224DE2ED1FE6}" /v "SYSTEM.IsPinnedToNameSpaceTree" /t REG_DWORD /d "0" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Reg.exe delete "%%HIVE_SYSTEM%%\ControlSet001\Services\OneSyncSvc" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Reg.exe add "%%HIVE_SYSTEM%%\ControlSet001\Services\OneSyncSvc" /v "ImagePath" /t REG_EXPAND_SZ /d "NUL" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
EXIT /B
:PACKEX_CLOUD_CONTENT
SET "PackType=SCRIPTED"&&SET "PackName=Cloud_Disable"&&SET "PackDesc=Disable Cloud-Content"
ECHO;Reg.exe add "%%HIVE_SOFTWARE%%\Policies\Microsoft\Windows\CloudContent" /ve /t REG_SZ /d "" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Reg.exe add "%%HIVE_SOFTWARE%%\Policies\Microsoft\Windows\CloudContent" /v "DisableWindowsConsumerFeatures" /t REG_DWORD /d "1" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Reg.exe add "%%HIVE_SOFTWARE%%\Policies\Microsoft\Windows\CloudContent" /v "DisableSoftLanding" /t REG_DWORD /d "1" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Reg.exe add "%%HIVE_SOFTWARE%%\Policies\Microsoft\Windows\CloudContent" /v "DisableWindowsSpotlightFeatures" /t REG_DWORD /d "1" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
EXIT /B
:PACKEX_UAC
SET "PackType=SCRIPTED"&&SET "PACK_CFG_1=111"&&SET "PACK_CFG_2=000"
ECHO     - UAC Prompt -&&ECHO {1}Enable&&ECHO {2}Disable&&CALL:MENU_SELECT
IF "%SELECT%"=="1" SET "PACK_CONFIG=%PACK_CFG_1%"&&SET PackName=UAC_Prompt_Always_On&&SET PackDesc=UAC Always Prompt
IF "%SELECT%"=="2" SET "PACK_CONFIG=%PACK_CFG_2%"&&SET PackName=UAC_Prompt_Always_Off&&SET PackDesc=UAC Never Prompt
CALL:PACK_CONFIG
ECHO;Reg.exe add "%%HIVE_SOFTWARE%%\Microsoft\Windows\CurrentVersion\Policies\SYSTEM" /v "ConsentPromptBehaviorAdmin" /t REG_DWORD /d "%PACK_ENT_1%" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Reg.exe add "%%HIVE_SOFTWARE%%\Microsoft\Windows\CurrentVersion\Policies\SYSTEM" /v "ConsentPromptBehaviorUser" /t REG_DWORD /d "%PACK_ENT_2%" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Reg.exe add "%%HIVE_SOFTWARE%%\Microsoft\Windows\CurrentVersion\Policies\SYSTEM" /v "FilterAdministratorToken" /t REG_DWORD /d "%PACK_ENT_3%" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
EXIT /B
:PACKEX_NOTIFICATION_CENTER
SET "PackType=SCRIPTED"&&SET "PACK_CFG_1=0"&&SET "PACK_CFG_2=1"
ECHO   - Notification Center -&&ECHO {1}Enable&&ECHO {2}Disable&&CALL:MENU_SELECT
IF "%SELECT%"=="1" SET "PACK_CONFIG=%PACK_CFG_1%"&&SET "PackName=Notification_Center_Enable"&&SET "PackDesc=Enable Notification Center"
IF "%SELECT%"=="2" SET "PACK_CONFIG=%PACK_CFG_2%"&&SET "PackName=Notification_Center_Diable"&&SET "PackDesc=Disable Notification Center"
CALL:PACK_CONFIG
ECHO;Reg.exe add "%%HIVE_USER%%\SOFTWARE\Policies\Microsoft\Windows\Explorer" /v "DisableNotificationCenter" /t REG_DWORD /d "%PACK_ENT_1%" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
EXIT /B
:PACKEX_BT_VISIBILITY
SET "PackType=SCRIPTED"&&SET "PACK_CFG_1=1111"&&SET "PACK_CFG_2=0000"
ECHO   - Bluetooth Advertising -&&ECHO {1}Enable&&ECHO {2}Disable&&CALL:MENU_SELECT
IF "%SELECT%"=="1" SET "PACK_CONFIG=%PACK_CFG_1%"&&SET "PackName=BT_Visibility_On"&&SET "PackDesc=Enable Bluetooth Advertising"
IF "%SELECT%"=="2" SET "PACK_CONFIG=%PACK_CFG_2%"&&SET "PackName=BT_Visibility_Off"&&SET "PackDesc=Disable Bluetooth Advertising"
CALL:PACK_CONFIG
ECHO;Reg.exe add "%%HIVE_SOFTWARE%%\Microsoft\PolicyManager\current\device\Bluetooth" /v "AllowAdvertising" /t REG_DWORD /d "%PACK_ENT_1%" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Reg.exe add "%%HIVE_SOFTWARE%%\Microsoft\PolicyManager\current\device\Browser" /v "AllowAddressBarDropdown" /t REG_DWORD /d "%PACK_ENT_2%" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Reg.exe add "%%HIVE_SOFTWARE%%\Microsoft\PolicyManager\current\device\SYSTEM" /v "AllowExperimentation" /t REG_DWORD /d "%PACK_ENT_3%" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Reg.exe add "%%HIVE_SOFTWARE%%\Microsoft\Windows\CurrentVersion\SmartGlass" /v "BluetoothPolicy" /t REG_DWORD /d "%PACK_ENT_4%" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
EXIT /B
:PACKEX_LLT_DISCOVERY_RSPNDR
SET "PackType=SCRIPTED"&&SET "PACK_CFG_1=1110"&&SET "PACK_CFG_2=0001"
ECHO  - Link-Layer-Topology Discovery Responder Driver -&&ECHO {1}Enable&&ECHO {2}Disable&&CALL:MENU_SELECT
IF "%SELECT%"=="1" SET "PACK_CONFIG=%PACK_CFG_1%"&&SET "PackName=LLT_Enable"&&SET "PackDesc=Enable Link-Layer-Topology Discovery Responder Driver"
IF "%SELECT%"=="2" SET "PACK_CONFIG=%PACK_CFG_2%"&&SET "PackName=LLT_Disable"&&SET "PackDesc=Disable Link-Layer-Topology Discovery Responder Driver"
CALL:PACK_CONFIG
ECHO;Reg.exe add "%%HIVE_SOFTWARE%%\Policies\Microsoft\Windows\LLTD" /v "EnableRspndr" /t REG_DWORD /d "%PACK_ENT_1%" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Reg.exe add "%%HIVE_SOFTWARE%%\Policies\Microsoft\Windows\LLTD" /v "AllowRspndrOnDomain" /t REG_DWORD /d "%PACK_ENT_2%" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Reg.exe add "%%HIVE_SOFTWARE%%\Policies\Microsoft\Windows\LLTD" /v "AllowRspndrOnPublicNet" /t REG_DWORD /d "%PACK_ENT_3%" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Reg.exe add "%%HIVE_SOFTWARE%%\Policies\Microsoft\Windows\LLTD" /v "ProhibitRspndrOnPrivateNet" /t REG_DWORD /d "%PACK_ENT_4%" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
EXIT /B
:PACKEX_VBS
SET "PackType=SCRIPTED"&&SET "PACK_CFG_1=110101"&&SET "PACK_CFG_2=000002"
ECHO  - Virtualization Based Security -&&ECHO {1}Enable&&ECHO {2}Disable&&CALL:MENU_SELECT
IF "%SELECT%"=="1" SET "PACK_CONFIG=%PACK_CFG_1%"&&SET "PackName=VBS_Enable"&&SET "PackDesc=Enable Virtualization Based Security"
IF "%SELECT%"=="2" SET "PACK_CONFIG=%PACK_CFG_2%"&&SET "PackName=VBS_Disable"&&SET "PackDesc=Disable Virtualization Based Security"
CALL:PACK_CONFIG
ECHO;Reg.exe add "%%HIVE_SYSTEM%%\ControlSet001\Control\DeviceGuard" /v "EnableVirtualizationBasedSecurity" /t REG_DWORD /d "%PACK_ENT_1%" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Reg.exe add "%%HIVE_SYSTEM%%\ControlSet001\Control\DeviceGuard" /v "RequirePlatformSecurityFeatures" /t REG_DWORD /d "%PACK_ENT_2%" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Reg.exe add "%%HIVE_SYSTEM%%\ControlSet001\Control\DeviceGuard" /v "Locked" /t REG_DWORD /d "%PACK_ENT_3%" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Reg.exe add "%%HIVE_SYSTEM%%\ControlSet001\Control\DeviceGuard\Scenarios\HypervisorEnforcedCodeIntegrity" /v "Enabled" /t REG_DWORD /d "%PACK_ENT_4%" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Reg.exe add "%%HIVE_SYSTEM%%\ControlSet001\Control\DeviceGuard\Scenarios\HypervisorEnforcedCodeIntegrity" /v "Locked" /t REG_DWORD /d "%PACK_ENT_5%" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Reg.exe add "%%HIVE_SYSTEM%%\ControlSet001\Control\LSA" /v "LsaCfgFlags " /t REG_DWORD /d "%PACK_ENT_6%" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
EXIT /B
:PACKEX_DCOM
SET "PackType=SCRIPTED"&&SET "PACK_CFG_1=Y"&&SET "PACK_CFG_2=N"&&ECHO         - DCOM -&&ECHO {1}Enable&&ECHO {2}Disable&&CALL:MENU_SELECT
IF "%SELECT%"=="1" SET "PACK_CONFIG=%PACK_CFG_1%"&&SET "PackName=DCOM_Enable"&&SET "PackDesc=Enable DCOM"
IF "%SELECT%"=="2" SET "PACK_CONFIG=%PACK_CFG_2%"&&SET "PackName=DCOM_Disable"&&SET "PackDesc=Disable DCOM"
CALL:PACK_CONFIG
ECHO;Reg.exe add "%%HIVE_SOFTWARE%%\Microsoft\Ole" /v "EnableDCOM" /t REG_SZ /d "%PACK_ENT_1%" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
EXIT /B
:PACKEX_WINLOGON_VERBOSE
SET "PackType=SCRIPTED"&&SET "PACK_CFG_1=1"&&SET "PACK_CFG_2=0"&&ECHO          - WinLogon Full Verbosity -&&ECHO {1}Enable&&ECHO {2}Disable&&CALL:MENU_SELECT
IF "%SELECT%"=="1" SET "PACK_CONFIG=%PACK_CFG_1%"&&SET "PackName=WinLogonVerbose_Enable"&&SET "PackDesc=WinLogonVerbose Enable"
IF "%SELECT%"=="2" SET "PACK_CONFIG=%PACK_CFG_2%"&&SET "PackName=WinLogonVerbose_Disable"&&SET "PackDesc=WinLogonVerbose Disable"
CALL:PACK_CONFIG
ECHO;Reg.exe add "%%HIVE_SOFTWARE%%\Microsoft\Windows\CurrentVersion\Policies\SYSTEM" /v "VerboseStatus" /t REG_DWORD /d "%PACK_ENT_1%" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
EXIT /B
:PACKEX_DISABLE_HELLO
SET "PackType=SCRIPTED"&&SET "PackName=Hello_Disable"&&SET "PackDesc=Disable creepy sentient logon hello -view notes"
ECHO;::TIME-MANDATORY: NEEDS TO BE APPLIED DURING IMAGE-APPLY STAGE($PK LIST)>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;::SETUPCOMPLETE/RUNONCE IS TOO LATE>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Reg.exe add "%%HIVE_SOFTWARE%%\Microsoft\Windows\CurrentVersion\Policies\SYSTEM" /v "EnableFirstLogonAnimation" /t REG_DWORD /d "0" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
EXIT /B
:PACKEX_SHORTEN_PREPARING
SET "PackType=SCRIPTED"&&SET "PackName=Quicker_Preparing"&&SET "PackDesc=Shortens the spinning-circle preparing Windows bit -view notes"
ECHO;::TIME-MANDATORY: NEEDS TO BE APPLIED DURING IMAGE-APPLY STAGE($PK LIST)>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;::SETUPCOMPLETE/RUNONCE IS TOO LATE>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Reg.exe add "%%HIVE_SOFTWARE%%\Microsoft\Windows\CurrentVersion\Policies\SYSTEM" /v "DelayedDesktopSwitchTimeout" /t REG_DWORD /d 0 /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
EXIT /B
:PACKEX_DELAY_DESKTOP
SET "PackType=SCRIPTED"&&SET "PackName=Desktop_Delay_1stBoot"&&SET "PackDesc=Delay explorer.exe until RunOnce/ActiveSetup completes -view notes"
ECHO;::TIME-MANDATORY: NEEDS TO BE APPLIED DURING IMAGE-APPLY STAGE($PK LIST)>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;::SETUPCOMPLETE/RUNONCE IS TOO LATE>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Reg.exe add "%%HIVE_SOFTWARE%%\Microsoft\Windows\CurrentVersion\Explorer" /v "AsyncRunOnce" /t REG_DWORD /d "0" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
EXIT /B
:PACKEX_SCRIPTHOST
SET "PackType=SCRIPTED"&&SET "PackName=VBS_Exec_Disable"&&SET "PackDesc=Disable Visual Basic Shell-Script Execution"
ECHO;Reg.exe add "%%HIVE_SOFTWARE%%\Microsoft\Windows Script Host\Settings" /v "Enabled" /t REG_DWORD /d "0" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Reg.exe add "%%HIVE_SOFTWARE%%\Classes\PROTOCOLS\Handler\vbscript" /v "DISABLED_CLSID" /t REG_SZ /d "{3050F3B2-98B5-11CF-BB82-00AA00BDCE0B}" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
EXIT /B
:EXPLORER_URL_ACCESS
SET "PackType=SCRIPTED"&&SET "PackName=ExplorerRestrictNet"&&SET "PackDesc=No Internet For Explorer.exe or driver Updates"
ECHO;Reg.exe add "%%HIVE_USER%%\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\Explorer" /v "NoInternetOpenWith" /t REG_DWORD /d "1" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Reg.exe add "%%HIVE_USER%%\SOFTWARE\Policies\Microsoft\Assistance\Client\1.0" /v "NoOnlineAssist" /t REG_DWORD /d "1" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Reg.exe add "%%HIVE_SOFTWARE%%\Microsoft\Windows\CurrentVersion\DriverSearching" /v "SearchOrderConfig" /t REG_DWORD /d "0" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
EXIT /B
:PACKEX_LOCAL_ACCOUNT
SET "PackType=SCRIPTED"&&SET "PackName=Online_Accounts_Disabled"&&SET "PackDesc=Only Allow Local Accounts to login"
ECHO;Reg.exe add "%%HIVE_SOFTWARE%%\Microsoft\Windows\CurrentVersion\Policies\SYSTEM" /v "NoConnectedUser" /t REG_DWORD /d "3" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
EXIT /B
:PACKEX_PRIORITIZE_ETHERNET
SET "PackType=SCRIPTED"&&SET "PackName=Prioritize_Ethernet"&&SET "PackDesc=Prioritize Ethernet Traffic Over Wi-Fi"
ECHO;::LIVE COMMAND, NEEDS TO BE APPLIED LIVE, SETUPCOMPLETE, OR RUNONCE>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;NETSH interface ipv4 SET interface "Wi-Fi" metric=5 >>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;NETSH interface ipv4 SET interface "Ethernet" metric=10 >>"%MAKER_FOLDER%\PACKAGE.CMD"
EXIT /B
:PACKEX_PRIORITIZE_WIFI
SET "PackType=SCRIPTED"&&SET "PackName=Prioritize_WiFi"&&SET "PackDesc=Prioritize Wi-Fi Traffic Over Ethernet"
ECHO;::LIVE COMMAND, NEEDS TO BE APPLIED LIVE, SETUPCOMPLETE, OR RUNONCE>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;NETSH interface ipv4 SET interface "Wi-Fi" metric=10 >>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;NETSH interface ipv4 SET interface "Ethernet" metric=5 >>"%MAKER_FOLDER%\PACKAGE.CMD"
EXIT /B
:PACKEX_DEBUG
ECHO  - DEBUG -&&ECHO {1}Pause&&ECHO {2}Echo On {3}Echo Off&&CALL:MENU_SELECT
IF "%SELECT%"=="1" SET "PackType=SCRIPTED"&&SET "PackName=Pause"&&SET "PackDesc=Place in PackageList, PAUSES EXECUTION"
IF "%SELECT%"=="1" ECHO;PAUSE>>"%MAKER_FOLDER%\PACKAGE.CMD"
IF "%SELECT%"=="2" SET "PackType=SCRIPTED"&&SET "PackName=Echo_on"&&SET "PackDesc=Place in PackageList, Turns ECHO ON"
IF "%SELECT%"=="2" ECHO;@ECHO ON>>"%MAKER_FOLDER%\PACKAGE.CMD"
IF "%SELECT%"=="3" SET "PackType=SCRIPTED"&&SET "PackName=Echo_off"&&SET "PackDesc=Place in PackageList, Turns ECHO OFF"
IF "%SELECT%"=="3" ECHO;@ECHO OFF>>"%MAKER_FOLDER%\PACKAGE.CMD"
EXIT /B
:PACKEX_TASKMGR_PREF
SET "PackType=SCRIPTED"&&SET "PackName=TaskManager_Prefs"&&SET "PackDesc=TaskManager Prefs"
ECHO;::LIVE COMMAND, NEEDS TO BE APPLIED LIVE, SETUPCOMPLETE, OR RUNONCE>>"%MAKER_FOLDER%\PACKAGE.CMD"
Reg.exe EXPORT "%HIVE_USER%\Software\Microsoft\Windows\CurrentVersion\TaskManager" "%MAKER_FOLDER%\TASKMGR_PREF.REG"
ECHO;Reg.exe IMPORT TASK_PREF.REG>>"%MAKER_FOLDER%\PACKAGE.CMD"
EXIT /B
:PACKEX_COLOR_MODE_TOGGLE
SET "PackType=SCRIPTED"&&SET "PACK_CFG_1=11"&&SET "PACK_CFG_2=00"&&ECHO {1}Light {2}Dark&&CALL:MENU_SELECT
IF "%SELECT%"=="1" SET "PACK_CONFIG=%PACK_CFG_1%"&&SET "PackName=Color_Light"&&SET "PackDesc=Use Light Mode"
IF "%SELECT%"=="2" SET "PACK_CONFIG=%PACK_CFG_2%"&&SET "PackName=Color_Dark"&&SET "PackDesc=Use Dark Mode"
CALL:PACK_CONFIG
ECHO;Reg.exe add "%%HIVE_USER%%\SOFTWARE\Microsoft\Windows\CurrentVersion\Themes\Personalize" /v "AppsUseLightTheme" /t REG_DWORD /d "%PACK_ENT_1%" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Reg.exe add "%%HIVE_USER%%\SOFTWARE\Microsoft\Windows\CurrentVersion\Themes\Personalize" /v "SYSTEMUsesLightTheme" /t REG_DWORD /d "%PACK_ENT_2%" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
EXIT /B
:PACKEX_PACK_PERMIT_EXAMPLE
SET "PackType=SCRIPTED"&&SET "PackName=PACK_PERMIT_DEMO"&&SET "PackDesc=PACK PERMIT DEMO"&&SET "REG_KEY=%%HIVE_USER%%\TEST_KEY"&&SET "REG_VAL=TEST_VAL"&&SET "RUN_MOD=EQU"&&SET "REG_DAT=1"
ECHO CLOSE REGEDIT IF ALREADY OPEN. PRESS A KEY, REGEDIT WILL REOPEN @ KEY:HKCU\TEST_KEY.&&CALL:PAUSED
Reg.exe add "%HIVE_USER%\TEST_KEY" /v "TEST_VAL" /t REG_SZ /d "1" /f>NUL 2>&1
Reg.exe add "%HIVE_USER%\Software\Microsoft\Windows\CurrentVersion\Applets\Regedit" /v "LastKey" /t REG_SZ /d "Computer\%HIVE_USER%\TEST_KEY" /f>NUL 2>&1
START REGEDIT.EXE
ECHO ~ CHANGE OR DELETE TEST_VAL DATA(1), THE PACK IS DENIED, AND TEST_KEY REMAINS ~
ECHO ~ LEAVE TEST_VAL DATA(1), PACK IS PERMITTED, AND TEST_KEY WILL BE DELETED ~
ECHO ~ NEXT, PRESS {C} TO CREATE THE PACK, PUT IN A $PK LIST, AND TEST^^! ~&&CALL:PAUSED
ECHO;@ECHO OFF>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Reg.exe delete "%%HIVE_USER%%\TEST_KEY" /f^>NUL >>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;START REGEDIT.EXE>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;ECHO TEST_KEY DELETED, PACK PERMITTED^&PAUSE>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;::MUST USE EXTRA SET OF PERCENTS IN PERMIT REG-KEY FIELD (ex. %%%%HIVE_USER%%%%\XYZ)>>%MAKER_FOLDER%\PACKAGE.CMD"
EXIT /B
:PACKEX_MSI_EXAMPLE
SET "PackType=SCRIPTED"&&SET "PackName=MSI_INSTALLER_EXAMPLE"&&SET "PackDesc=Example of a Scripted Pack MSI Installer"
ECHO;::LIVE COMMAND, NEEDS TO BE APPLIED LIVE, SETUPCOMPLETE, OR RUNONCE>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;::PUT MSI IN PACK FOLDER.>>%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;"EXAMPLE.msi" /qn>>"%MAKER_FOLDER%\PACKAGE.CMD"
EXIT /B
:PACKEX_DRIVER_UPDATE
SET "PackType=SCRIPTED"&&SET "PACK_CFG_1=10"&&SET "PACK_CFG_2=01"&&ECHO - Driver Updates -&&ECHO {1}Enable {2}Disable&&CALL:MENU_SELECT
IF "%SELECT%"=="1" SET "PACK_CONFIG=%PACK_CFG_1%"&&SET "PackName=Driver_Update_Enable"&&SET "PackDesc=Driver Update Enable"
IF "%SELECT%"=="2" SET "PACK_CONFIG=%PACK_CFG_2%"&&SET "PackName=Driver_Update_Disable"&&SET "PackDesc=Driver Update Disable"
CALL:PACK_CONFIG
ECHO;Reg.exe add "%%HIVE_SOFTWARE%%\Policies\Microsoft\Windows\DriverSearching" /v "DriverUpdateWizardWuSearchEnabled" /t REG_DWORD /d "%PACK_ENT_1%" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Reg.exe add "%%HIVE_SOFTWARE%%\Policies\Microsoft\Windows\WindowsUpdate" /v "ExcludeWUDriversInQualityUpdate" /t REG_DWORD /d "%PACK_ENT_2%" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
EXIT /B
:PACKEX_FEATURE_UPDATE_THRESHOLD
SET "PackType=SCRIPTED"&&SET "PackName=Feature_Threshold"&&SET "EDIT_MANIFEST=1"&&SET "EDIT_SETUP=1"
SET "GET_VER="&&FOR /F "tokens=1-9 delims= " %%a IN ('REG QUERY "%HIVE_SOFTWARE%\Microsoft\Windows NT\CurrentVersion" /f "DisplayVersion" /c /e') DO (IF "%%a"=="DisplayVersion" SET "GET_VER=%%c")
IF NOT DEFINED GET_VER SET "GET_VER=22H2"
SET "PackDesc=Stop Updates at Release Threshold %GET_VER%"
ECHO;Reg.exe add "%%HIVE_SOFTWARE%%\Policies\Microsoft\Windows\WindowsUpdate" /v "TargetReleaseVersion" /t REG_DWORD /d "1" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;Reg.exe add "%%HIVE_SOFTWARE%%\Policies\Microsoft\Windows\WindowsUpdate" /v "TargetReleaseVersionInfo" /t REG_SZ /d "%GET_VER%" /f>>"%MAKER_FOLDER%\PACKAGE.CMD"
EXIT /B
:PACKEX_ANSWER_FILE
SET "PackType=SCRIPTED"&&SET "PackName=Unattended"&&SET "PackDesc=Generate Unattended Answer File"&&SET "EDIT_CUSTOM=unattend.xml"
ECHO;::TIME-MANDATORY: NEEDS TO BE APPLIED DURING IMAGE-APPLY STAGE($PK LIST)>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;::SETUPCOMPLETE/RUNONCE IS TOO LATE>>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO        - USERNAME? -
ECHO     - ENTER USERNAME -
ECHO   - 0-9 A-Z - NO SPACES -
ECHO      (ENTER) FOR DEFAULT
IF "%EXAMPLE_MODE%"=="CREATE" SET "PROMPT_SET=NEWUSER2"&&CALL:PROMPT_SET_ANY
IF NOT DEFINED NEWUSER2 SET "NEWUSER2=$haZZam"
ECHO.
ECHO       - PRODUCT KEY? -
ECHO XXXXX-XXXXX-XXXXX-XXXXX-XXXXX
ECHO      (ENTER) FOR DEFAULT
IF "%EXAMPLE_MODE%"=="CREATE" SET "PROMPT_SET=PRODUCT_KEY"&&CALL:PROMPT_SET_ANY
IF NOT DEFINED PRODUCT_KEY SET "PRODUCT_KEY=92NFX-8DJQP-P6BBQ-THF9C-7CG2H"
ECHO;MD "%%WINTAR%%\PANTHER">>"%MAKER_FOLDER%\PACKAGE.CMD"
ECHO;COPY /Y "%%~DP0unattend.xml" "%%WINTAR%%\PANTHER">>"%MAKER_FOLDER%\PACKAGE.CMD"
SET "ANSWER_FILE=%MAKER_FOLDER%\unattend.xml"
ECHO;^<?xml version="1.0" encoding="utf-8"?^>>"%ANSWER_FILE%"
ECHO;^<unattend xmlns="urn:schemas-microsoft-com:unattend"^>>>"%ANSWER_FILE%"
ECHO;	^<settings pass="oobeSystem"^>>>"%ANSWER_FILE%"
ECHO;		^<component name="Microsoft-Windows-International-Core" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS" xmlns:wcm="http://schemas.microsoft.com/WMIConfig/2002/State" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"^>>>"%ANSWER_FILE%"
ECHO;			^<InputLocale^>0409:00000409^</InputLocale^>>>"%ANSWER_FILE%"
ECHO;			^<SystemLocale^>en-US^</SystemLocale^>>>"%ANSWER_FILE%"
ECHO;			^<UILanguage^>en-US^</UILanguage^>>>"%ANSWER_FILE%"
ECHO;			^<UILanguageFallback^>en-US^</UILanguageFallback^>>>"%ANSWER_FILE%"
ECHO;			^<UserLocale^>en-US^</UserLocale^>>>"%ANSWER_FILE%"
ECHO;		^</component^>>>"%ANSWER_FILE%"
ECHO;		^<component name="Microsoft-Windows-Shell-Setup" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS" xmlns:wcm="http://schemas.microsoft.com/WMIConfig/2002/State" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"^>>>"%ANSWER_FILE%"
ECHO;			^<TimeZone^>Mountain Standard Time^</TimeZone^>>>"%ANSWER_FILE%"
ECHO;			^<AutoLogon^>>>"%ANSWER_FILE%"
ECHO;				^<Enabled^>true^</Enabled^>>>"%ANSWER_FILE%"
ECHO;				^<LogonCount^>9999999^</LogonCount^>>>"%ANSWER_FILE%"
ECHO;				^<Username^>%NEWUSER2%^</Username^>>>"%ANSWER_FILE%"
ECHO;				^<Password^>>>"%ANSWER_FILE%"
ECHO;					^<PlainText^>true^</PlainText^>>>"%ANSWER_FILE%"
ECHO;					^<Value^>^</Value^>>>"%ANSWER_FILE%"
ECHO;				^</Password^>>>"%ANSWER_FILE%"
ECHO;			^</AutoLogon^>>>"%ANSWER_FILE%"
ECHO;			^<OOBE^>>>"%ANSWER_FILE%"
ECHO;				^<HideEULAPage^>true^</HideEULAPage^>>>"%ANSWER_FILE%"
ECHO;				^<HideLocalAccountScreen^>true^</HideLocalAccountScreen^>>>"%ANSWER_FILE%"
ECHO;				^<HideOnlineAccountScreens^>true^</HideOnlineAccountScreens^>>>"%ANSWER_FILE%"
ECHO;				^<HideWirelessSetupInOOBE^>true^</HideWirelessSetupInOOBE^>>>"%ANSWER_FILE%"
ECHO;				^<NetworkLocation^>Other^</NetworkLocation^>>>"%ANSWER_FILE%"
ECHO;				^<ProtectYourPC^>3^</ProtectYourPC^>>>"%ANSWER_FILE%"
ECHO;				^<SkipMachineOOBE^>true^</SkipMachineOOBE^>>>"%ANSWER_FILE%"
ECHO;				^<SkipUserOOBE^>true^</SkipUserOOBE^>>>"%ANSWER_FILE%"
ECHO;			^</OOBE^>>>"%ANSWER_FILE%"
ECHO;			^<UserAccounts^>>>"%ANSWER_FILE%"
ECHO;				^<LocalAccounts^>>>"%ANSWER_FILE%"
ECHO;					^<LocalAccount wcm:action="add"^>>>"%ANSWER_FILE%"
ECHO;						^<Group^>Administrators^</Group^>>>"%ANSWER_FILE%"
ECHO;						^<Name^>%NEWUSER2%^</Name^>>>"%ANSWER_FILE%"
ECHO;						^<Password^>>>"%ANSWER_FILE%"
ECHO;							^<PlainText^>true^</PlainText^>>>"%ANSWER_FILE%"
ECHO;							^<Value^>^</Value^>>>"%ANSWER_FILE%"
ECHO;						^</Password^>>>"%ANSWER_FILE%"
ECHO;					^</LocalAccount^>>>"%ANSWER_FILE%"
ECHO;				^</LocalAccounts^>>>"%ANSWER_FILE%"
ECHO;			^</UserAccounts^>>>"%ANSWER_FILE%"
ECHO;		^</component^>>>"%ANSWER_FILE%"
ECHO;	^</settings^>>>"%ANSWER_FILE%"
ECHO;	^<settings pass="specialize"^>>>"%ANSWER_FILE%"
ECHO;		^<component name="Microsoft-Windows-Security-SPP-UX" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS" xmlns:wcm="http://schemas.microsoft.com/WMIConfig/2002/State" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"^>>>"%ANSWER_FILE%"
ECHO;			^<SkipAutoActivation^>true^</SkipAutoActivation^>>>"%ANSWER_FILE%"
ECHO;		^</component^>>>"%ANSWER_FILE%"
ECHO;		^<component name="Microsoft-Windows-Shell-Setup" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS" xmlns:wcm="http://schemas.microsoft.com/WMIConfig/2002/State" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"^>>>"%ANSWER_FILE%"
ECHO;			^<ComputerName^>Computer^</ComputerName^>>>"%ANSWER_FILE%"
ECHO;			^<CopyProfile^>false^</CopyProfile^>>>"%ANSWER_FILE%"
ECHO;			^<ProductKey^>%PRODUCT_KEY%^</ProductKey^>>>"%ANSWER_FILE%"
ECHO;		^</component^>>>"%ANSWER_FILE%"
ECHO;	^</settings^>>>"%ANSWER_FILE%"
ECHO;	^<settings pass="windowsPE"^>>>"%ANSWER_FILE%"
ECHO;		^<component name="Microsoft-Windows-International-Core-WinPE" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS" xmlns:wcm="http://schemas.microsoft.com/WMIConfig/2002/State" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"^>>>"%ANSWER_FILE%"
ECHO;			^<InputLocale^>0409:00000409^</InputLocale^>>>"%ANSWER_FILE%"
ECHO;			^<SystemLocale^>en-US^</SystemLocale^>>>"%ANSWER_FILE%"
ECHO;			^<UILanguage^>en-US^</UILanguage^>>>"%ANSWER_FILE%"
ECHO;			^<UILanguageFallback^>en-US^</UILanguageFallback^>>>"%ANSWER_FILE%"
ECHO;			^<UserLocale^>en-US^</UserLocale^>>>"%ANSWER_FILE%"
ECHO;			^<SetupUILanguage^>>>"%ANSWER_FILE%"
ECHO;				^<UILanguage^>en-US^</UILanguage^>>>"%ANSWER_FILE%"
ECHO;			^</SetupUILanguage^>>>"%ANSWER_FILE%"
ECHO;		^</component^>>>"%ANSWER_FILE%"
ECHO;		^<component name="Microsoft-Windows-Setup" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS" xmlns:wcm="http://schemas.microsoft.com/WMIConfig/2002/State" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"^>>>"%ANSWER_FILE%"
ECHO;			^<Diagnostics^>>>"%ANSWER_FILE%"
ECHO;				^<OptIn^>false^</OptIn^>>>"%ANSWER_FILE%"
ECHO;			^</Diagnostics^>>>"%ANSWER_FILE%"
ECHO;			^<DynamicUpdate^>>>"%ANSWER_FILE%"
ECHO;				^<Enable^>false^</Enable^>>>"%ANSWER_FILE%"
ECHO;				^<WillShowUI^>OnError^</WillShowUI^>>>"%ANSWER_FILE%"
ECHO;			^</DynamicUpdate^>>>"%ANSWER_FILE%"
ECHO;			^<ImageInstall^>>>"%ANSWER_FILE%"
ECHO;				^<OSImage^>>>"%ANSWER_FILE%"
ECHO;					^<Compact^>true^</Compact^>>>"%ANSWER_FILE%"
ECHO;					^<WillShowUI^>OnError^</WillShowUI^>>>"%ANSWER_FILE%"
ECHO;					^<InstallFrom^>>>"%ANSWER_FILE%"
ECHO;						^<MetaData wcm:action="add"^>>>"%ANSWER_FILE%"
ECHO;							^<Key^>/IMAGE/INDEX^</Key^>>>"%ANSWER_FILE%"
ECHO;							^<Value^>1^</Value^>>>"%ANSWER_FILE%"
ECHO;						^</MetaData^>>>"%ANSWER_FILE%"
ECHO;					^</InstallFrom^>>>"%ANSWER_FILE%"
ECHO;				^</OSImage^>>>"%ANSWER_FILE%"
ECHO;			^</ImageInstall^>>>"%ANSWER_FILE%"
ECHO;			^<UserData^>>>"%ANSWER_FILE%"
ECHO;				^<AcceptEula^>true^</AcceptEula^>>>"%ANSWER_FILE%"
ECHO;				^<ProductKey^>>>"%ANSWER_FILE%"
ECHO;					^<Key^>%PRODUCT_KEY%^</Key^>>>"%ANSWER_FILE%"
ECHO;					^<WillShowUI^>OnError^</WillShowUI^>>>"%ANSWER_FILE%"
ECHO;				^</ProductKey^>>>"%ANSWER_FILE%"
ECHO;			^</UserData^>>>"%ANSWER_FILE%"
ECHO;		^</component^>>>"%ANSWER_FILE%"
ECHO;	^</settings^>>>"%ANSWER_FILE%"
ECHO;^</unattend^>>>"%ANSWER_FILE%"
REM DISM /IMAGE:"%APPLYDIR%" /APPLY-UNATTEND:"%ANSWER_FILE%"
EXIT /B
:CLEAN_EXIT
COLOR 07&&TITLE C:\Windows\system32\CMD.exe&&CD /D "%ORIG_CD%"
IF "%PROG_MODE%"=="RAMDISK" EXIT 0&&EXIT 0
